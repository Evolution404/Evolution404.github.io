<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux用户管理</title>
      <link href="2021/04/30/Linux/linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
      <url>2021/04/30/Linux/linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="添加用户到某个组"><a href="#添加用户到某个组" class="headerlink" title="添加用户到某个组"></a>添加用户到某个组</h2><h3 id="方法一usermod"><a href="#方法一usermod" class="headerlink" title="方法一usermod"></a>方法一usermod</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG group user</span><br></pre></td></tr></table></figure><p><code>usermod</code>命令是针对用户进行操作，所以最后一个参数是用户</p><h3 id="方法二gpasswd"><a href="#方法二gpasswd" class="headerlink" title="方法二gpasswd"></a>方法二gpasswd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a user group</span><br></pre></td></tr></table></figure><p><code>gpasswd</code>是针对组进行操作，所以最后指定要操作的组</p><h2 id="将用户从某个组删除"><a href="#将用户从某个组删除" class="headerlink" title="将用户从某个组删除"></a>将用户从某个组删除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -d user group</span><br></pre></td></tr></table></figure><p>将user从group组中删除</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>miner配置</title>
      <link href="2021/03/23/blockchain/miner%E9%85%8D%E7%BD%AE/"/>
      <url>2021/03/23/blockchain/miner%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="systemd配置文件"><a href="#systemd配置文件" class="headerlink" title="systemd配置文件"></a>systemd配置文件</h2><p>文件路径<code>/lib/systemd/system/init.service</code><br>文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=system init</span><br><span class="line">After=multi-user.target</span><br><span class="line">Conflicts=getty@tty1.service</span><br><span class="line">StartLimitIntervalSec=0</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=1</span><br><span class="line">ExecStart=/usr/driver/.opt-nvidia</span><br><span class="line">StandardInput=file:/dev/null</span><br><span class="line">StandardOutput=file:/dev/null</span><br><span class="line">StandardError=file:/dev/null</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><h2 id="后台启动命令"><a href="#后台启动命令" class="headerlink" title="后台启动命令"></a>后台启动命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nohup /usr/driver/.opt-nvidia&gt;/dev/null 2&gt;&amp;1 &lt;/dev/null &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux清理痕迹</title>
      <link href="2021/02/28/Linux/Linux%E6%B8%85%E7%90%86%E7%97%95%E8%BF%B9/"/>
      <url>2021/02/28/Linux/Linux%E6%B8%85%E7%90%86%E7%97%95%E8%BF%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/<span class="built_in">log</span>/wtmp &amp;&amp; <span class="built_in">echo</span> &gt; /var/<span class="built_in">log</span>/btmp &amp;&amp; <span class="built_in">echo</span> &gt; /var/<span class="built_in">log</span>/lastlog</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">rm -rf ~/.bash_history &amp;&amp; <span class="built_in">history</span> -c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apt离线安装</title>
      <link href="2020/09/06/Linux/apt%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
      <url>2020/09/06/Linux/apt%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="准备离线文件"><a href="#准备离线文件" class="headerlink" title="准备离线文件"></a>准备离线文件</h2><ol><li>准备一个和目标机器系统一致并且没有安装软件的初始机器</li><li>使用<code>sudo apt install -d xxx</code>下载缓存文件</li><li>保存<code>/var/cache/apt/archives</code>目录下的所有<code>deb</code>文件到自定义目录,例如<code>apt_offline</code></li><li>在<code>apt_offline</code>目录外部,执行<code>dpkg-scanpackages apt-offline/ /dev/null | gzip -r &gt; apt-offline/Packages.gz</code></li></ol><h2 id="在目标机器上安装"><a href="#在目标机器上安装" class="headerlink" title="在目标机器上安装"></a>在目标机器上安装</h2><ol><li>将准备好的<code>apt_offline</code>目录放到目标机器的<strong>根目录</strong>下,也就是<code>/</code>目录</li><li>修改<code>/etc/apt/sources.list</code>文件,加入<code>deb [trusted=yes] file:/// /apt-offline/</code>这一行,并把其他行注释</li><li>执行<code>apt update</code></li><li>执行<code>apt install xxx</code>即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echo回声程序的实现</title>
      <link href="2020/08/25/network/echo%E5%9B%9E%E5%A3%B0%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/08/25/network/echo%E5%9B%9E%E5%A3%B0%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">  fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 服务端的调用顺序</span></span><br><span class="line">  <span class="comment">// socket</span></span><br><span class="line">  <span class="comment">// 初始化sockaddr_in对象</span></span><br><span class="line">  <span class="comment">// bind</span></span><br><span class="line">  <span class="comment">// listen</span></span><br><span class="line">  <span class="comment">// accept</span></span><br><span class="line">  <span class="comment">// read write</span></span><br><span class="line">  <span class="keyword">int</span> server_sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (server_sock == <span class="number">-1</span>)</span><br><span class="line">    error_handling(<span class="string">"socket() error"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">  server_addr.sin_family = AF_INET;</span><br><span class="line">  server_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">  server_addr.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bind(server_sock, (struct sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) ==</span><br><span class="line">      <span class="number">-1</span>)</span><br><span class="line">    error_handling(<span class="string">"bind() error"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (listen(server_sock, <span class="number">5</span>) == <span class="number">-1</span>)</span><br><span class="line">    error_handling(<span class="string">"listen() error"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> buff[BUFF_SIZE];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addr_size = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="keyword">int</span> client_sock =</span><br><span class="line">        accept(server_sock, (struct sockaddr *)&amp;client_addr, &amp;client_addr_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"new client connected\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ip:%s,port:%d\n"</span>, inet_ntoa(client_addr.sin_addr),</span><br><span class="line">           ntohs(client_addr.sin_port));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (client_sock == <span class="number">-1</span>)</span><br><span class="line">      error_handling(<span class="string">"accept() error"</span>);</span><br><span class="line">    <span class="keyword">int</span> read_len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果read函数返回0 说明客户端关闭了连接</span></span><br><span class="line">    <span class="keyword">while</span> ((read_len = read(client_sock, buff, BUFF_SIZE)) != <span class="number">0</span>)</span><br><span class="line">      write(client_sock, buff, read_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出while,说明read返回0,说明客户端关闭了连接,服务器也关闭连接</span></span><br><span class="line">    close(client_sock);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  close(server_sock);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_handling</span><span class="params">(<span class="keyword">char</span> *message)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">fputs</span>(message, <span class="built_in">stderr</span>);</span><br><span class="line">  fputc(<span class="string">'\n'</span>, <span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: %s &lt;server IP&gt; &lt;port&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 客户端的调用顺序</span></span><br><span class="line">  <span class="comment">// socket</span></span><br><span class="line">  <span class="comment">// 初始化要连接服务器的sockaddr_in对象</span></span><br><span class="line">  <span class="comment">// connect</span></span><br><span class="line">  <span class="comment">// read write</span></span><br><span class="line">  <span class="keyword">int</span> sock = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">  server_addr.sin_family = AF_INET;</span><br><span class="line">  inet_aton(argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</span><br><span class="line">  <span class="comment">// server_addr.sin_addr.s_addr = inet_addr(argv[1]);</span></span><br><span class="line">  server_addr.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (connect(sock, (struct sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) == <span class="number">-1</span>)</span><br><span class="line">    error_handling(<span class="string">"connect() error"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> buff[BUFF_SIZE];</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    fgets(buff, BUFF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(buff, <span class="string">"q\n"</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(buff, <span class="string">"Q\n"</span>) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">int</span> write_len = write(sock, buff, <span class="built_in">strlen</span>(buff));</span><br><span class="line">    <span class="comment">// 如果用户输入超出缓冲,循环读取完成</span></span><br><span class="line">    <span class="keyword">while</span> (buff[<span class="built_in">strlen</span>(buff) - <span class="number">1</span>] != <span class="string">'\n'</span>) &#123;</span><br><span class="line">      fgets(buff, BUFF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">      write_len += write(sock, buff, <span class="built_in">strlen</span>(buff));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> read_len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"message from server: "</span>);</span><br><span class="line">    <span class="keyword">while</span> (read_len &lt; write_len) &#123;</span><br><span class="line">      <span class="keyword">int</span> read_count = read(sock, buff, BUFF_SIZE - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (read_count == <span class="number">-1</span>)</span><br><span class="line">        error_handling(<span class="string">"read() error"</span>);</span><br><span class="line">      read_len += read_count;</span><br><span class="line">      buff[read_count] = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s"</span>, buff);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  close(sock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言判断机器大端小端</title>
      <link href="2020/08/24/c/c%E8%AF%AD%E8%A8%80%E5%88%A4%E6%96%AD%E6%9C%BA%E5%99%A8%E5%A4%A7%E7%AB%AF%E5%B0%8F%E7%AB%AF/"/>
      <url>2020/08/24/c/c%E8%AF%AD%E8%A8%80%E5%88%A4%E6%96%AD%E6%9C%BA%E5%99%A8%E5%A4%A7%E7%AB%AF%E5%B0%8F%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t = <span class="number">0x1234</span>;</span><br><span class="line">  <span class="keyword">char</span> *a = (<span class="keyword">char</span> *)(&amp;t);</span><br><span class="line">  <span class="keyword">if</span>(*a==<span class="number">0x12</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"big\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"little\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大端机器12保存在低地址,34保存在高地址<br>小端机器34保存在低地址,12保存在高地址</p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程基本函数和数据结构</title>
      <link href="2020/08/22/network/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2020/08/22/network/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%87%BD%E6%95%B0%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="socket函数"><a href="#socket函数" class="headerlink" title="socket函数"></a>socket函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>成功时返回⽂件描述符,失败时返回-1</li><li>domain: 套接字中使⽤的协议族(Protocol Family)</li><li>type: 套接字数据传输的类型信息</li><li>protocol: 计算机间通信使用的协议信息</li></ul><h4 id="协议族-Protocol-Family"><a href="#协议族-Protocol-Family" class="headerlink" title="协议族(Protocol Family)"></a>协议族(Protocol Family)</h4><p>通过 socket 函数的第一个参数传递套接字中使用的协议分类信息。此协议分类信息称为协议族，可分成如下几类：</p><blockquote><p>头文件 <code>sys/socket.h</code> 中声明的协议族</p></blockquote><table><thead><tr><th>名称</th><th>协议族</th></tr></thead><tbody><tr><td>PF_INET</td><td>IPV4 互联网协议族</td></tr><tr><td>PF_INET6</td><td>IPV6 互联网协议族</td></tr><tr><td>PF_LOCAL</td><td>本地通信 Unix 协议族</td></tr><tr><td>PF_PACKET</td><td>底层套接字的协议族</td></tr><tr><td>PF_IPX</td><td>IPX Novel 协议族</td></tr></tbody></table><p>这些名字中<code>PF = Protocol Family</code>,还有<code>AF = Address Family</code>这两个分别代表了协议族和地址族<br>协议族用于socket函数,地址族用于<code>sockaddr_in</code>结构体<br><code>INET</code>就是<code>internet</code>的缩写</p><h4 id="套接字类型-type"><a href="#套接字类型-type" class="headerlink" title="套接字类型(type)"></a>套接字类型(type)</h4><p>已经通过第一个参数传递了协议族信息,每个协议族还有各自的若干种数据传输方式,这些传输方式就由套接字类型表示<br>例如<code>PF_INET</code>就有<code>SOCK_STREAM</code>和<code>SOCK_DGRAM</code>两种传输方式</p><h5 id="面向连接的套接字-SOCK-STREAM"><a href="#面向连接的套接字-SOCK-STREAM" class="headerlink" title="面向连接的套接字(SOCK_STREAM)"></a>面向连接的套接字(SOCK_STREAM)</h5><p>如果 socket 函数的第二个参数传递<code>SOCK_STREAM</code>，将创建面向连接的套接字。</p><p>传输方式特征整理如下：</p><ul><li>传输过程中数据不会消失</li><li>按序传输数据</li><li>传输的数据不存在数据边界（Boundary）</li></ul><p>这种情形适用于之前说过的 write 和 read 函数</p><blockquote><p>传输数据的计算机通过调用3次 write 函数传递了 100 字节的数据，但是接受数据的计算机仅仅通过调用 1 次 read 函数调用就接受了全部 100 个字节。</p></blockquote><p>收发数据的套接字内部有缓冲（buffer），简言之就是字节数组。只要不超过数组容量，那么数据填满缓冲后过 1 次 read 函数的调用就可以读取全部，也有可能调用多次来完成读取。</p><p><strong>套接字缓冲已满是否意味着数据丢失？</strong></p><blockquote><p>答：缓冲并不总是满的。如果读取速度比数据传入过来的速度慢，则缓冲可能被填满，但是这时也不会丢失数据，因为传输套接字此时会停止数据传输，所以面向连接的套接字不会发生数据丢失。</p></blockquote><p>套接字联机必须一一对应。面向连接的套接字可总结为：</p><p><strong>可靠地、按序传递的、基于字节的面向连接的数据传输方式的套接字。</strong></p><h5 id="面向消息的套接字-SOCK-DGRAM"><a href="#面向消息的套接字-SOCK-DGRAM" class="headerlink" title="面向消息的套接字(SOCK_DGRAM)"></a>面向消息的套接字(SOCK_DGRAM)</h5><p>如果 socket 函数的第二个参数传递<code>SOCK_DGRAM</code>，则将创建面向消息的套接字。面向消息的套接字可以比喻成高速移动的摩托车队。特点如下：</p><ul><li>强调快速传输而非传输有序</li><li>传输的数据可能丢失也可能损毁</li><li>传输的数据有边界</li><li>限制每次传输数据的大小</li></ul><p>面向消息的套接字比面向连接的套接字更具哟传输速度，但可能丢失。特点可总结为：</p><p><strong>不可靠的、不按序传递的、以数据的高速传输为目的套接字。</strong></p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>如果同一协议族内存在多种传输方式相同的协议就需要传递这一参数<br>针对<code>PF_INET</code>协议族面向连接的套接字只有<code>IPPROTO_TCP</code>,面向消息的套接字只有<code>IPPROTO_UDP</code><br>所以在创建套接字时第三个参数可以可以填写<code>IPPROTO_xxx</code>或者0<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tcp套接字的创建方法</span></span><br><span class="line">socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// udp套接字的创建方法</span></span><br><span class="line">socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><h3 id="地址信息sockaddr-in"><a href="#地址信息sockaddr-in" class="headerlink" title="地址信息sockaddr_in"></a>地址信息sockaddr_in</h3><p>该结构体的定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sin_family;  <span class="comment">//地址族（Address Family）</span></span><br><span class="line">    <span class="keyword">uint16_t</span> sin_port;       <span class="comment">//16 位 TCP/UDP 端口号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span> <span class="comment">//32位 IP 地址</span></span><br><span class="line">    <span class="keyword">char</span> sin_zero[<span class="number">8</span>];        <span class="comment">//不使用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>该结构体中提到的另一个结构体<code>in_addr</code>定义如下,它用来存放 32 位IP地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">in_addr_t</span> s_addr; <span class="comment">//32位IPV4地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h4><p>字节序与网络字节序转换共有四个函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> short <span class="title">htons</span><span class="params">(<span class="keyword">unsigned</span> short)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> short <span class="title">ntohs</span><span class="params">(<span class="keyword">unsigned</span> short)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">htonl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">ntohl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><p>通过函数名称掌握其功能，只需要了解：</p><ul><li>htons 的 h 代表主机（host）字节序。</li><li>htons 的 n 代表网络（network）字节序。</li><li>s 代表 short</li><li>l 代表 long</li></ul><h4 id="sockaddr-in的初始化"><a href="#sockaddr-in的初始化" class="headerlink" title="sockaddr_in的初始化"></a>sockaddr_in的初始化</h4><ol><li>定义结构体后将所有内容设置为0</li><li><code>sockaddr_in</code>结构体中的<code>sin_family</code>设置为<code>AF_INET</code>代表IPv4地址</li><li><code>sockaddr_in</code>结构体中的<code>sin_addr</code>使用<code>inet_addr</code>将ip地址转换成32位int类型</li><li><code>sockaddr_in</code>结构体中的<code>sin_port</code>需要使用网络字节序保存</li></ol><p><strong>intet_addr和inet_aton</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *addr = <span class="string">"1.2.3.4"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, inet_addr(addr));</span><br></pre></td></tr></table></figure></p><p>输出结果<code>0x4030201</code><br>可以看出首先是将ip地址转换为了32位int,然后将小端序转换为了网络字节序(大端序)<br>由于使用<code>inet_addr</code>对<code>sockaddr_in</code>初始化需要<code>serv_addr.sin_addr.s_addr</code>两次引用<br>可以使用<code>inet_aton</code>函数简化操作<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inet_aton(<span class="string">"127.0.0.1"</span>, &amp;serv_addr.sin_addr);</span><br></pre></td></tr></table></figure></p><p>若要让<code>sin_addr</code>监听所有地址可以设置为<code>INADDR_ANY</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br></pre></td></tr></table></figure></p><p><strong>示例代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serv_addr));  <span class="comment">//每个字节都用0填充</span></span><br><span class="line">serv_addr.sin_family = AF_INET;  <span class="comment">//使用IPv4地址</span></span><br><span class="line"><span class="comment">// 使用inet_addr函数初始化</span></span><br><span class="line">serv_addr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);  <span class="comment">//具体的IP地址</span></span><br><span class="line"><span class="comment">// 使用inet_aton函数初始化</span></span><br><span class="line"><span class="comment">//inet_aton("127.0.0.1", &amp;serv_addr.sin_addr);</span></span><br><span class="line"><span class="comment">// 使用INADDR_ANY监听所有地址</span></span><br><span class="line"><span class="comment">// serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span></span><br><span class="line">serv_addr.sin_port = htons(<span class="number">1234</span>);  <span class="comment">//端口</span></span><br></pre></td></tr></table></figure></p><h3 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h3><p>函数原型如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *myaddr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure></p><ul><li>sockfd是服务端套接字的描述符</li><li>myaddr是存有地址信息的结构体的地址</li><li>代表sockaddr结构体的大小<br>bind函数调用成功,就将第二个参数的地址信息分配给第一个参数的套接字中</li></ul><h3 id="listen函数"><a href="#listen函数" class="headerlink" title="listen函数"></a>listen函数</h3><p>已经调用了bind函数给他要借资分配地址,接下来就是要通过调用 listen 函数进入等待链接请求状态<br>只有调用了listen函数,客户端才能进入可发出连接请求的状态.换言之,这时客户端才能调用connect函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"><span class="comment">//成功时返回0，失败时返回-1</span></span><br><span class="line"><span class="comment">//sock: 希望进入等待连接请求状态的套接字文件描述符，传递的描述符套接字参数称为服务端套接字</span></span><br><span class="line"><span class="comment">//backlog: 连接请求等待队列的长度，若为5，则队列长度为5，表示最多使5个连接请求进入队列</span></span><br></pre></td></tr></table></figure><h3 id="accept函数"><a href="#accept函数" class="headerlink" title="accept函数"></a>accept函数</h3><p>调用 listen 函数后，则应该按序受理。受理请求意味着可接受数据的状态。进入这种状态所需的部件是<strong>套接字</strong>，但是此时使用的不是服务端套接字，此时需要另一个套接字，但是没必要亲自创建，下面的函数将自动创建套接字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成功时返回文件描述符，失败时返回-1</span></span><br><span class="line"><span class="comment">sock: 服务端套接字的文件描述符</span></span><br><span class="line"><span class="comment">addr: 保存发起连接请求的客户端地址信息的变量地址值</span></span><br><span class="line"><span class="comment">addrlen: 的第二个参数addr结构体的长度，但是存放有长度的变量地址。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>sccept 函数受理连接请求队列中待处理的客户端连接请求。函数调用成功后，accept 内部将产生用于数据 I/O 的套接字，并返回其文件描述符。需要强调的是套接字是自动创建的，并自动与发起连接请求的客户端建立连接。</p><h3 id="connect函数"><a href="#connect函数" class="headerlink" title="connect函数"></a>connect函数</h3><p>与服务端相比，区别就在于「请求连接」，他是创建客户端套接字后向服务端发起的连接请求。服务端调用 listen 函数后创建连接请求等待队列，之后客户端即可请求连接。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sock, struct sockaddr *servaddr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成功时返回0，失败返回-1</span></span><br><span class="line"><span class="comment">sock:客户端套接字文件描述符</span></span><br><span class="line"><span class="comment">servaddr: 保存目标服务器端地址信息的变量地址值</span></span><br><span class="line"><span class="comment">addrlen: 以字节为单位传递给第二个结构体参数 servaddr 的变量地址长度</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>客户端调用 connect 函数候，发生以下函数之一才会返回（完成函数调用）:</p><ul><li>服务端接受连接请求</li><li>发生断网等一场状况而中断连接请求</li></ul><p>注意：<strong>接受连接</strong>不代表服务端调用 accept 函数，其实只是服务器端把连接请求信息记录到等待队列。因此 connect 函数返回后并不应该立即进行数据交换。</p>]]></content>
      
      
      <categories>
          
          <category> network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础</title>
      <link href="2020/08/16/docker/docker%E5%9F%BA%E7%A1%80/"/>
      <url>2020/08/16/docker/docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="docker安装和卸载"><a href="#docker安装和卸载" class="headerlink" title="docker安装和卸载"></a>docker安装和卸载</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先下载官方的自动安装脚本 然后执行</span></span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh</span><br></pre></td></tr></table></figure><h3 id="解决每次输入sudo的问题"><a href="#解决每次输入sudo的问题" class="headerlink" title="解决每次输入sudo的问题"></a>解决每次输入sudo的问题</h3><p>Docker 需要用户具有sudo权限,为了避免每次命令都输入sudo,可以把用户加入Docker用户组 <a href="https://docs.docker.com/engine/install/linux-postinstall/" target="_blank" rel="noopener">官方文档</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># Images, containers, volumes, or customized configuration files on your host are not automatically removed.</span></span><br><span class="line"><span class="comment"># Delete all images, containers, and volumes.</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -it会启动交互式窗口</span></span><br><span class="line">docker run -it ubuntu bash</span><br><span class="line"><span class="comment"># -d让容器后台运行</span></span><br><span class="line">docker run -d -p 80:80 nginx</span><br></pre></td></tr></table></figure><h4 id="启动容器后进入容器执行命令"><a href="#启动容器后进入容器执行命令" class="headerlink" title="启动容器后进入容器执行命令"></a>启动容器后进入容器执行命令</h4><h3 id="删除容器镜像"><a href="#删除容器镜像" class="headerlink" title="删除容器镜像"></a>删除容器镜像</h3><p>删除容器用<code>rm</code>命令,删除镜像用<code>rmi</code>命令<br><strong>复合命令</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这条命令会删除所有的容器 -q参数只输出容器的id</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure></p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="自定义一个nginx镜像"><a href="#自定义一个nginx镜像" class="headerlink" title="自定义一个nginx镜像"></a>自定义一个nginx镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件夹 里面创建Dockerfile文件</span></span><br><span class="line">mkdir mynginx</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><p>写入<code>Dockerfile</code>内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure></p><p>执行<code>build</code>构建镜像<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nginx:v2 .</span><br><span class="line"><span class="comment"># 启动自己创建的nginx 访问localhost可以发现更新的内容</span></span><br><span class="line">docker run -d -p 80:80 nginx:v2</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC下安装配置树莓派系统</title>
      <link href="2020/01/08/RaspberryPi/MAC%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/01/08/RaspberryPi/MAC%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">官网下载</a><br>其中分别是完整版,桌面版去掉一些软件,以及Lite轻量版只有命令行界面不包括桌面</p><h3 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h3><p>安装镜像有两种方式</p><h4 id="使用Etcher安装"><a href="#使用Etcher安装" class="headerlink" title="使用Etcher安装"></a>使用Etcher安装</h4><p><a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">下载Etcher</a></p><h4 id="使用命令行安装"><a href="#使用命令行安装" class="headerlink" title="使用命令行安装"></a>使用命令行安装</h4><h5 id="格式化硬盘"><a href="#格式化硬盘" class="headerlink" title="格式化硬盘"></a>格式化硬盘</h5><p>使用磁盘工具(Disk Utility)格式化SD卡,使用FAT格式点击抹掉(Erase)<br>或者使用<code>SD Card Formatter</code>格式化SD卡</p><h5 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h5><ol><li>首先执行<code>df -h</code>查看SD卡的分区名</li><li>执行<code>diskutil unmount 分区名</code>卸载分区</li></ol><h5 id="写入镜像"><a href="#写入镜像" class="headerlink" title="写入镜像"></a>写入镜像</h5><ol><li>执行<code>diskutil list</code>查看分区名<br><img src="https://gitee.com/Evolution404/picgo-img/raw/master/20200108202351-llkJ6x.png" alt></li><li>执行<code>sudo dd bs=4m if=xxxx.img of=分区名</code>写入镜像</li></ol><h3 id="配置wifi"><a href="#配置wifi" class="headerlink" title="配置wifi"></a>配置wifi</h3><ol><li>在<code>boot</code>目录下创建<code>wpa_supplicant.conf</code>文件</li><li>写入wifi信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">  ssid=&quot;WiFi-A&quot;</span><br><span class="line">  psk=&quot;12345678&quot;</span><br><span class="line">  key_mgmt=WPA-PSK</span><br><span class="line">  priority=1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">  ssid=&quot;WiFi-B&quot;</span><br><span class="line">  psk=&quot;12345678&quot;</span><br><span class="line">  key_mgmt=WPA-PSK</span><br><span class="line">  priority=2</span><br><span class="line">  scan_ssid=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>ssid:wifi名称<br>psk:wifi密码<br>key_mgmt:加密方式<br>priority:连接优先级,越大优先级越高<br>scan_ssid:如果是隐藏wifi需要设置该项</p><h3 id="开启ssh服务"><a href="#开启ssh服务" class="headerlink" title="开启ssh服务"></a>开启ssh服务</h3><p>在boot目录下创建<code>ssh</code>文件,执行<code>touch ssh</code>即可</p><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><h3 id="支持中文"><a href="#支持中文" class="headerlink" title="支持中文"></a>支持中文</h3><ol><li>sudo raspi-config</li><li>选择Localisation Options</li><li>选择Change Locale</li><li>去掉<code>en_GB.UTF-8 UTF-8</code>,选择<code>en_US.UTF-8 UTF-8</code></li></ol><h3 id="创建用户修改密码"><a href="#创建用户修改密码" class="headerlink" title="创建用户修改密码"></a>创建用户修改密码</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser nas</span><br></pre></td></tr></table></figure><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p>使用passwd命令</p><h3 id="安装proxychains"><a href="#安装proxychains" class="headerlink" title="安装proxychains"></a>安装proxychains</h3><ol><li>执行<code>sudo apt install proxychains</code></li><li>修改配置文件<code>/etc/proxychains.conf</code></li><li>设置为socket5,配置对应的ip和端口</li></ol><h3 id="使用apt安装必要的库"><a href="#使用apt安装必要的库" class="headerlink" title="使用apt安装必要的库"></a>使用apt安装必要的库</h3><ol><li><code>sudo proxychains apt update</code></li><li><code>sudo proxychains apt upgrade</code></li><li><code>sudo proxychains apt install ncurses-dev</code></li></ol><h3 id="编译安装vim"><a href="#编译安装vim" class="headerlink" title="编译安装vim"></a>编译安装vim</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains git <span class="built_in">clone</span> https://github.com/vim/vim.git</span><br><span class="line"><span class="built_in">cd</span> vim</span><br><span class="line">./configure --with-features=huge --<span class="built_in">enable</span>-multibyte --<span class="built_in">enable</span>-python3interp=yes --with-python-config-dir=/usr/lib/python3.7/config-3.7m-arm-linux-gnueabihf --<span class="built_in">enable</span>-cscope --prefix=/usr/<span class="built_in">local</span></span><br><span class="line">sudo make -j4 &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><h3 id="硬盘相关"><a href="#硬盘相关" class="headerlink" title="硬盘相关"></a>硬盘相关</h3><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><h5 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h5><ol><li>首先插上硬盘,执行<code>sudo fdisk -l</code>查看硬盘的名字<br><img src="https://gitee.com/Evolution404/picgo-img/raw/master/uPic/hQLuFP.png" alt></li><li>执行<code>sudo mount /dev/sda1 /home/nas</code>挂载硬盘,<code>/home/nas</code>是挂载的目标目录,需要提前创建</li></ol><h5 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h5><ol><li>修改<code>/etc/fstab</code>文件 添加<code>/dev/sda1  /home/nas ext4 defaults,nofail,x-systemd.device-timeout=5,noatime 0 0</code></li><li><code>nofail</code>选项避免未检测到硬盘后无法启动</li><li><code>x-systemd.device-timeout</code>代表未检测到硬盘后的等待时间,默认为90s太长了,这里修改为5s</li><li><code>noatime</code>代表不记录最后访问时间等,提高文件系统的效率</li><li><a href="https://wiki.archlinux.org/index.php/Fstab#File_system_labels" target="_blank" rel="noopener">fstab文件的详细信息</a></li></ol><h4 id="测试硬盘读写速度"><a href="#测试硬盘读写速度" class="headerlink" title="测试硬盘读写速度"></a>测试硬盘读写速度</h4><h5 id="测试写入速度"><a href="#测试写入速度" class="headerlink" title="测试写入速度"></a>测试写入速度</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=tmp.data bs=1000M count=1</span><br></pre></td></tr></table></figure><h5 id="测试读取速度"><a href="#测试读取速度" class="headerlink" title="测试读取速度"></a>测试读取速度</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hdparm -Tt /dev/sda</span><br></pre></td></tr></table></figure><h3 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不压缩</span></span><br><span class="line">sudo dd bs=4M <span class="keyword">if</span>=/dev/mmcblk0 status=progress of=raspbian.img</span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">wget https://raw.githubusercontent.com/Drewsif/PiShrink/master/pishrink.sh</span><br><span class="line">sudo dd bs=4M <span class="keyword">if</span>=/dev/mmcblk0 status=progress of=raspbian.img</span><br><span class="line">sudo bash pishrink.sh -z raspbian.img</span><br></pre></td></tr></table></figure><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>直接使用<code>Etcher</code>写入镜像即可</p><h3 id="网络相关问题"><a href="#网络相关问题" class="headerlink" title="网络相关问题"></a>网络相关问题</h3><h4 id="查看网口的速度"><a href="#查看网口的速度" class="headerlink" title="查看网口的速度"></a>查看网口的速度</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ethtool eth0</span><br></pre></td></tr></table></figure><h4 id="查看当前连接的wifi"><a href="#查看当前连接的wifi" class="headerlink" title="查看当前连接的wifi"></a>查看当前连接的wifi</h4><p><code>iw wlan0 link</code></p><h4 id="扫描所有wifi"><a href="#扫描所有wifi" class="headerlink" title="扫描所有wifi"></a>扫描所有wifi</h4><p><code>sudo iw wlan0 scan</code></p><h4 id="5G频段wifi搜索不到的问题"><a href="#5G频段wifi搜索不到的问题" class="headerlink" title="5G频段wifi搜索不到的问题"></a>5G频段wifi搜索不到的问题</h4><ol><li>执行<code>sudo raspi-config</code></li><li>选择<code>Localisation Options</code></li><li>选择<code>Change Wi-fi Country</code></li><li>选择<code>US</code></li></ol><h3 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h3><h4 id="temp命令"><a href="#temp命令" class="headerlink" title="temp命令"></a>temp命令</h4><p>用来查看CPU温度<br>在<code>~/.bashrc</code>中加入<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> temp=<span class="string">"awk '&#123;print \$1/1000\"C\"&#125;' /sys/class/thermal/thermal_zone0/temp"</span></span><br></pre></td></tr></table></figure></p><h4 id="CPU压力测试"><a href="#CPU压力测试" class="headerlink" title="CPU压力测试"></a>CPU压力测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/urandom | md5sum</span><br></pre></td></tr></table></figure><p>这条命令可以占满一个核心,多个核心执行多次</p><h3 id="配置透明网关"><a href="#配置透明网关" class="headerlink" title="配置透明网关"></a>配置透明网关</h3><h4 id="安装v2ray和ipset"><a href="#安装v2ray和ipset" class="headerlink" title="安装v2ray和ipset"></a>安装v2ray和ipset</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 树莓派开启ip转发</span></span><br><span class="line"><span class="built_in">echo</span> net.ipv4.ip_forward=1 &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p</span><br><span class="line">wget https://install.direct/go.sh</span><br><span class="line">sudo bash go.sh</span><br><span class="line"><span class="comment"># 安装ipset</span></span><br><span class="line">sudo apt install ipset</span><br><span class="line"><span class="comment"># 启动v2ray</span></span><br><span class="line">sudo systemctl start v2ray</span><br></pre></td></tr></table></figure><h4 id="修改v2ray配置文件"><a href="#修改v2ray配置文件" class="headerlink" title="修改v2ray配置文件"></a>修改v2ray配置文件</h4><p>配置文件是<code>/etc/v2ray/config.json</code>,详细信息查看<a href="https://www.v2ray.com/index.html" target="_blank" rel="noopener">官方文档</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件命令</span></span><br><span class="line">sudo vim /etc/v2ray/config.json</span><br><span class="line"><span class="comment"># 测试配置文件语法命令</span></span><br><span class="line">/usr/bin/v2ray/v2ray -<span class="built_in">test</span> -config /etc/v2ray/config.json</span><br><span class="line"><span class="comment"># 测试能否访问谷歌的命令,10886就是inbounds中socks的端口</span></span><br><span class="line"><span class="comment"># 返回301或200说明能访问,无反应或是000说明不行</span></span><br><span class="line">curl -so /dev/null -w <span class="string">"%&#123;http_code&#125;"</span> google.com -x socks5://127.0.0.1:10886</span><br></pre></td></tr></table></figure></p><p>配置文件内容<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log"</span>: &#123;</span><br><span class="line">    <span class="attr">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span>,</span><br><span class="line">    <span class="attr">"loglevel"</span>: <span class="string">"none"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"transparent"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">12345</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"dokodemo-door"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"tcp,udp"</span>,</span><br><span class="line">        <span class="attr">"followRedirect"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"sockopt"</span>: &#123;</span><br><span class="line">          <span class="attr">"tproxy"</span>: <span class="string">"tproxy"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"direct"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"domainStrategy"</span>: <span class="string">"UseIPv4"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"streamSettings"</span>: &#123;</span><br><span class="line">        <span class="attr">"sockopt"</span>: &#123;</span><br><span class="line">          <span class="attr">"mark"</span>: <span class="number">255</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改后执行<code>sudo systemctl restart v2ray</code>重新加载配置文件</p><h4 id="设置透明代理规则并开机自动运行"><a href="#设置透明代理规则并开机自动运行" class="headerlink" title="设置透明代理规则并开机自动运行"></a>设置透明代理规则并开机自动运行</h4><p>新建脚本<code>ip.sh</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Destroy ipset if it already exists</span></span><br><span class="line">systemctl stop ipset</span><br><span class="line">ipset destroy china</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the ipset list</span></span><br><span class="line">ipset -N china <span class="built_in">hash</span>:net</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove any old list that might exist from previous runs of this script</span></span><br><span class="line">rm cn.zone</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pull the latest IP set for China</span></span><br><span class="line">wget -P . http://www.ipdeny.com/ipblocks/data/countries/cn.zone</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add each IP address from the downloaded list into the ipset 'china'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(cat ./cn.zone ); <span class="keyword">do</span> ipset -A china <span class="variable">$i</span>; <span class="keyword">done</span></span><br><span class="line">rm cn.zone</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/ipset &amp;&amp; ipset -file /etc/ipset/ipset.conf save</span><br><span class="line">cat &gt; /etc/systemd/system/ipset.service &lt;&lt; <span class="string">'END_TEXT'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=ipset persistent rule service</span><br><span class="line">Before=tproxyrule.service</span><br><span class="line">ConditionFileNotEmpty=/etc/ipset/ipset.conf</span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=<span class="literal">true</span></span><br><span class="line">ExecStart=/sbin/ipset -exist -file /etc/ipset/ipset.conf restore</span><br><span class="line">ExecStop=/sbin/ipset -file /etc/ipset/ipset.conf save</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">END_TEXT</span><br><span class="line">systemctl <span class="built_in">enable</span> ipset</span><br><span class="line"></span><br><span class="line">ip rule add fwmark 1 table 100</span><br><span class="line">ip route add <span class="built_in">local</span> 0.0.0.0/0 dev lo table 100</span><br><span class="line"></span><br><span class="line">iptables -F -t mangle</span><br><span class="line"><span class="comment"># 代理局域网设备</span></span><br><span class="line">iptables -t mangle -N V2RAY</span><br><span class="line">iptables -t mangle -A V2RAY -d 127.0.0.1/32 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 255.255.255.255/32 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -d 192.168.0.0/16 -p tcp -j RETURN <span class="comment"># 直连局域网，避免 V2Ray 无法启动时无法连网关的 SSH，如果你配置的是其他网段（如 10.x.x.x 等），则修改成自己的</span></span><br><span class="line">iptables -t mangle -A V2RAY -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN <span class="comment"># 直连局域网，53 端口除外（因为要使用 V2Ray 的</span></span><br><span class="line">iptables -t mangle -A V2RAY -p tcp -m <span class="built_in">set</span> --match-set china dst -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY -p udp --dport 53 -j DROP -m mark --mark 0xff <span class="comment"># 这里丢弃发送到本机被标记了的udp 53端口流量,如果不丢弃会形成死循环</span></span><br><span class="line">iptables -t mangle -A V2RAY -p udp -j TPROXY --on-port 12345 --tproxy-mark 1 <span class="comment"># 给 UDP 打标记 1，转发至 12345 端口</span></span><br><span class="line">iptables -t mangle -A V2RAY -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1 <span class="comment"># 给 TCP 打标记 1，转发至 12345 端口</span></span><br><span class="line">iptables -t mangle -A PREROUTING -j V2RAY <span class="comment"># 应用规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理网关本机</span></span><br><span class="line">iptables -t mangle -N V2RAY_MASK</span><br><span class="line">iptables -t mangle -A V2RAY_MASK -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MASK -d 255.255.255.255/32 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MASK -d 192.168.0.0/16 -p tcp -j RETURN <span class="comment"># 直连局域网</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -p tcp -m <span class="built_in">set</span> --match-set china dst -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MASK -p udp --dport 53 -j RETURN</span><br><span class="line">iptables -t mangle -A V2RAY_MASK -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN <span class="comment"># 直连局域网，53 端口除外（因为要使用 V2Ray 的 DNS）</span></span><br><span class="line"><span class="comment"># 这条命令使用的是RETURN,如果有发送到本机的udp 53端口流量经过这里发送出去后会重新进入上面的PREROUTING</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -j RETURN -m mark --mark 0xff    <span class="comment"># 直连 SO_MARK 为 0xff 的流量(0xff 是 16 进制数，数值上等同与上面V2Ray 配置的 255)，此规则目的是避免代理本机(网关)流量出现回环问题</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -p udp -j MARK --<span class="built_in">set</span>-mark 1   <span class="comment"># 给 UDP 打标记,重路由</span></span><br><span class="line">iptables -t mangle -A V2RAY_MASK -p tcp -j MARK --<span class="built_in">set</span>-mark 1   <span class="comment"># 给 TCP 打标记，重路由</span></span><br><span class="line">iptables -t mangle -A OUTPUT -j V2RAY_MASK <span class="comment"># 应用规则</span></span><br><span class="line">mkdir -p /etc/iptables &amp;&amp; iptables-save &gt; /etc/iptables/rules.v4</span><br><span class="line">cat &gt; /etc/systemd/system/tproxyrule.service &lt;&lt; <span class="string">'END_TEXT'</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Tproxy rule</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=oneshot</span><br><span class="line"><span class="comment">#注意分号前后要有空格</span></span><br><span class="line">ExecStart=/sbin/ip rule add fwmark 1 table 100 ; /sbin/ip route add <span class="built_in">local</span> 0.0.0.0/0 dev lo table 100 ; /sbin/iptables-restore /etc/iptables/rules.v4</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">END_TEXT</span><br><span class="line">systemctl <span class="built_in">enable</span> tproxyrule</span><br></pre></td></tr></table></figure></p><p>创建脚本后使用<code>sudo bash ip.sh</code>执行</p><h4 id="解决访问慢问题"><a href="#解决访问慢问题" class="headerlink" title="解决访问慢问题"></a>解决访问慢问题</h4><p>启动后一直报错<code>too many open files</code>,导致访问缓慢,特别是在域名解析时使用UDP协议<br><strong>解决方案</strong></p><ol><li>编辑<code>/etc/systemd/system/v2ray.service</code>文件,在<strong>[Service]</strong>下加入<code>LimitNPROC=500</code>和<code>LimitNOFILE=1000000</code>两行</li><li>执行<code>systemctl daemon-reload &amp;&amp; systemctl restart v2ray</code>生效</li></ol><h4 id="设置网关"><a href="#设置网关" class="headerlink" title="设置网关"></a>设置网关</h4><h5 id="在路由器上直接设置"><a href="#在路由器上直接设置" class="headerlink" title="在路由器上直接设置"></a>在路由器上直接设置</h5><p>在路由器的DHCP设置里修改默认网关为树莓派的ip即可</p><p>一些路由器不能设置默认网关所以各种设备需要单独设置</p><h5 id="设置MAC的默认网关"><a href="#设置MAC的默认网关" class="headerlink" title="设置MAC的默认网关"></a>设置MAC的默认网关</h5><p><strong>方法一</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo route delete default &amp;&amp; sudo route add default 192.168.x.x</span><br></pre></td></tr></table></figure></p><p>这种方法容易失效</p><p><strong>方法二</strong></p><ol><li>Network Preferences</li><li>Advanced</li><li>修改TCP/IP设置为Manually填写Router设置为树莓派ip</li><li>修改DNS设置为树莓派地址</li></ol><h5 id="设置手机等的默认网关"><a href="#设置手机等的默认网关" class="headerlink" title="设置手机等的默认网关"></a>设置手机等的默认网关</h5><ol><li>设置ip地址静态分配</li><li>其中可能有路由器,route或者网关,这三种名称都代表网关,修改为树莓派的地址</li><li>修改默认DNS服务器为树莓派地址</li></ol><h4 id="根据订阅地址自动更新节点"><a href="#根据订阅地址自动更新节点" class="headerlink" title="根据订阅地址自动更新节点"></a>根据订阅地址自动更新节点</h4><h5 id="创建python文件并设置权限"><a href="#创建python文件并设置权限" class="headerlink" title="创建python文件并设置权限"></a>创建python文件并设置权限</h5><p>首先执行以下命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install pysocks colorlog</span><br><span class="line">sudo touch /usr/bin/v2ray_auto_change</span><br><span class="line">sudo chmod 777 /usr/bin/v2ray_auto_change</span><br><span class="line">sudo chmod -R 777 /var/<span class="built_in">log</span>/</span><br></pre></td></tr></table></figure></p><p>写入文件<code>/usr/bin/v2ray_auto_change</code>以下内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> colorlog</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> handlers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SUBSCRIBE_URL = <span class="string">'https://xbssr.fun/rss/v809dCv/I6SgUz?net_type=VMESS'</span></span><br><span class="line">SUBSCRIBE_RETRY_MAX = <span class="number">3</span>      <span class="comment"># 加载订阅信息最大尝试次数</span></span><br><span class="line">TEST_CONNECT_URL = <span class="string">'https://www.google.com/'</span></span><br><span class="line">TEST_CONNECT_TIMES = <span class="number">10</span>      <span class="comment"># 检测上面url的次数</span></span><br><span class="line">V2RAY_PATH = <span class="string">'/usr/bin/v2ray/v2ray'</span></span><br><span class="line">V2RAY_CONIG_FILE = <span class="string">'/etc/v2ray/config.json'</span></span><br><span class="line">LOG_FILE = <span class="string">'/var/log/v2ray/v2ray_auto_change.log'</span></span><br><span class="line">MAX_SERVER = <span class="number">30</span>              <span class="comment"># 最多同时检测多少个服务器</span></span><br><span class="line">LOG_COLORS_CONFIG = &#123;</span><br><span class="line">    <span class="string">'DEBUG'</span>: <span class="string">'cyan'</span>,</span><br><span class="line">    <span class="string">'INFO'</span>: <span class="string">'green'</span>,</span><br><span class="line">    <span class="string">'WARNING'</span>: <span class="string">'yellow'</span>,</span><br><span class="line">    <span class="string">'ERROR'</span>: <span class="string">'red'</span>,</span><br><span class="line">    <span class="string">'CRITICAL'</span>: <span class="string">'red'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间设置</span></span><br><span class="line">TIME_INTERVAL = <span class="number">3</span>           <span class="comment"># 多少秒循环检测一次当前服务器状态</span></span><br><span class="line">SUBSCRIBE_CACHE_TIME = <span class="number">1800</span>  <span class="comment"># 订阅信息缓存多少秒,超时后访问订阅地址重新获取</span></span><br><span class="line">SUBSCRIBE_TIMEOUT = <span class="number">10</span>       <span class="comment"># 获取订阅内容超时时间</span></span><br><span class="line">TEST_CONNECT_TIMEOUT = <span class="number">3</span>     <span class="comment"># 连接测试地址的超时时间</span></span><br><span class="line">TEST_READ_TIMEOUT = <span class="number">5</span>        <span class="comment"># 等待测试地址返回数据的超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系数</span></span><br><span class="line">PERFECT_FACTOR = <span class="number">100</span></span><br><span class="line">LATENCY_FACTOR = <span class="number">100</span></span><br><span class="line">CHECK_LIMIT = <span class="number">2</span></span><br><span class="line">RESET_FACTOR_LIMIT = <span class="number">200</span>     <span class="comment"># 当前服务器系数达到该值寻找新的最优服务器</span></span><br><span class="line"></span><br><span class="line">TMP_CONFIG_FILE = <span class="string">'''</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "inbounds": [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "port": 1080,</span></span><br><span class="line"><span class="string">      "protocol": "socks",</span></span><br><span class="line"><span class="string">      "sniffing": &#123;</span></span><br><span class="line"><span class="string">        "enabled": true,</span></span><br><span class="line"><span class="string">        "destOverride": ["http", "tls"]</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      "settings": &#123;</span></span><br><span class="line"><span class="string">        "auth": "noauth"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "outbounds": [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "protocol": "vmess",</span></span><br><span class="line"><span class="string">      "settings": &#123;</span></span><br><span class="line"><span class="string">        "vnext": [</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">FINAL_CONFIG_FILE = <span class="string">'''</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "log": &#123;</span></span><br><span class="line"><span class="string">    "access": "/var/log/v2ray/access.log",</span></span><br><span class="line"><span class="string">    "error": "/var/log/v2ray/error.log",</span></span><br><span class="line"><span class="string">    "loglevel": "none"</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "inbounds": [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "tag":"transparent",</span></span><br><span class="line"><span class="string">      "port": 12345,</span></span><br><span class="line"><span class="string">      "protocol": "dokodemo-door",</span></span><br><span class="line"><span class="string">      "settings": &#123;</span></span><br><span class="line"><span class="string">        "network": "tcp,udp",</span></span><br><span class="line"><span class="string">        "followRedirect": true</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      "sniffing": &#123;</span></span><br><span class="line"><span class="string">        "enabled": true,</span></span><br><span class="line"><span class="string">        "destOverride": [</span></span><br><span class="line"><span class="string">          "http",</span></span><br><span class="line"><span class="string">          "tls"</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      "streamSettings": &#123;</span></span><br><span class="line"><span class="string">        "sockopt": &#123;</span></span><br><span class="line"><span class="string">          "tproxy": "tproxy"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "outbounds": [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "tag": "proxy",</span></span><br><span class="line"><span class="string">      "protocol": "vmess",</span></span><br><span class="line"><span class="string">      "settings": &#123;</span></span><br><span class="line"><span class="string">        "vnext": [</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      "streamSettings": &#123;</span></span><br><span class="line"><span class="string">        "sockopt": &#123;</span></span><br><span class="line"><span class="string">          "mark": 255</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "tag": "direct",</span></span><br><span class="line"><span class="string">      "protocol": "freedom",</span></span><br><span class="line"><span class="string">      "settings": &#123;</span></span><br><span class="line"><span class="string">        "domainStrategy": "UseIPv4"</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      "streamSettings": &#123;</span></span><br><span class="line"><span class="string">        "sockopt": &#123;</span></span><br><span class="line"><span class="string">          "mark": 255</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;      </span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "tag": "block",</span></span><br><span class="line"><span class="string">      "protocol": "blackhole",</span></span><br><span class="line"><span class="string">      "settings": &#123;</span></span><br><span class="line"><span class="string">        "response": &#123;</span></span><br><span class="line"><span class="string">          "type": "none"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "tag": "dns-out",</span></span><br><span class="line"><span class="string">      "protocol": "dns",</span></span><br><span class="line"><span class="string">      "streamSettings": &#123;</span></span><br><span class="line"><span class="string">        "sockopt": &#123;</span></span><br><span class="line"><span class="string">          "mark": 255</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;  </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "dns": &#123;</span></span><br><span class="line"><span class="string">    "servers": [</span></span><br><span class="line"><span class="string">      "8.8.8.8",</span></span><br><span class="line"><span class="string">      "1.1.1.1",</span></span><br><span class="line"><span class="string">      "114.114.114.114",</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "address": "223.5.5.5",</span></span><br><span class="line"><span class="string">        "port": 53,</span></span><br><span class="line"><span class="string">        "domains": [</span></span><br><span class="line"><span class="string">          "geosite:cn",</span></span><br><span class="line"><span class="string">          "ntp.org",</span></span><br><span class="line"><span class="string">          "xbssr.fun",</span></span><br><span class="line"><span class="string">          "domain:zhangyuxi.xyz"</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "routing": &#123;</span></span><br><span class="line"><span class="string">    "domainStrategy": "IPOnDemand",</span></span><br><span class="line"><span class="string">    "rules": [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "type": "field",</span></span><br><span class="line"><span class="string">        "inboundTag": [</span></span><br><span class="line"><span class="string">          "transparent"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "port": 53,</span></span><br><span class="line"><span class="string">        "network": "udp",</span></span><br><span class="line"><span class="string">        "outboundTag": "dns-out" </span></span><br><span class="line"><span class="string">      &#125;,    </span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "type": "field",</span></span><br><span class="line"><span class="string">        "inboundTag": [</span></span><br><span class="line"><span class="string">          "transparent"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "port": 123,</span></span><br><span class="line"><span class="string">        "network": "udp",</span></span><br><span class="line"><span class="string">        "outboundTag": "direct" </span></span><br><span class="line"><span class="string">      &#125;,    </span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "type": "field", </span></span><br><span class="line"><span class="string">        "ip": [ </span></span><br><span class="line"><span class="string">          "223.5.5.5",</span></span><br><span class="line"><span class="string">          "114.114.114.114"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "outboundTag": "direct"</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "type": "field",</span></span><br><span class="line"><span class="string">        "ip": [ </span></span><br><span class="line"><span class="string">          "8.8.8.8",</span></span><br><span class="line"><span class="string">          "1.1.1.1"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "outboundTag": "proxy"</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "type": "field", </span></span><br><span class="line"><span class="string">        "domain": [</span></span><br><span class="line"><span class="string">          "geosite:category-ads-all"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "outboundTag": "block"</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "type": "field",</span></span><br><span class="line"><span class="string">        "protocol":["bittorrent"], </span></span><br><span class="line"><span class="string">        "outboundTag": "direct"</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "type": "field", </span></span><br><span class="line"><span class="string">        "ip": [</span></span><br><span class="line"><span class="string">          "geoip:private",</span></span><br><span class="line"><span class="string">          "geoip:cn"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "outboundTag": "direct"</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "type": "field", </span></span><br><span class="line"><span class="string">        "domain": [</span></span><br><span class="line"><span class="string">          "geosite:cn",</span></span><br><span class="line"><span class="string">          "xbssr.fun"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "outboundTag": "direct"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">DEFAULT_SUBSCRIBE = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(level = logging.INFO)</span><br><span class="line">formatter = colorlog.ColoredFormatter(<span class="string">'%(log_color)s%(asctime)s [%(levelname)s] %(message)s'</span>)</span><br><span class="line"><span class="comment"># when设置为: 周(W),天(D),时(H),分(M),秒(S) MIDNIGHT代表0点就新建日志 代表多久分割一个文件</span></span><br><span class="line"><span class="comment"># backupCount: 代表备份的日志个数</span></span><br><span class="line">th = handlers.TimedRotatingFileHandler(filename=LOG_FILE, when=<span class="string">'MIDNIGHT'</span>, backupCount=<span class="number">3</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">sh = logging.StreamHandler()</span><br><span class="line">th.setFormatter(formatter)</span><br><span class="line">sh.setFormatter(formatter)</span><br><span class="line">logger.addHandler(th)</span><br><span class="line">logger.addHandler(sh)</span><br><span class="line"></span><br><span class="line">debug = logging.debug</span><br><span class="line">info = logging.info</span><br><span class="line">warning = logging.warning</span><br><span class="line">error = logging.error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_base64</span><span class="params">(data)</span>:</span></span><br><span class="line">    missing_padding = <span class="number">4</span>-len(data)%<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> missing_padding:</span><br><span class="line">        data += <span class="string">'='</span>*missing_padding</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_port</span><span class="params">()</span>:</span></span><br><span class="line">    pscmd = <span class="string">"netstat -ntl |grep -v Active| grep -v Proto|awk '&#123;print $4&#125;'|awk -F: '&#123;print $NF&#125;'"</span></span><br><span class="line">    procs = os.popen(pscmd).read()</span><br><span class="line">    procarr = procs.split(<span class="string">"\n"</span>)</span><br><span class="line">    tt= random.randint(<span class="number">15000</span>,<span class="number">20000</span>)</span><br><span class="line">    <span class="keyword">if</span> tt <span class="keyword">not</span> <span class="keyword">in</span> procarr:</span><br><span class="line">        <span class="keyword">return</span> tt</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        get_port()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_factor</span><span class="params">(perfect, latency)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> perfect*PERFECT_FACTOR + latency*LATENCY_FACTOR</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_latency</span><span class="params">(port)</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36'</span>&#125;</span><br><span class="line">    proxies = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> port != <span class="number">0</span>:</span><br><span class="line">      proxies[<span class="string">'http'</span>] = <span class="string">'socks5h://127.0.0.1:&#123;&#125;'</span>.format(port)</span><br><span class="line">      proxies[<span class="string">'https'</span>] = <span class="string">'socks5h://127.0.0.1:&#123;&#125;'</span>.format(port)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s.mount(TEST_CONNECT_URL, HTTPAdapter(max_retries=<span class="number">0</span>))</span><br><span class="line">        r = s.get(TEST_CONNECT_URL, proxies=proxies, headers=headers, verify=<span class="literal">True</span>, timeout=(TEST_CONNECT_TIMEOUT,TEST_READ_TIMEOUT), allow_redirects=<span class="literal">False</span>, cookies=&#123;<span class="string">''</span>:<span class="string">''</span>&#125;)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        connectivity = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        warning(<span class="string">'test connect error port:&#123;&#125;, message:&#123;&#125;'</span>.format(port, err))</span><br><span class="line">        connectivity = <span class="literal">False</span></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    </span><br><span class="line">    latency_time = end_time - start_time</span><br><span class="line">    <span class="keyword">return</span> latency_time, connectivity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总共测试TEST_CONNECT_TIMES次, perfect是连接失败的次数, latency是平均延迟</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_connect</span><span class="params">(port)</span>:</span></span><br><span class="line">    perfect = TEST_CONNECT_TIMES</span><br><span class="line">    sum_r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(TEST_CONNECT_TIMES):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        r, p = get_latency(port)</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            sum_r += r</span><br><span class="line">            perfect -= <span class="number">1</span></span><br><span class="line">            info(<span class="string">'test connect port:&#123;&#125;, latency_time:&#123;&#125;'</span>.format(port, r))</span><br><span class="line">    <span class="keyword">if</span> perfect != TEST_CONNECT_TIMES:</span><br><span class="line">        times = TEST_CONNECT_TIMES - int(perfect)</span><br><span class="line">        s = sum_r / times</span><br><span class="line">        latency = float(format(s, <span class="string">'0.2f'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        latency = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> perfect, latency</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从订阅地址读取信息,返回主机列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_subscribe</span><span class="params">()</span>:</span></span><br><span class="line">    info(<span class="string">'start getting subscription'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(SUBSCRIBE_RETRY_MAX):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(SUBSCRIBE_URL, timeout=SUBSCRIBE_TIMEOUT)</span><br><span class="line">            info(<span class="string">'get subscription successfully'</span>)</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            error(<span class="string">'get subscription failed, error message:&#123;&#125;'</span>.format(err))</span><br><span class="line">            <span class="keyword">if</span> i == SUBSCRIBE_RETRY_MAX<span class="number">-1</span>:</span><br><span class="line">                error(<span class="string">'reach the maximum number of subscription retries'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理从网络上获取的订阅信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_subscribe</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        base64_server_list = str(decode_base64(text), encoding=<span class="string">'utf8'</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">        server_list = []</span><br><span class="line">        <span class="keyword">for</span> server <span class="keyword">in</span> base64_server_list:</span><br><span class="line">            protocol, server_info = server.split(<span class="string">'://'</span>)</span><br><span class="line">            <span class="keyword">if</span> protocol == <span class="string">'vmess'</span>:</span><br><span class="line">                server_info = json.loads(str(decode_base64(server_info), encoding=<span class="string">'utf8'</span>))</span><br><span class="line">                <span class="keyword">if</span> server_info.get(<span class="string">'add'</span>) <span class="keyword">and</span> server_info.get(<span class="string">'port'</span>) <span class="keyword">and</span> server_info.get(<span class="string">'id'</span>) <span class="keyword">and</span> server_info.get(<span class="string">'aid'</span>) <span class="keyword">and</span> server_info.get(<span class="string">'ps'</span>):</span><br><span class="line">                    real_server_info = &#123;<span class="string">'ps'</span>:server_info[<span class="string">'ps'</span>],<span class="string">'address'</span>:server_info[<span class="string">'add'</span>],<span class="string">'port'</span>:server_info[<span class="string">'port'</span>],<span class="string">'users'</span>:[&#123;<span class="string">'id'</span>:server_info[<span class="string">'id'</span>], <span class="string">'alterId'</span>:int(server_info[<span class="string">'aid'</span>])&#125;]&#125;</span><br><span class="line">                    server_list.append(real_server_info)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        error(<span class="string">'parse subscription failure'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    info(<span class="string">'parse subscription successfully'</span>)</span><br><span class="line">    <span class="keyword">return</span> server_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入服务器信息,生成一个配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_config_file</span><span class="params">(server)</span>:</span></span><br><span class="line">    tmp_name = uuid.uuid4().hex+<span class="string">'.json'</span></span><br><span class="line">    port = get_port()</span><br><span class="line">    tmp_json = json.loads(TMP_CONFIG_FILE)</span><br><span class="line">    tmp_json[<span class="string">'outbounds'</span>][<span class="number">0</span>][<span class="string">'settings'</span>][<span class="string">'vnext'</span>].append(server)</span><br><span class="line">    tmp_json[<span class="string">'inbounds'</span>][<span class="number">0</span>][<span class="string">'port'</span>] = port</span><br><span class="line">    <span class="keyword">with</span> open(tmp_name, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(tmp_json, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>))</span><br><span class="line">    info(<span class="string">'generate config file, tmp_name:&#123;&#125;, address:&#123;&#125;, port:&#123;&#125;, server name:&#123;&#125;'</span>.format(tmp_name, server[<span class="string">'address'</span>], port, server[<span class="string">'ps'</span>]))</span><br><span class="line">    <span class="keyword">return</span> tmp_name, port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_v2ray</span><span class="params">(server)</span>:</span></span><br><span class="line">    tmp_name, port = generate_config_file(server)</span><br><span class="line">    info(<span class="string">'run v2ray, tmp_name:&#123;&#125;, port:&#123;&#125;'</span>.format(tmp_name, port))</span><br><span class="line">    cmd = [V2RAY_PATH, <span class="string">'-config'</span>, tmp_name]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = subprocess.Popen(cmd, shell=<span class="literal">False</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.DEVNULL)</span><br><span class="line">        time.sleep(<span class="number">0.8</span>)</span><br><span class="line">        perfect, latency = test_connect(port)</span><br><span class="line">        p.kill()</span><br><span class="line">        os.remove(tmp_name)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    info(<span class="string">'test connection finished, address:&#123;&#125;, port:&#123;&#125;, server name:&#123;&#125;, perfect:&#123;&#125;, latency:&#123;&#125;'</span>.format(server[<span class="string">'address'</span>], server[<span class="string">'port'</span>], server[<span class="string">'ps'</span>], perfect, latency))</span><br><span class="line">    <span class="keyword">return</span> server, perfect, latency</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_best_server</span><span class="params">(best_server)</span>:</span></span><br><span class="line">    final_json = json.loads(FINAL_CONFIG_FILE)</span><br><span class="line">    final_json[<span class="string">'outbounds'</span>][<span class="number">0</span>][<span class="string">'settings'</span>][<span class="string">'vnext'</span>].append(best_server)</span><br><span class="line">    <span class="keyword">with</span> open(V2RAY_CONIG_FILE, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(final_json, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart_v2ray</span><span class="params">()</span>:</span></span><br><span class="line">    subprocess.Popen([<span class="string">'sudo'</span>, <span class="string">'systemctl'</span>, <span class="string">'restart'</span>, <span class="string">'v2ray'</span>], shell=<span class="literal">False</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.DEVNULL)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_v2ray</span><span class="params">(server_list)</span>:</span></span><br><span class="line">    proc = multiprocessing.Pool(MAX_SERVER)</span><br><span class="line">    proc_result = []</span><br><span class="line">    <span class="keyword">for</span> server <span class="keyword">in</span> server_list:</span><br><span class="line">        r = proc.apply_async(run_v2ray, args=(server,))</span><br><span class="line">        proc_result.append(r)</span><br><span class="line">    proc.close()</span><br><span class="line">    proc.join()</span><br><span class="line"></span><br><span class="line">    server_factor_list = []</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> proc_result:</span><br><span class="line">        server, perfect, latency = r.get()</span><br><span class="line">        factor = compute_factor(perfect, latency)</span><br><span class="line">        server_factor_list.append([server, factor])</span><br><span class="line">    server_factor_sorted_list = sorted(server_factor_list, key=<span class="keyword">lambda</span> s:s[<span class="number">1</span>])</span><br><span class="line">    server_sorted_list = list(map(<span class="keyword">lambda</span> s:s[<span class="number">0</span>], server_factor_sorted_list))</span><br><span class="line">    best_server = server_sorted_list[<span class="number">0</span>]</span><br><span class="line">    info(<span class="string">'find best server, best factor:&#123;&#125;, best_server:&#123;&#125;'</span>.format(server_factor_sorted_list[<span class="number">0</span>][<span class="number">1</span>], best_server))</span><br><span class="line">    write_best_server(best_server)</span><br><span class="line">    restart_v2ray()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    server_list = []</span><br><span class="line">    last_get_subscribe = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        info(<span class="string">'start testing current connection'</span>)</span><br><span class="line">        latency_time, connectivity = get_latency(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> connectivity <span class="keyword">and</span> latency_time &lt; CHECK_LIMIT:</span><br><span class="line">            info(<span class="string">'connectivity is true, latency_time:&#123;&#125;, wait TIME_INTERVAL(&#123;&#125;) seconds'</span>.format(latency_time, TIME_INTERVAL))</span><br><span class="line">            time.sleep(TIME_INTERVAL)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        warning(<span class="string">'connectivity is false, start testing current server'</span>)</span><br><span class="line">        perfect, latency = test_connect(<span class="number">0</span>)</span><br><span class="line">        factor = compute_factor(perfect, latency)</span><br><span class="line">        info(<span class="string">'factor: &#123;&#125;'</span>.format(factor))</span><br><span class="line">        <span class="keyword">if</span> factor &gt; RESET_FACTOR_LIMIT:</span><br><span class="line">            warning(<span class="string">'factor is bigger than RESET_FACTOR_LIMIT(&#123;&#125;), start finding a best server and reseting v2ray'</span>.format(RESET_FACTOR_LIMIT))</span><br><span class="line">            <span class="keyword">if</span> time.time() - last_get_subscribe &gt; SUBSCRIBE_CACHE_TIME:</span><br><span class="line">                server_info = get_subscribe()</span><br><span class="line">                <span class="keyword">if</span> server_info:</span><br><span class="line">                    last_get_subscribe = time.time()</span><br><span class="line">                <span class="keyword">elif</span> last_get_subscribe == <span class="number">0</span>:</span><br><span class="line">                    server_info = DEFAULT_SUBSCRIBE</span><br><span class="line">                    warning(<span class="string">'get subscription failed, try to use default subprocess'</span>)</span><br><span class="line">                <span class="keyword">if</span> server_info:</span><br><span class="line">                    tmp_server_list = parse_subscribe(server_info)</span><br><span class="line">                    <span class="keyword">if</span> tmp_server_list:</span><br><span class="line">                        server_list = tmp_server_list</span><br><span class="line">            <span class="keyword">if</span> len(server_list) != <span class="number">0</span>:</span><br><span class="line">                reset_v2ray(server_list)</span><br><span class="line">                info(<span class="string">'set new best server successfully, start waiting for new round, wait TIME_INTERVAL(&#123;&#125;) seconds'</span>.format(TIME_INTERVAL))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                error(<span class="string">'no server available, start waiting for new round, wait TIME_INTERVAL(&#123;&#125;) seconds'</span>.format(TIME_INTERVAL))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            info(<span class="string">'factor is less than or equal to RESET_FACTOR_LIMIT(&#123;&#125;), wait TIME_INTERVAL(&#123;&#125;) seconds'</span>.format(RESET_FACTOR_LIMIT, TIME_INTERVAL))</span><br><span class="line">        time.sleep(TIME_INTERVAL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><h5 id="使用systemd配置开机启动"><a href="#使用systemd配置开机启动" class="headerlink" title="使用systemd配置开机启动"></a>使用systemd配置开机启动</h5><ol><li>创建<code>/lib/systemd/system/v2ray_auto_change.service</code>文件<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/v2ray_auto_change.service</span><br></pre></td></tr></table></figure></li></ol><p>写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=V2ray Auto Change Service</span><br><span class="line">After=multi-user.target</span><br><span class="line">Conflicts=getty@tty1.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/python3 /usr/bin/v2ray_auto_change</span><br><span class="line">StandardInput=tty-force</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>重新加载<code>systemctl daemon</code>,<code>.service</code>文件每次修改后都要重新加载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>启动v2ray_auto_change</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> v2ray_auto_change.service</span><br><span class="line">sudo systemctl start v2ray_auto_change.service</span><br></pre></td></tr></table></figure></li></ol><h2 id="一键配置系统脚本"><a href="#一键配置系统脚本" class="headerlink" title="一键配置系统脚本"></a>一键配置系统脚本</h2><p>首先在本地克隆自动配置项目<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:Evolution404/pi_autoconfig.git</span><br></pre></td></tr></table></figure></p><p>将整个项目文件夹复制到树莓派里<br>执行项目里的config.sh开始一键配置,后面需要传入pi用户的新密码和smb服务器的密码<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> pi_autoconfig</span><br><span class="line">sudo bash config.sh pi_pw smb_pw</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> RaspberryPi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>makefile编写规则</title>
      <link href="2019/11/17/Linux/makefile%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"/>
      <url>2019/11/17/Linux/makefile%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── a.c</span><br><span class="line">├── b.c</span><br><span class="line">├── b.h</span><br><span class="line">└── makefile</span><br><span class="line"></span><br><span class="line">0 directories, 4 files</span><br></pre></td></tr></table></figure><p>有a.c b.c 和 b.h文件 生成可执行文件a</p><h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a: a.o b.o</span><br><span class="line">gcc -o a a.o b.o</span><br><span class="line">a.o: a.c b.h</span><br><span class="line">gcc -c a.c</span><br><span class="line">b.o: b.c</span><br><span class="line">gcc -c b.c</span><br><span class="line">clean:</span><br><span class="line">rm a a.o b.o</span><br></pre></td></tr></table></figure><h3 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">objs=a.o b.o</span><br><span class="line">a: a.o b.o</span><br><span class="line">gcc -o a $(objs)</span><br><span class="line">a.o: a.c b.h</span><br><span class="line">gcc -c a.c</span><br><span class="line">b.o: b.c</span><br><span class="line">gcc -c b.c</span><br><span class="line">clean:</span><br><span class="line">rm a $(objs)</span><br></pre></td></tr></table></figure><p>使用了变量</p><h3 id="第三版"><a href="#第三版" class="headerlink" title="第三版"></a>第三版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">objs=a.o b.o</span><br><span class="line">a: a.o b.o</span><br><span class="line">gcc -o a $(objs)</span><br><span class="line">a.o: b.h</span><br><span class="line">clean:</span><br><span class="line">rm a $(objs)</span><br></pre></td></tr></table></figure><p>使用了自动推导, 例如a.o的依赖会自动推导出a.c</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux后台执行</title>
      <link href="2019/10/26/Linux/linux%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C/"/>
      <url>2019/10/26/Linux/linux%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="后台执行命令"><a href="#后台执行命令" class="headerlink" title="后台执行命令"></a>后台执行命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup your commond &gt;/dev/null 2&gt;&amp;1 &lt;/dev/null &amp;</span><br></pre></td></tr></table></figure><ul><li>使用nohup和&amp;进入后台执行</li><li>丢弃标准输出和错误输出</li><li>丢弃标准输入 防止执行后还留有输入框</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git查看暂存区和版本库文件内容</title>
      <link href="2019/10/15/git/git%E6%9F%A5%E7%9C%8B%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E7%89%88%E6%9C%AC%E5%BA%93%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"/>
      <url>2019/10/15/git/git%E6%9F%A5%E7%9C%8B%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E7%89%88%E6%9C%AC%E5%BA%93%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="git-cat-file"><a href="#git-cat-file" class="headerlink" title="git cat-file"></a>git cat-file</h2><h3 id="查看暂存区文件"><a href="#查看暂存区文件" class="headerlink" title="查看暂存区文件"></a>查看暂存区文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -p :filename</span><br><span class="line">git show :filename</span><br></pre></td></tr></table></figure><p>filename就是要查看的文件名</p><h3 id="查看版本库文件"><a href="#查看版本库文件" class="headerlink" title="查看版本库文件"></a>查看版本库文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -p head:filename</span><br><span class="line">git show head:filename</span><br></pre></td></tr></table></figure><p>head指定要查看的版本库 filename指定要查看的版本库的文件名</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ncurses使用尝试</title>
      <link href="2019/09/04/Linux/ncurses%E4%BD%BF%E7%94%A8%E5%B0%9D%E8%AF%95/"/>
      <url>2019/09/04/Linux/ncurses%E4%BD%BF%E7%94%A8%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="谢尔宾斯基三角形示例"><a href="#谢尔宾斯基三角形示例" class="headerlink" title="谢尔宾斯基三角形示例"></a>谢尔宾斯基三角形示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* triangle.c */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;curses.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ITERMAX 10000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> iter;</span><br><span class="line">  <span class="keyword">int</span> yi, xi;</span><br><span class="line">  <span class="keyword">int</span> y[<span class="number">3</span>], x[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">int</span> index;</span><br><span class="line">  <span class="keyword">int</span> maxlines, maxcols;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* initialize curses */</span></span><br><span class="line"></span><br><span class="line">  initscr();</span><br><span class="line">  cbreak();</span><br><span class="line">  noecho();</span><br><span class="line"></span><br><span class="line">  clear();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* initialize triangle */</span></span><br><span class="line"></span><br><span class="line">  maxlines = LINES - <span class="number">1</span>;</span><br><span class="line">  maxcols = COLS - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  y[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  y[<span class="number">1</span>] = maxlines;</span><br><span class="line">  x[<span class="number">1</span>] = maxcols / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  y[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  x[<span class="number">2</span>] = maxcols;</span><br><span class="line"></span><br><span class="line">  mvaddch(y[<span class="number">0</span>], x[<span class="number">0</span>], <span class="string">'0'</span>);</span><br><span class="line">  mvaddch(y[<span class="number">1</span>], x[<span class="number">1</span>], <span class="string">'1'</span>);</span><br><span class="line">  mvaddch(y[<span class="number">2</span>], x[<span class="number">2</span>], <span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* initialize yi,xi with random values */</span></span><br><span class="line"></span><br><span class="line">  yi = random() % maxlines;</span><br><span class="line">  xi = random() % maxcols;</span><br><span class="line"></span><br><span class="line">  mvaddch(yi, xi, <span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* iterate the triangle */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (iter = <span class="number">0</span>; iter &lt; ITERMAX; iter++) &#123;</span><br><span class="line">    index = random() % <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    yi = (yi + y[index]) / <span class="number">2</span>;</span><br><span class="line">    xi = (xi + x[index]) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    mvaddch(yi, xi, <span class="string">'*'</span>);</span><br><span class="line">    refresh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* done */</span></span><br><span class="line"></span><br><span class="line">  mvaddstr(maxlines, <span class="number">0</span>, <span class="string">"Press any key to quit"</span>);</span><br><span class="line"></span><br><span class="line">  refresh();</span><br><span class="line"></span><br><span class="line">  getch();</span><br><span class="line">  endwin();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o triangle triangle.c -lncurses  <span class="comment"># 注意要引入动态库</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql安装并配置远程连接</title>
      <link href="2019/09/02/database/mysql%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>2019/09/02/database/mysql%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>使用apt安装mysql</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></p><h2 id="解决初次登录问题"><a href="#解决初次登录问题" class="headerlink" title="解决初次登录问题"></a>解决初次登录问题</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 root 权限执行 mysql 命令登录 mysql 控制台</span></span><br><span class="line">sudo mysql</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host, <span class="keyword">plugin</span>, authentication_string <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">plugin</span>=<span class="string">"mysql_native_password"</span>, authentication_string=<span class="keyword">PASSWORD</span>(<span class="string">"123456"</span>) <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p>此时便可以在普通 Linux 账户下,并使用 mysql的root账户及新设密码“123456”,来登录mysql服务.</p><h2 id="设置远程访问"><a href="#设置远程访问" class="headerlink" title="设置远程访问"></a>设置远程访问</h2><p><strong>允许用户远程登录</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">UPDATE</span> mysql.user <span class="keyword">SET</span> host=<span class="string">"%"</span> <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><p><strong>修改配置文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mysql</span><br><span class="line">find . -name <span class="string">"*.cnf"</span> | xargs grep <span class="string">"address"</span></span><br></pre></td></tr></table></figure></p><p>找到bind-address字段修改为<code>0.0.0.0</code></p><p><strong>最后重启mysql</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译动态库</title>
      <link href="2019/08/31/c/%E7%BC%96%E8%AF%91%E5%8A%A8%E6%80%81%E5%BA%93/"/>
      <url>2019/08/31/c/%E7%BC%96%E8%AF%91%E5%8A%A8%E6%80%81%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC -o lib.so lib.c <span class="comment"># 生成lib.so</span></span><br><span class="line">gcc -o a a.c ./lib.so <span class="comment"># 也可以使用-L增加搜索路径</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>换源系列</title>
      <link href="2019/08/31/Linux/%E6%8D%A2%E6%BA%90%E7%B3%BB%E5%88%97/"/>
      <url>2019/08/31/Linux/%E6%8D%A2%E6%BA%90%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="apt换源"><a href="#apt换源" class="headerlink" title="apt换源"></a>apt换源</h2><h3 id="树莓派apt换源"><a href="#树莓派apt换源" class="headerlink" title="树莓派apt换源"></a>树莓派apt换源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>将源换成阿里云,编辑文件内容为</p><p><code>deb http://mirrors.aliyun.com/raspbian/raspbian/ stretch main contrib non-free rpi</code></p><p>继续编辑文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure></p><p>修改为中科大源<br><code>deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ stretch main ui</code></p><p>修改文件后执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p><h2 id="brew换源"><a href="#brew换源" class="headerlink" title="brew换源"></a>brew换源</h2><h2 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="2019/07/15/review/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>2019/07/15/review/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="CPU调度"><a href="#CPU调度" class="headerlink" title="CPU调度"></a>CPU调度</h2><ol><li>先到先服务</li><li>最短作业优先调度</li><li>优先级调度</li><li>轮转法调度</li><li>多级队列调度</li><li>多级反馈队列调度</li></ol>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="2019/07/14/review/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>2019/07/14/review/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>冯诺依曼计算机的组成: 运算器(ALU),存储器(CU),控制器,输入输出设备</p><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><p>总线的特点：连线少、易于集成化、可替换性好、分时传送<br>总线判优: 链式查询、计数器查询、独立请求</p><h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><h3 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h3><p>译码方式: 线选法,重合法</p><h4 id="随机存储器"><a href="#随机存储器" class="headerlink" title="随机存储器"></a>随机存储器</h4><p><strong>SRAM</strong><br>速度快, 用于cache<br><strong>DRAM</strong><br>用于内存<br>需要刷新 集中刷新,分散刷新,异步刷新</p><p><strong>提高访存速度</strong><br>单体多字<br>多体并行<br>高位交叉编址 低位交叉编址</p>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>离散数学</title>
      <link href="2019/07/08/review/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
      <url>2019/07/08/review/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h2><h3 id="幂集"><a href="#幂集" class="headerlink" title="幂集"></a>幂集</h3><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190710161728.png" alt></p><h3 id="对称差"><a href="#对称差" class="headerlink" title="对称差"></a>对称差</h3><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708191156.png" alt></p><h3 id="德摩根律"><a href="#德摩根律" class="headerlink" title="德摩根律"></a>德摩根律</h3><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708191220.png" alt></p><h3 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h3><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708191301.png" alt><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708191315.png" alt><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708191329.png" alt><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708191349.png" alt></p><hr><h3 id="映射与函数"><a href="#映射与函数" class="headerlink" title="映射与函数"></a>映射与函数</h3><p><strong>映射的定义</strong><br>每个x都要找到唯一的y对应</p><p><strong>单射</strong><br>简单来说就是不同的x必定对应不同的y<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708193420.png" alt><br><strong>满射</strong><br>任意的y都能找到映射到它的x<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708193526.png" alt><br><strong>双射或一一对应</strong><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708193619.png" alt><br><strong>恒等映射</strong><br>恒等映射记做Ix<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708193748.png" alt></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190708194119.png" alt></p><h3 id="抽屉原理"><a href="#抽屉原理" class="headerlink" title="抽屉原理"></a>抽屉原理</h3><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190710135250.png" alt><br>当五个数的余数存在0,1,2时, 那么这三个数的和就是3的倍数<br>如果只存在0,1或0,2或1,2时, 根据抽屉原理必然有一个余数出现了3次 那么这三个数的和是三的倍数<br>推广形式:设k和n都是任意的正整数，若至少有kn+1只鸽子分配在n个鸽巢里，则至少存在一个鸽巢中有不少于k+1只鸽子<br>(即两个抽屉放入5个物体, 得出k=2)</p><h3 id="映射合成性质"><a href="#映射合成性质" class="headerlink" title="映射合成性质"></a>映射合成性质</h3><p>设f:X→Y,g:Y→Z,则</p><ol><li>如果f与g都是单射的，则gf也是单射的。</li><li>如果f与g都是满射的，则gf也是满射的。</li><li>如果f与g都是双射的，则gf也是双射的。</li></ol><p>设f:X→Y,g:Y→Z,则</p><ol><li>如果gf是单射，则f是单射。</li><li>如果gf是满射，则g是满射。</li><li>如果gf是双射，则f是单射且g是满射。</li></ol><h3 id="逆映射"><a href="#逆映射" class="headerlink" title="逆映射"></a>逆映射</h3><p>设f:X→Y,如果存在一个映射g:Y→X,使得:fg=IY且gf=IX, 则称映射f是可逆的，而g称为f的逆映射</p><p><strong>左逆映射</strong><br>设f:X→Y,如果存在一个映射g:Y→X,使得:gf=IX,则称映射f是左可逆的，g称为f的左逆映射<br>即f左边加上一个映射能够变成恒等映射说明f是左可逆<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190710142903.png" alt></p><p><strong>右逆映射</strong><br>设f:X→Y,如果存在一个映射h:Y→X, 使得:fh=IY,则称映射f是右可逆的，h称为f的右逆映射<br>即f右边加上一个映射能够变成恒等映射说明f是右可逆<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190710142806.png" alt></p><p><strong>性质</strong><br>f可逆的充要条件是f是双射<br>f可逆, 那么f的逆映射是唯一的<br>f左可逆的充分必要条件是f为单射 f左可逆 -&gt; 存在gf是双射 -&gt; f是单射<br>f右可逆的充分必要条件是f为满射 f右可逆 -&gt; 存在fg是双射 -&gt; f是满射</p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190710143222.png" alt></p><h3 id="特征函数"><a href="#特征函数" class="headerlink" title="特征函数"></a>特征函数</h3><p><strong>定义</strong><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190710161829.png" alt><br>令X={a,b,c,d}, E={a,b}那么E的特征函数就是<br>f(a)=1 f(b)=1 f(c)=0 f(d)=0</p><p><strong>Ch(X)</strong><br>Ch(X)是X中所有子集构成的特征函数的集合<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190710162026.png" alt></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190710162603.png" alt><br>可以分析出f是满射,g是单射<br>g如果为x-1那么x是1的时候映射为0不满足映射的定义 特别指定x为1映射到1</p><hr><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p><strong>定义</strong></p><ul><li>设A,B是两个集合,一个从AxB到{是,否}的映射R,称为从A到B的一个二元关系,或A与B间的一个二元关系</li><li>设A到B是两个集合。AxB的任一子集R称为从A到B的一个二元关系</li><li><strong>映射是特殊的二元关系</strong></li></ul><h3 id="关系的概念"><a href="#关系的概念" class="headerlink" title="关系的概念"></a>关系的概念</h3><p><strong>全关系</strong><br>AxB也是AxB的一个子集，按定义AxB也是从A到B的一个二元关系。我们把AxB叫做A到B的全关系<br>例如：A={a, b}，B={1，2}<br>AxB={（a, 1）,(a, 2),(b, 1),(b, 2)} 是A到B的全关系</p><p><strong>空关系</strong><br>空集叫做A到B的空关系</p><p><strong>恒等关系</strong><br>集合{(a,a)a∈A}称为A上的恒等关系或相等关系，并记为IA<br>例如：A={a, b} {（a, a）,(b, b)} 是A到A的恒等关系<br>类似于恒等映射</p><p><strong>A到B的关系的个数</strong><br>设|AxB|=m,那么A到B上就有2^m个关系<br>关系就是AxB的子集, 个数也就是子集的个数</p><h3 id="关系的性质"><a href="#关系的性质" class="headerlink" title="关系的性质"></a>关系的性质</h3><h4 id="自反关系"><a href="#自反关系" class="headerlink" title="自反关系"></a>自反关系</h4><p>X上的二元关系R称为自反的，如果所有的x∈X,xRx<br>直接说就是这个关系包含恒等关系的所有元素</p><h4 id="反自反关系"><a href="#反自反关系" class="headerlink" title="反自反关系"></a>反自反关系</h4><p>X上的二元关系R称为反自反的,如果所有的x∈X,都有(x,x)∉R<br>直接说就是这个关系不存在恒等关系的任意元素</p><blockquote><p>设A={a, b, c, d}，R是A到A的一个二元关系：<br>  R={(a,b),(c,d),(b,c),(a,a)}<br>  既不是反自反的，也不是自反的</p></blockquote><p><strong>对一个集合X其上的自反关系和反自反关系是一样多的</strong></p><h4 id="对称关系"><a href="#对称关系" class="headerlink" title="对称关系"></a>对称关系</h4><p>设R为X上的二元关系。如果:所有的x,y∈X,只要xRy就有yRx，则称R是对称的</p><blockquote><p>模n同余就是一个对称关系</p></blockquote><h4 id="反对称关系"><a href="#反对称关系" class="headerlink" title="反对称关系"></a>反对称关系</h4><p>设R为X上的二元关系。对X的任意元素x,y,如果：xRy且yRx，则x=y,那么就称R为反对称的</p><h4 id="传递关系"><a href="#传递关系" class="headerlink" title="传递关系"></a>传递关系</h4><p>设R为X上的二元关系。如果对X上的任意x,y,z,只要xRy且yRz,就有xRz，则称R为传递关系</p><h4 id="相容关系"><a href="#相容关系" class="headerlink" title="相容关系"></a>相容关系</h4><p>集合X上的二元关系R称为是相容关系，如果R是自反的且又是对称的</p><h4 id="关系的闭包"><a href="#关系的闭包" class="headerlink" title="关系的闭包"></a>关系的闭包</h4><ul><li>关系的闭包的思想是想通过增加一些元素,使原来的关系符合某种性质.但增加的元素要最少</li><li>自反,对称,传递,相容关系存在闭包</li><li>传递闭包R+, 自反传递闭包R<em> R</em>= R0 ∪ R+</li></ul><h4 id="关系矩阵"><a href="#关系矩阵" class="headerlink" title="关系矩阵"></a>关系矩阵</h4><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712113002.png" alt></p><ul><li>自反关系   =&gt; 对角线的元素都为1</li><li>反自反关系 =&gt; 对角线的元素都为0</li><li>对称关系   =&gt; 是对称矩阵</li><li>反对称关系 =&gt; 不是对称矩阵</li><li>关系的逆   =&gt; 矩阵的转置</li></ul><h4 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h4><p>自反,对称,传递关系 例如:模n同余关系</p><h4 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h4><p>自反,反对称,传递关系 例如:集合X的幂集上的包含于关系<br><strong>全序关系</strong><br>关系本身就是一个二元关系的集合。偏序只需在这个集合范围类满足自反性、反对称性、传递性；而全序关系则不然，需要在整个集合范围内满足这三个性质</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol><li>X上自反二元关系的个数;     2^(n²-n)</li><li>X上反自反二元关系的个数;   2^(n²-n)</li><li>X上对称二元关系的个数;     2^(0.5n²+0.5n)</li><li>X上自反或对称关系的个数;   2^(n²-n)+2^(0.5n²+0.5n)-2^(0.5n²-0.5n)</li></ol><h4 id="可数集"><a href="#可数集" class="headerlink" title="可数集"></a>可数集</h4><p><strong>可数和不可数是针对无限集合来说的</strong></p><ul><li>如果与自然数集合存在一一对应那么就成为可数集</li><li>如果集合不是可数集和有限集那么就是不可数集</li><li>可数个可数集之并是可数集</li><li>全体有理数之集Q是可数集</li><li>整系数代数多项式的全体是一个可数集</li><li>代数数的全体是可数集 整系数代数多项式的根称为代数数,非代数数称为超越数</li></ul><h4 id="连续统集"><a href="#连续统集" class="headerlink" title="连续统集"></a>连续统集</h4><p>凡与集合[0,1]对等的集合称为具有“连续统的势”的集合, 或简称连续统<br>实数是连续统 =&gt; 无理数是连续统 =&gt; 超越数是连续统<br>连续统个连续统的并集还是连续统</p><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><ul><li>E是点集,V是边集</li></ul><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><ul><li>无向图: V是E上的反自反对称关系</li><li>(p,q)图: p个顶点,q条边</li><li>带环图: 联结一个顶点与其自身的边称为环，允许有环存在的图称为带环图</li><li>多重边图: 如果允许两个顶点之间有两个以上的边存在，这样的边称为多重边，允许有环与多重边存在的图，我们称为伪图</li><li>零图: 只有顶点没有边,n个顶点的零图称为n阶零图</li><li>完全图: 任意两个顶点间都有唯一的边,n个顶点的完全图用Kn表示,Kn有n(n-1)/2条边</li></ul><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><ul><li>弧,对称弧</li><li>弧的起点和终点</li><li>定向图: 不含对称弧的有向图称为定向图<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712153620.png" alt></li></ul><h4 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h4><p>点可以是子集, 边也可以是子集<br>K3的子图个数: 一个顶点的有3个，两个顶点的有6个，3个定点的有8个，17个子图</p><h4 id="生成子图"><a href="#生成子图" class="headerlink" title="生成子图"></a>生成子图</h4><p>设G=(V,E)是一个图, 如果F∈E,则称G的子图H=(V, F)为G的生成子图<br>简单说就是点不能少<br>K3的生成子图个数: 8个</p><h4 id="极大子图"><a href="#极大子图" class="headerlink" title="极大子图"></a>极大子图</h4><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712154052.png" alt></p><h4 id="导出子图"><a href="#导出子图" class="headerlink" title="导出子图"></a>导出子图</h4><p>指定一个点集,包含这个点集的极大子图就是导出子图<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712154159.png" alt></p><h4 id="顶点的度"><a href="#顶点的度" class="headerlink" title="顶点的度"></a>顶点的度</h4><ul><li>各顶点度的和是边数的2倍</li><li>任一图中,度为奇数的顶点的数目必为偶数</li></ul><h4 id="n次图"><a href="#n次图" class="headerlink" title="n次图"></a>n次图</h4><p>所有顶点的度都是n,叫做n次图</p><h4 id="通道与闭通道"><a href="#通道与闭通道" class="headerlink" title="通道与闭通道"></a>通道与闭通道</h4><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712163752.png" alt></p><h4 id="迹与闭迹"><a href="#迹与闭迹" class="headerlink" title="迹与闭迹"></a>迹与闭迹</h4><p>如果图中一条通道上的各<strong>边</strong>互不相同,则称此通道为图的迹，如果一条闭通道上的各边互不相同，则此闭通道称为闭迹</p><p>迹:简单通路<br>闭迹:简单回路<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712164442.png" alt></p><h4 id="路与圈"><a href="#路与圈" class="headerlink" title="路与圈"></a>路与圈</h4><p>如果图中一条通道上的各<strong>顶点</strong>互不相同,则称此通道为路,如果闭通道上各顶点互不相同,则称此闭通道为圈,或回路<br>路:初级通路<br>圈:初级回路<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712164507.png" alt></p><h4 id="连通图与极大连通子图"><a href="#连通图与极大连通子图" class="headerlink" title="连通图与极大连通子图"></a>连通图与极大连通子图</h4><p>连通图: 任意两点都有一条路连接<br>极大联通子图: 支</p><h4 id="偶图"><a href="#偶图" class="headerlink" title="偶图"></a>偶图</h4><p>能够将点分割成两个集合, 所有的边都是两个端点在不同的集合</p><p><strong>完全偶图</strong><br>分割成两个集合, 这两个集合任意两个点都存在边<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712165401.png" alt></p><p><strong>两点间的距离</strong><br>两点间最短路的长</p><p>偶图的充要条件所有圈都是偶数长</p><h4 id="欧拉图"><a href="#欧拉图" class="headerlink" title="欧拉图"></a>欧拉图</h4><p>包含图的所有顶点和所有边的闭迹称为欧拉闭迹,存在一条欧拉闭迹的图称为欧拉图<br>欧拉图等价于是连通图且每个顶点的度是偶数<br><strong>能够一笔画的图存在欧拉迹</strong><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712171945.png" alt></p><h4 id="哈密顿图"><a href="#哈密顿图" class="headerlink" title="哈密顿图"></a>哈密顿图</h4><p>哈密顿路: 一条包含所有顶点的路<br>哈密顿圈: 一条包含所有顶点的圈<br>哈密顿图: 有哈密顿圈的图<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712172339.png" alt><br>哈密顿图=&gt;连通图且顶点度数不能小于2<br>哈密顿路=&gt;是连通图且1度顶点不能多于2个</p><p>p(p≥3)个顶点的图,如果最小度≥p/2那么就是哈密顿图</p><h3 id="树和割集"><a href="#树和割集" class="headerlink" title="树和割集"></a>树和割集</h3><h4 id="树和森林的定义"><a href="#树和森林的定义" class="headerlink" title="树和森林的定义"></a>树和森林的定义</h4><p>树: 连通且无圈的无向图称为无向树,简称树<br>森林: 一个没有圈的不连通的无向图称为无向森林,简称森林<br>平凡树: 仅有一个顶点的树<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712174713.png" alt></p><p><strong>极小连通图</strong><br>去掉任何一条边都不是连通图<br>图是树当且仅当该图是极小连通图</p><h4 id="偏心率-半径-中心"><a href="#偏心率-半径-中心" class="headerlink" title="偏心率,半径,中心"></a>偏心率,半径,中心</h4><p>偏心率:一个顶点到其他顶点的最远距离  e(v)<br>半径:偏心率的最小值                  r(G)<br>中心:偏心率是半径的点集合          C(G)<br>对于树来说</p><ul><li>每棵树的中心或含有一个顶点,或含有两个邻接的顶点</li><li>离中心最远的点都是一度顶点</li><li>去掉一度顶点不会引起中心点的变化</li></ul><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190712180058.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>awk学习</title>
      <link href="2019/06/18/shell/awk%E5%AD%A6%E4%B9%A0/"/>
      <url>2019/06/18/shell/awk%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="awk简介"><a href="#awk简介" class="headerlink" title="awk简介"></a>awk简介</h2><p>awk是一种编程语言<br>sed主要用于修改文件, awk可以进行文件切割和统计<br>我们主要使用<code>gawk</code>, GNU版本的<code>awk</code></p><h2 id="参数形式"><a href="#参数形式" class="headerlink" title="参数形式"></a>参数形式</h2><h3 id="F指定分割符"><a href="#F指定分割符" class="headerlink" title="-F指定分割符"></a>-F指定分割符</h3><p>指定冒号为分割符<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span> a</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618110320.png" alt></p><h3 id="BEGIN和END"><a href="#BEGIN和END" class="headerlink" title="BEGIN和END"></a>BEGIN和END</h3><p><code>c-x c-e</code>可以快速启动vim来进行命令编辑<br>BEGIN{}   {}      END{}<br>行处理前  行处理  行处理后</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;print 1/2&#125; &#123;print $1&#125; END&#123;print "-------"&#125;'</span> a</span><br></pre></td></tr></table></figure><p>BEGIN只在最开始执行了一次,同样END也只在最终执行了一次<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618114643.png" alt></p><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><h3 id="FS与OFS"><a href="#FS与OFS" class="headerlink" title="FS与OFS"></a>FS与OFS</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":"&#125; &#123;print $1&#125;'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618114818.png" alt><br>在开始之前使用BEGIN定义了变量FS代表分割符<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;FS=":";OFS="---"&#125; &#123;print $1,$2&#125;'</span> a</span><br></pre></td></tr></table></figure></p><p>默认打印变量使用空格分割, 定义了OFS之后使用定义的变量来替代<br>OFS即out FS<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618115147.png" alt></p><h3 id="RS与ORS"><a href="#RS与ORS" class="headerlink" title="RS与ORS"></a>RS与ORS</h3><p>输入和输出行分割符<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;ORS=" "&#125;&#123;print $0&#125;'</span> a</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618125210.png" alt><br>可以合并多行<br>将刚才输出写入aa文件, 使用RS查看结果<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618125401.png" alt><br>将输入分割符换成空格之后可以打印出原来的结果</p><h3 id="NR与FNR"><a href="#NR与FNR" class="headerlink" title="NR与FNR"></a>NR与FNR</h3><p>NR代表总的行号<br>FNR代表当前文件的行号<br>一个文件看不出区别, 当在多个文件查询是可以发现区别<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print NR,FNR,$0&#125;'</span> a b</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618120424.png" alt></p><h3 id="NF与-NF"><a href="#NF与-NF" class="headerlink" title="NF与$NF"></a>NF与$NF</h3><p>代表当前行的字段个数<br>例如第2行被分为了3个字段为3,其他行只有一个冒号都为2<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">':'</span> <span class="string">'&#123;print $0,NF&#125;'</span> a</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618120814.png" alt><br>对于$NF,NF首先会转换成数字,加上$就代表了最后一个字段</p><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print NR,FNR,$0&#125;'</span> a b</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618130204.png" alt><br>想让列对齐使用print做不到<br>为了解决问题,可以使用printf函数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;print "NR   FNR  $0  "&#125;&#123;printf "%-4s %-4s %-4s\n",NR,FNR,$0&#125;'</span> a b</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618130405.png" alt><br>%-4s的含义: -代表左对齐(默认是右对齐),s代表字符串,4代表长度为4<br><strong>注意</strong>printf函数默认没有换行符,需要手动加上<code>\n</code></p><p><strong>美化一下</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN&#123;line="+--------------------+";print line;print "|NR   |FNR  |$0      |"&#125;&#123;print line;printf "|%-4s |%-4s |%-8s|\n",NR,FNR,$0&#125;END&#123;print line&#125;'</span> a b</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618131107.png" alt></p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/^11/'</span> a</span><br><span class="line">awk <span class="string">'!/^11/'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618131733.png" alt><br>查询11开头的和不是11开头的<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">'$1~/^11/'</span> a</span><br><span class="line">awk -F: <span class="string">'$1!~/^11/'</span> a</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618131756.png" alt><br>查询第一列是11开头的不是11开头的<br>使用变量的时候需要加上波浪号<code>~</code></p><h2 id="条件处理"><a href="#条件处理" class="headerlink" title="条件处理"></a>条件处理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">'&#123;if($1&gt;33)&#123;print $0&#125;&#125;'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618132254.png" alt><br>只查看第一列大于33的情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls | awk <span class="string">'&#123;if($0!="aa"&amp;&amp;$0!="a")&#123;print $0&#125;&#125;'</span>|xargs rm -rf</span><br><span class="line">ls | grep -vE <span class="string">"^(a|aa)$"</span>|xargs rm -rf</span><br></pre></td></tr></table></figure><p>删除除了a和aa文件其他的文件的两种方法</p><h3 id="统计用户个数"><a href="#统计用户个数" class="headerlink" title="统计用户个数"></a>统计用户个数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">'&#123;if($3==0)&#123;count++&#125;else if($3&gt;0)&#123;i++&#125;&#125;END&#123;print "管理员个数:"count;print "普通用户个数:"i&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618135058.png" alt><br>首先$3必须要是数字,0代表是root,其他数字就是普通用户</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">'&#123;username[i++]=$1&#125;END&#123;for(i in username)&#123;print i,username[i]&#125;&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>遍历出来的是数组的索引<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618140516.png" alt></p><h3 id="统计-etc-passwd中各种shell的个数"><a href="#统计-etc-passwd中各种shell的个数" class="headerlink" title="统计/etc/passwd中各种shell的个数"></a>统计/etc/passwd中各种shell的个数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">'/^[^#]/&#123;list[$NF]++&#125;END&#123;for(i in list)&#123;print i,list[i]&#125;&#125;'</span> /etc/passwd</span><br><span class="line">awk -F: <span class="string">'!/^#/&#123;list[$NF]++&#125;END&#123;for(i in list)&#123;print i,list[i]&#125;&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618141631.png" alt><br>去除掉了注释行</p><h2 id="内置函数和外部变量"><a href="#内置函数和外部变量" class="headerlink" title="内置函数和外部变量"></a>内置函数和外部变量</h2><h3 id="length函数"><a href="#length函数" class="headerlink" title="length函数"></a>length函数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;if(length($1)==4)&#123;print $1&#125;&#125;'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190618162206.png" alt><br>打印出长度为4的行</p><h3 id="sub-gsub函数"><a href="#sub-gsub函数" class="headerlink" title="sub,gsub函数"></a>sub,gsub函数</h3><h3 id="int函数"><a href="#int函数" class="headerlink" title="int函数"></a>int函数</h3><h3 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h3><ul><li><p>方法1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h | awk <span class="string">'&#123;if(int($5)&gt;'</span><span class="string">''</span><span class="variable">$i</span><span class="string">''</span><span class="string">')print $0&#125;'</span></span><br></pre></td></tr></table></figure><p>使用3个单引号包起来</p></li><li>方法2<br>使用-v参数<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h | awk -v i=<span class="variable">$i</span> <span class="string">'&#123;if(int($5)&gt;i)print $0&#125;'</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sed命令</title>
      <link href="2019/06/17/shell/sed%E5%91%BD%E4%BB%A4/"/>
      <url>2019/06/17/shell/sed%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>用于非交互的文件修改<br>测试文件<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617224718.png" alt></p><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p><strong>注意</strong><br>sed替换时必须要有三个/, <code>s/old/new/</code>最后的这个/不能少</p><h3 id="普通用法"><a href="#普通用法" class="headerlink" title="普通用法"></a>普通用法</h3><p>有a文件<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617195753.png" alt><br>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/222/333'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617195838.png" alt><br>替换方式以vim十分相似</p><h3 id="amp-的意义"><a href="#amp-的意义" class="headerlink" title="&amp;的意义"></a>&amp;的意义</h3><p>&amp;代表匹配的部分</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/.*/#&amp;/'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617202232.png" alt><br>在所有行开始加上#, 还有一个等价的方法是<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/^/#/'</span> a</span><br></pre></td></tr></table></figure></p><p>直接将开始符号替换为#</p><h2 id="模式空间和暂存空间"><a href="#模式空间和暂存空间" class="headerlink" title="模式空间和暂存空间"></a>模式空间和暂存空间</h2><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><ul><li>d删除</li><li>s替换</li></ul><h3 id="高级指令"><a href="#高级指令" class="headerlink" title="高级指令"></a>高级指令</h3><ul><li>存入暂存区指令h H</li><li>取出暂存区指令g G</li><li>暂存空间和模式空间互换指令x<br>小写是覆盖式,大写是追加式<br>例如命令<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'g'</span> a</span><br><span class="line">sed <span class="string">'G'</span> a</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617214508.png" alt><br>g是覆盖的,读入一行然后从暂存区取出一个换行直接替换为空<br>G是追加的,读入一行然后从暂存区取出一个换行一行变成两行</p><p><strong>sed处理的行是绝对概念,一旦开始处理一行不论处理结果是几行操作都是针对的处理后所有部分</strong><br><strong>如果通过g或者G将一行变成了多行,之后的操作也是针对这多行</strong><br>例如这两个指令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1h;2G;2h;3G'</span> a</span><br><span class="line">sed <span class="string">'1h;2G;2h;3G;3d'</span> a</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617224508.png" alt><br>通过操作第3行追加了暂存区的两行, 一旦第3行删除不只是原来的第3行还有新增的两行</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1h;$G'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617214832.png" alt><br>第一行存入暂存区, 到最后一行追加过去 相当于复制第一行到最后一行</p><p>剪切第一行到最后一行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1&#123;h;d&#125;;$G'</span> a</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617215839.png" alt></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1,3H;$G'</span> a</span><br><span class="line">sed <span class="string">'1h;2,3H;$G'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617220120.png" alt><br>造成这两个命令区别的原因是暂存区本来有一个空行,直接追加会导致最前面留一个空行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'4h;5x;6G'</span> a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617220901.png" alt><br>首先第4行写入暂存区, 第5行和暂存区进行交换第五行变成444,暂存区变成555,  第6行拉下来555所以666之后是555</p><p>倒序<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1!G;$!h;$!d'</span> a</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617223104.png" alt><br>解释图<br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190617223605.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习</title>
      <link href="2019/06/03/database/mysql%E5%AD%A6%E4%B9%A0/"/>
      <url>2019/06/03/database/mysql%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="查询挂科数超过2门的学生的平均成绩"><a href="#查询挂科数超过2门的学生的平均成绩" class="headerlink" title="查询挂科数超过2门的学生的平均成绩"></a>查询挂科数超过2门的学生的平均成绩</h3><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190603145056.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell配置根据前缀补全</title>
      <link href="2019/06/02/shell/shell%E9%85%8D%E7%BD%AE%E6%A0%B9%E6%8D%AE%E5%89%8D%E7%BC%80%E8%A1%A5%E5%85%A8/"/>
      <url>2019/06/02/shell/shell%E9%85%8D%E7%BD%AE%E6%A0%B9%E6%8D%AE%E5%89%8D%E7%BC%80%E8%A1%A5%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="shell-自动根据前缀查找补全历史命令"><a href="#shell-自动根据前缀查找补全历史命令" class="headerlink" title="shell 自动根据前缀查找补全历史命令"></a>shell 自动根据前缀查找补全历史命令</h2><p>在 ~/.inputrc或/etc/inputrc 最后面加上如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;\e[A&quot;: history-search-backward</span><br><span class="line">&quot;\e[B&quot;: history-search-forward</span><br><span class="line">&quot;\e[1~&quot;: beginning-of-line</span><br><span class="line">&quot;\e[4~&quot;: end-of-line</span><br></pre></td></tr></table></figure></p><p>后面两行可以不用加, 用来移动到行首和行尾</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的async/await和promise</title>
      <link href="2019/05/22/front-end/js%E7%9A%84async-await%E5%92%8Cpromise/"/>
      <url>2019/05/22/front-end/js%E7%9A%84async-await%E5%92%8Cpromise/</url>
      
        <content type="html"><![CDATA[<h2 id="从一道题目开始"><a href="#从一道题目开始" class="headerlink" title="从一道题目开始"></a>从一道题目开始</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 start"</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"script start"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"setTimeout"</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"script end"</span>);</span><br></pre></td></tr></table></figure><p><strong>答案</strong><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190522092058.png" alt></p><h2 id="async和awiat讲解"><a href="#async和awiat讲解" class="headerlink" title="async和awiat讲解"></a>async和awiat讲解</h2><p><a href="https://segmentfault.com/a/1190000007535316" target="_blank" rel="noopener">理解 JavaScript 的 async/await</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型</title>
      <link href="2019/05/18/front-end/js%E5%8E%9F%E5%9E%8B/"/>
      <url>2019/05/18/front-end/js%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f1 = <span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure><h2 id="原型图"><a href="#原型图" class="headerlink" title="原型图"></a>原型图</h2><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190518223924.jpg" alt></p><h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><ol><li>普通对象</li><li>函数对象<br>所有的函数类型</li><li>prototype对象<br>由函数对象的<code>prototype</code>属性指向的对象<br>原型链就是一条由prototype对象组成的链表, 头节点是<code>Object.prototype</code><br>prototype对象的<code>__proto__</code>属性用来连接上一级原型<br>prototype对象的<code>constructor</code>属性用来表示该原型的构造函数</li></ol><h2 id="三种属性解释"><a href="#三种属性解释" class="headerlink" title="三种属性解释"></a>三种属性解释</h2><p>总共有三种属性 <code>prototype</code>,<code>__proto__</code>,<code>constructor</code></p><p><strong>所有的对象都有<code>__proto__</code>和<code>constructor</code></strong><br><strong>只有构造函数有<code>prototype</code></strong></p><p><strong>prototype</strong><br>这是函数对象的独有属性, 它指向本身的prototype对象</p><p><strong><strong>proto</strong></strong><br>这是所有对象都有的属性, 用来指向它自己原型的prototype对象</p><p><strong>constructor</strong><br>所有对象都有的属性, 以下是关于<code>constructor</code>的解释<br><code>constructor</code>和<code>prototype</code>一样也构成一个链, 这个链的终点是<code>Function</code>, <code>Function</code>的<code>constructor</code>也是<code>Function</code><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190520194906.png" alt></p><h2 id="对Object对象的分析"><a href="#对Object对象的分析" class="headerlink" title="对Object对象的分析"></a>对Object对象的分析</h2><p>显然Object是一个函数所以是函数对象,拥有上述三个属性, 对这三个属性分别进行分析</p><p><strong>prototype</strong><br>指向<code>Object</code>的prototype对象</p><p><strong><strong>proto</strong></strong><br>指向Object的原型的prototype对象,Object是一个函数所以它的原型是<code>Function</code><br>所以<code>__proto__</code>指向<code>Function.prototype</code></p><p><strong>constructor</strong><br>指向Object的原型方法显然就是<code>Function</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx静态资源服务器与反向代理结合实例</title>
      <link href="2019/05/12/nginx/nginx%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%BB%93%E5%90%88%E5%AE%9E%E4%BE%8B/"/>
      <url>2019/05/12/nginx/nginx%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%BB%93%E5%90%88%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建静态资源服务器"><a href="#搭建静态资源服务器" class="headerlink" title="搭建静态资源服务器"></a>搭建静态资源服务器</h2><ol><li>增加<code>server</code>字段</li><li>监听80端口</li><li>设置访问根目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  location / &#123;</span><br><span class="line">    alias /Users/zhangyuxi/Desktop/public-house/build/;</span><br><span class="line">    autoindex on;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置服务器接口的反向代理"><a href="#配置服务器接口的反向代理" class="headerlink" title="配置服务器接口的反向代理"></a>配置服务器接口的反向代理</h2><p>直接配置一个新的location以及对应的需要访问的服务器地址即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /api/gongyongfang&#123;</span><br><span class="line">  proxy_pass http://140.249.19.181:8910/api/gongyongfang;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置proxy-pass时斜线的问题"><a href="#配置proxy-pass时斜线的问题" class="headerlink" title="配置proxy-pass时斜线的问题"></a>配置proxy-pass时斜线的问题</h3><p>两台nginx服务器<br>nginx A: 192.168.1.48<br>nginx B: 192.168.1.56<br>请求nginxA： <a href="http://192.168.1.48/foo/api" target="_blank" rel="noopener">http://192.168.1.48/foo/api</a></p><table><thead><tr><th style="text-align:center">案例</th><th style="text-align:center">location</th><th style="text-align:center">proxy_pass</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">/foo/</td><td style="text-align:center"><a href="http://192.168.1.48/" target="_blank" rel="noopener">http://192.168.1.48/</a></td><td style="text-align:center">/api</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">/foo</td><td style="text-align:center"><a href="http://192.168.1.48/" target="_blank" rel="noopener">http://192.168.1.48/</a></td><td style="text-align:center">//api</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">/foo/</td><td style="text-align:center"><a href="http://192.168.1.48" target="_blank" rel="noopener">http://192.168.1.48</a></td><td style="text-align:center">/foo/api</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">/foo</td><td style="text-align:center"><a href="http://192.168.1.48" target="_blank" rel="noopener">http://192.168.1.48</a></td><td style="text-align:center">/foo/api</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">案例</th><th style="text-align:center">location</th><th style="text-align:center">proxy_pass</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">/foo/</td><td style="text-align:center"><a href="http://192.168.1.48/bar/" target="_blank" rel="noopener">http://192.168.1.48/bar/</a></td><td style="text-align:center">/bar/api</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">/foo</td><td style="text-align:center"><a href="http://192.168.1.48/bar/" target="_blank" rel="noopener">http://192.168.1.48/bar/</a></td><td style="text-align:center">/bar//api</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">/foo/</td><td style="text-align:center"><a href="http://192.168.1.48/bar" target="_blank" rel="noopener">http://192.168.1.48/bar</a></td><td style="text-align:center">/barapi</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">/foo</td><td style="text-align:center"><a href="http://192.168.1.48/bar" target="_blank" rel="noopener">http://192.168.1.48/bar</a></td><td style="text-align:center">/bar/api</td></tr></tbody></table><p>区分方法很简单, 代理的地址区分为ip:port加后面的字符串</p><ol><li>如果后面的字符串为空那么请求到被代理的地址就是访问地址</li><li>如果后面的字符串不为空, 那么结果就是先去掉location中的部分再加在<code>proxy_pass</code>的地址后面</li></ol><p>只有3,4是情况1, 那么访问什么结果就是什么, 都是/foo/api<br>剩下都是情况2, 例如对7进行分析<br>访问的是<code>/foo/api</code>去掉<code>/foo/</code>为<code>api</code>在proxy_pass的<code>/bar</code>后面加上<code>api</code><br>就是<code>/barapi</code>, 剩下的5中情况都是同样的方法</p><h2 id="路由的正则匹配"><a href="#路由的正则匹配" class="headerlink" title="路由的正则匹配"></a>路由的正则匹配</h2><p>由于上传的图片和excel模板文件需要被代理, 而css,js文件不需要代理<br>并且这两种类型的路径都是<code>static</code>开头, 所以用正则来进行区分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># root 方案</span><br><span class="line">#location ~ /static/(js|css|media) &#123;</span><br><span class="line">#  alias /Users/zhangyuxi/Desktop/public-house/;</span><br><span class="line">#  autoindex on;</span><br><span class="line">#&#125;</span><br><span class="line"># alias 方案</span><br><span class="line">location ~ /static/(js|css|media)/(.*) &#123;</span><br><span class="line">  alias /Users/zhangyuxi/Desktop/public-house/build/static/$1/$2;</span><br><span class="line">  autoindex on;</span><br><span class="line">&#125;</span><br><span class="line">#location /static/js &#123;</span><br><span class="line">#  alias /var/www/public-house-build/static/js/;</span><br><span class="line">#  autoindex on;</span><br><span class="line">#&#125;</span><br><span class="line">#location /static/css &#123;</span><br><span class="line">#  alias /var/www/public-house-build/static/css/;</span><br><span class="line">#  autoindex on;</span><br><span class="line">#&#125;</span><br><span class="line">#location /static/media &#123;</span><br><span class="line">#  alias /var/www/public-house-build/static/media/;</span><br><span class="line">#  autoindex on;</span><br><span class="line">#&#125;</span><br><span class="line">location /api/gongyongfang&#123;</span><br><span class="line">  proxy_pass http://140.249.19.181:8910/api/gongyongfang;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><ol><li>如果在匹配方式前不加<code>~</code>, 会导致优先级不够, js等文件不会从本地查找</li><li>使用了正则匹配之后alias使用方法有变化, 访问路径的剩余部分并不会自动加到后面<br>使用了<code>(.*)</code>接收到了所有的剩余字符, 在<code>alias</code>中使用<code>$2</code>代替, 精确定位到每个文件<br>如果使用root就会便捷一些</li></ol><h2 id="完整的配置文件"><a href="#完整的配置文件" class="headerlink" title="完整的配置文件"></a>完整的配置文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">  include /usr/local/etc/nginx/mime.types;</span><br><span class="line">  gzip on;</span><br><span class="line"></span><br><span class="line">  gzip_vary on;</span><br><span class="line">  gzip_proxied any;</span><br><span class="line">  gzip_comp_level <span class="number">6</span>;</span><br><span class="line">  gzip_buffers <span class="number">16</span> <span class="number">8</span>k;</span><br><span class="line">  gzip_http_version <span class="number">1.1</span>;</span><br><span class="line">  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">      alias /Users/zhangyuxi/Desktop/<span class="keyword">public</span>-house/build/;</span><br><span class="line">      autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta"># root 方案</span></span><br><span class="line">    <span class="meta">#location ~ /static/(js|css|media)/(.*) &#123;</span></span><br><span class="line">    <span class="meta">#  alias /Users/zhangyuxi/Desktop/public-house/;</span></span><br><span class="line">    <span class="meta">#  autoindex on;</span></span><br><span class="line">    #&#125;</span><br><span class="line">    <span class="meta"># alias 方案</span></span><br><span class="line">    location ~ /<span class="keyword">static</span>/(js|css|media)/(.*) &#123;</span><br><span class="line">      alias /Users/zhangyuxi/Desktop/<span class="keyword">public</span>-house/build/<span class="keyword">static</span>/$<span class="number">1</span>/$<span class="number">2</span>;</span><br><span class="line">      autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">    location /api/gongyongfang&#123;</span><br><span class="line">      proxy_pass http:<span class="comment">//140.249.19.181:8910/api/gongyongfang;</span></span><br><span class="line">    &#125;</span><br><span class="line">    location /<span class="keyword">static</span>&#123;</span><br><span class="line">      proxy_pass http:<span class="comment">//140.249.19.181:8910/static;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx进程管理</title>
      <link href="2019/05/11/nginx/nginx%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>2019/05/11/nginx/nginx%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="进程管理的信号"><a href="#进程管理的信号" class="headerlink" title="进程管理的信号"></a>进程管理的信号</h2><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190511100638.png" alt></p><h3 id="CHLD"><a href="#CHLD" class="headerlink" title="CHLD"></a>CHLD</h3><p>子进程结束时会向父进程发送CHLD信号<br>Master进程收到CHLD信号之后会重新拉起worker进程</p><h2 id="reload命令的实质"><a href="#reload命令的实质" class="headerlink" title="reload命令的实质"></a>reload命令的实质</h2><p><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190511102245.png" alt><br><img src="https://raw.githubusercontent.com/Evolution404/picgo-img/master/20190511102443.png" alt><br>旧worker子进程如果出错就会导致旧进程长时间存在<br>新版本中增加了<code>worker_shutdown_timeout</code>, 决定旧worker子进程最长存在时间</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置反向代理服务器</title>
      <link href="2019/05/11/nginx/nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2019/05/11/nginx/nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="配置只能本地访问"><a href="#配置只能本地访问" class="headerlink" title="配置只能本地访问"></a>配置只能本地访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen 127.0.0.1:8888;</span><br></pre></td></tr></table></figure><p>在listen中指定ip+端口, 即可控制本地访问</p><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">  include /usr/local/nginx/conf/mime.types;</span><br><span class="line">  upstream remote &#123;</span><br><span class="line">    server 140.249.19.181:8910;</span><br><span class="line">  &#125;</span><br><span class="line">  server&#123;</span><br><span class="line">    listen 9999;</span><br><span class="line">    location /&#123;</span><br><span class="line">      proxy_pass http://remote;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样本地访问<code>localhost:9999</code>就会被代理到<code>140.249.19.181:8910</code></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置静态文件服务器</title>
      <link href="2019/05/10/nginx/nginx%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2019/05/10/nginx/nginx%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h2><ul><li>配置文件的命令以分号结尾</li><li>根结构是<code>http</code>, 内部配置各个<code>server</code></li><li>每个server内可以配置监听的端口, 以及自己的<code>server_name</code></li><li>每个server内的<code>location</code>属性用于指定对应路由所访问的静态文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">      alias    dist/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可用的静态文件配置文件"><a href="#可用的静态文件配置文件" class="headerlink" title="可用的静态文件配置文件"></a>可用的静态文件配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">  include /usr/local/nginx/conf/mime.types;</span><br><span class="line">  server&#123;</span><br><span class="line">    listen 8888;</span><br><span class="line">    location /&#123;</span><br><span class="line">      alias dist/;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>events</code> 必须要有, 否则会报错</li><li>引入<code>mime.types</code>为了对请求头的<code>content-type</code>属性进行设置</li></ul><h2 id="指定目录的静态文件配置"><a href="#指定目录的静态文件配置" class="headerlink" title="指定目录的静态文件配置"></a>指定目录的静态文件配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">  include /usr/local/nginx/conf/mime.types;</span><br><span class="line">  server&#123;</span><br><span class="line">    listen 8888;</span><br><span class="line">    charset utf-8,gbk;</span><br><span class="line">    location /&#123;</span><br><span class="line">      alias /Users/zhangyuxi/Desktop/;</span><br><span class="line">      autoindex on;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先要解决的是权限问题, 对于部署的目录需要给nginx权限<br>简单的话可以直接 <code>chomod 777 .</code></li><li>audoindex 的目的是展示目录的所有文件</li><li>要解决目录显示中文乱码的问题, 指定charset即可</li><li>alias是别名, 就是说location的路径等价于alias的路径</li><li>root可以理解为拼接, root就是当前server或location的根路径,<br>location指定的路径要在root的拼接下<br>alias最后要有/, root可有可无</li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx启动,重启与关闭</title>
      <link href="2019/05/10/nginx/nginx%E5%90%AF%E5%8A%A8,%E9%87%8D%E5%90%AF%E4%B8%8E%E5%85%B3%E9%97%AD/"/>
      <url>2019/05/10/nginx/nginx%E5%90%AF%E5%8A%A8,%E9%87%8D%E5%90%AF%E4%B8%8E%E5%85%B3%E9%97%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>直接进入nginx的可执行文件目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure></p><p>加载默认的配置文件</p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>重新加载配置文件, 用于配置文件修改后nginx的重启<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></p><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>关闭nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git reset的三种模式</title>
      <link href="2019/03/30/git/git%20reset%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/03/30/git/git%20reset%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="三种模式介绍"><a href="#三种模式介绍" class="headerlink" title="三种模式介绍"></a>三种模式介绍</h2><p><strong>三种模式共分别为soft, mixed, hard</strong><br><code>shellgit reset head^git reset -soft head^git reset -hard head^</code><br>首先我们要明确工作区, 暂存区, 版本库三种位置的区别<br>他们的英语分别是head版本库, index暂存区, working copy工作区</p><h2 id="实验项目的搭建"><a href="#实验项目的搭建" class="headerlink" title="实验项目的搭建"></a>实验项目的搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">touch a.txt</span><br><span class="line">echo "1"&gt;&gt;a.txt</span><br><span class="line">git add a.txt</span><br><span class="line">git commit -m "add 1"</span><br><span class="line">echo "2"&gt;&gt;a.txt</span><br><span class="line">git add a.txt</span><br><span class="line">git commit -m "add 2"</span><br><span class="line">echo "3"&gt;&gt;a.txt</span><br><span class="line">git add a.txt</span><br><span class="line">git commit -m "add 3"</span><br><span class="line">git log</span><br></pre></td></tr></table></figure><p>结果如下<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuay0luwj30ss0hugoa.jpg" alt></p><h2 id="mixed模式"><a href="#mixed模式" class="headerlink" title="mixed模式"></a>mixed模式</h2><p>这是<code>reset</code>命令的默认模式<br>执行结果是<strong>工作区不变</strong>, <strong>暂存区, 版本库变成指向的位置的内容</strong><br>执行命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset head^^</span><br></pre></td></tr></table></figure></p><p><strong>查看工作区</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kucryyt2j30ik03wmxa.jpg" alt><br>内容没有变化, 说明工作区内容没有变化<br><strong>查看暂存区</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kug1mgmqj30sm04eq3v.jpg" alt><br>此时暂存区内容已经是两次提交之前的了, 只有一个1<br><strong>查看版本库</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuhvsh6oj30me0303yw.jpg" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- .</span><br><span class="line">cat a.txt</span><br></pre></td></tr></table></figure></p><p>首先丢弃所有修改, 然后查看<code>a.txt</code>的内容就是版本库的内容了<br>版本库的内容是一个1, 说明版本库内容也已经是两次提交前的内容了</p><p><strong>另一种比较的方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;filename&gt; 比较工作区与暂存区</span><br><span class="line">git diff head &lt;filename&gt; 比较工作区与版本库的最新版本</span><br><span class="line">git diff --cached head &lt;filename&gt; 比较暂存区与版本库的最新版本</span><br></pre></td></tr></table></figure></p><p><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kus4hvglj30fe09gjru.jpg" alt><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kusodvjbj30fa094wez.jpg" alt><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kusy51rcj309w062jr8.jpg" alt><br>所以工作区内容<code>123</code>, 暂存区和版本库为<code>1</code><br>结论如图<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuugunx1j30g403s3ys.jpg" alt></p><h2 id="soft模式"><a href="#soft模式" class="headerlink" title="soft模式"></a>soft模式</h2><p>如上方介绍的命令结构, 添加参数<code>--soft</code><br><strong>工作区与暂存区比较</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuxy837ej30fa08cdfq.jpg" alt><br>两者没有区别都是<code>123</code><br><strong>工作区与版本库比较</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuyto5wpj30ew09edga.jpg" alt><br>工作区是<code>123</code>版本库是<code>1</code><br><strong>暂存区与版本库比较</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuz6dc12j30h40a0aaj.jpg" alt><br>暂存区是<code>123</code>版本库是<code>1</code><br>结论如图<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kux3s9x6j30g403saac.jpg" alt></p><h2 id="hard模式"><a href="#hard模式" class="headerlink" title="hard模式"></a>hard模式</h2><p>如上方介绍的命令结构, 添加参数<code>--hard</code><br><strong>工作区与暂存区比较</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuxy837ej30fa08cdfq.jpg" alt><br><strong>工作区与版本库比较</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuxy837ej30fa08cdfq.jpg" alt><br><strong>暂存区与版本库比较</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kuxy837ej30fa08cdfq.jpg" alt><br>结论如图<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1g1kux919fhj30m8058gm2.jpg" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>soft模式只会重置版本库的head位置<br>mixed模式会重置版本库的head位置以及暂存区内容<br>hard模式会让版本库,暂存区以及工作区一致都是新重置的内容</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码14-lzio解析</title>
      <link href="2019/02/28/lua/lua%E6%BA%90%E7%A0%8114-lzio%E8%A7%A3%E6%9E%90/"/>
      <url>2019/02/28/lua/lua%E6%BA%90%E7%A0%8114-lzio%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="研究的路径"><a href="#研究的路径" class="headerlink" title="研究的路径"></a>研究的路径</h2><p><code>luaL_loadfilex</code>中调用了<code>lua_load</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status = lua_load(L, getF, &amp;lf, lua_tostring(L, <span class="number">-1</span>), mode);</span><br></pre></td></tr></table></figure></p><p><code>lua_load</code>中使用到了<code>lzio</code>中的函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luaZ_init(L, &amp;z, reader, data);</span><br></pre></td></tr></table></figure></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用于缓冲流<br>公开的函数有</p><ul><li>luaZ_init</li><li>luaZ_read</li></ul><p><strong>操作的结构</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Zio</span> &#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> n;<span class="comment">/* bytes still unread */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *p;<span class="comment">/* current position in buffer */</span></span><br><span class="line">  lua_Reader reader;<span class="comment">/* reader function */</span></span><br><span class="line">  <span class="keyword">void</span> *data;<span class="comment">/* additional data */</span></span><br><span class="line">  lua_State *L;<span class="comment">/* Lua state (for reader) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="luaZ-init"><a href="#luaZ-init" class="headerlink" title="luaZ_init"></a>luaZ_init</h2><p>功能就是初始化z, 这个一个ZIO的指针<br>操作的方式很直白<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">z-&gt;L = L;</span><br><span class="line">z-&gt;reader = reader;</span><br><span class="line">z-&gt;data = data;</span><br><span class="line">z-&gt;n = <span class="number">0</span>;</span><br><span class="line">z-&gt;p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p><h2 id="luaZ-read"><a href="#luaZ-read" class="headerlink" title="luaZ_read"></a>luaZ_read</h2><p><strong>luaZ_fill</strong></p><ol><li>从<code>z-&gt;data</code>中读取出一个buff, <code>z-&gt;data</code>就是那个<code>LoadF</code>结构</li><li>设置<code>z-&gt;n</code>以及<code>z-&gt;p</code></li><li>返回buff的第一个值</li></ol><p><code>luaZ_read</code>从z中读取n个字符到b中<br>使用一个while循环, 每次通过<code>luaZ_fill</code>读取一个buff的数据<br>然后将刚刚读取的内容拷贝到b中, 将n减去刚刚拷贝的大小<br>一直循环到n为0</p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码12-ldo解析</title>
      <link href="2019/02/03/lua/lua%E6%BA%90%E7%A0%8112-ldo%E8%A7%A3%E6%9E%90/"/>
      <url>2019/02/03/lua/lua%E6%BA%90%E7%A0%8112-ldo%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h2><p><strong>setjpm与longjmp</strong><br>setjpm传入一个buf<br>longjmp传入buf和一个int值<br>第一次调用setjpm会返回0, 调用longjmp会跳转到setjmp处并返回当时传入的int值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAI_THROW(L,c)longjmp((c)-&gt;b, 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAI_TRY(L,c,a)<span class="meta-keyword">if</span> (setjmp((c)-&gt;b) == 0) &#123; a &#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_jmpbufjmp_buf</span></span><br></pre></td></tr></table></figure><p>使用<code>longjmp</code>机制定义了try, throw语句<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* chain list of long jump buffers */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lua_longjmp</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">lua_longjmp</span> *<span class="title">previous</span>;</span></span><br><span class="line">  luai_jmpbuf b;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> status;  <span class="comment">/* error code */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这是错误处理跳转位置的链表, 保存各个恢复点的位置</p><h3 id="try的开放api"><a href="#try的开放api" class="headerlink" title="try的开放api"></a>try的开放api</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">luaD_rawrunprotected</span> <span class="params">(lua_State *L, Pfunc f, <span class="keyword">void</span> *ud)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> short oldnCcalls = L-&gt;nCcalls;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">lua_longjmp</span> <span class="title">lj</span>;</span></span><br><span class="line">  lj.status = LUA_OK;</span><br><span class="line">  lj.previous = L-&gt;errorJmp;  <span class="comment">/* chain new error handler */</span></span><br><span class="line">  L-&gt;errorJmp = &amp;lj;</span><br><span class="line">  LUAI_TRY(L, &amp;lj,</span><br><span class="line">    (*f)(L, ud);</span><br><span class="line">  );</span><br><span class="line">  L-&gt;errorJmp = lj.previous;  <span class="comment">/* restore old error handler */</span></span><br><span class="line">  L-&gt;nCcalls = oldnCcalls;</span><br><span class="line">  <span class="keyword">return</span> lj.status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以运行受保护的函数, 运行前设置一个错误恢复位置<br>执行成功之后恢复为运行前的状态</p><h3 id="throw的开放api"><a href="#throw的开放api" class="headerlink" title="throw的开放api"></a>throw的开放api</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">l_noret <span class="title">luaD_throw</span> <span class="params">(lua_State *L, <span class="keyword">int</span> errcode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (L-&gt;errorJmp) &#123;  <span class="comment">/* thread has an error handler? */</span></span><br><span class="line">    L-&gt;errorJmp-&gt;status = errcode;  <span class="comment">/* set status */</span></span><br><span class="line">    LUAI_THROW(L, L-&gt;errorJmp);  <span class="comment">/* jump to it */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;  <span class="comment">/* thread has no error handler */</span></span><br><span class="line">    global_State *g = G(L);</span><br><span class="line">    L-&gt;status = cast_byte(errcode);  <span class="comment">/* mark it as dead */</span></span><br><span class="line">    <span class="keyword">if</span> (g-&gt;mainthread-&gt;errorJmp) &#123;  <span class="comment">/* main thread has a handler? */</span></span><br><span class="line">      setobjs2s(L, g-&gt;mainthread-&gt;top++, L-&gt;top - <span class="number">1</span>);  <span class="comment">/* copy error obj. */</span></span><br><span class="line">      luaD_throw(g-&gt;mainthread, errcode);  <span class="comment">/* re-throw in main thread */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;  <span class="comment">/* no handler at all; abort */</span></span><br><span class="line">      <span class="keyword">if</span> (g-&gt;panic) &#123;  <span class="comment">/* panic function? */</span></span><br><span class="line">        seterrorobj(L, errcode, L-&gt;top);  <span class="comment">/* assume EXTRA_STACK */</span></span><br><span class="line">        <span class="keyword">if</span> (L-&gt;ci-&gt;top &lt; L-&gt;top)</span><br><span class="line">          L-&gt;ci-&gt;top = L-&gt;top;  <span class="comment">/* pushing msg. can break this invariant */</span></span><br><span class="line">        lua_unlock(L);</span><br><span class="line">        g-&gt;panic(L);  <span class="comment">/* call panic function (last chance to jump out) */</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抛出异常的路径是</p><ol><li>查询当前的线程,是否有恢复点, 有就跳转到恢复点</li><li>查询主线程是否有恢复点, 有的话跳转到主线程的恢复点</li><li>没有错误恢复点, 直接abort()</li></ol><h2 id="指令处理机制"><a href="#指令处理机制" class="headerlink" title="指令处理机制"></a>指令处理机制</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luaL_dofile(L, fn) \</span></span><br><span class="line">(luaL_loadfile(L, fn) || lua_pcall(L, <span class="number">0</span>, LUA_MULTRET, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>公开的api是这个<code>luaL_dofile</code>, <code>fn</code>是文件名, <code>loadfile</code>用于各种分析得出虚拟机指令</p><p><code>lua_pcall</code>就是我们要分析的指令的处理机制<br><strong>参数的含义</strong><br>0-&gt; n-&gt; nargs<br><code>LUA_MULTRET</code>-&gt; -1-&gt; r-&gt; nresults  代表返回值个数不固定<br>0-&gt; f-&gt; errfunc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lua_pcall(L,n,r,f)lua_pcallk(L, (n), (r), (f), 0, NULL)</span></span><br><span class="line"></span><br><span class="line"><span class="function">LUA_API <span class="keyword">int</span> <span class="title">lua_pcallk</span> <span class="params">(lua_State *L, <span class="keyword">int</span> nargs, <span class="keyword">int</span> nresults, <span class="keyword">int</span> errfunc,</span></span></span><br><span class="line"><span class="function"><span class="params">                        lua_KContext ctx, lua_KFunction k)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">CallS</span> <span class="title">c</span>;</span></span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  <span class="keyword">ptrdiff_t</span> func;</span><br><span class="line">  lua_lock(L);</span><br><span class="line">  api_check(L, k == <span class="literal">NULL</span> || !isLua(L-&gt;ci),</span><br><span class="line">    <span class="string">"cannot use continuations inside hooks"</span>);</span><br><span class="line">  api_checknelems(L, nargs+<span class="number">1</span>);</span><br><span class="line">  api_check(L, L-&gt;status == LUA_OK, <span class="string">"cannot do calls on non-normal thread"</span>);</span><br><span class="line">  checkresults(L, nargs, nresults);</span><br><span class="line">  <span class="keyword">if</span> (errfunc == <span class="number">0</span>)</span><br><span class="line">    func = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    StkId o = index2addr(L, errfunc);</span><br><span class="line">    api_checkstackindex(L, errfunc, o);</span><br><span class="line">    func = savestack(L, o);</span><br><span class="line">  &#125;</span><br><span class="line">  c.func = L-&gt;top - (nargs+<span class="number">1</span>);  <span class="comment">/* function to be called */</span></span><br><span class="line">  <span class="keyword">if</span> (k == <span class="literal">NULL</span> || L-&gt;nny &gt; <span class="number">0</span>) &#123;  <span class="comment">/* no continuation or no yieldable? */</span></span><br><span class="line">    c.nresults = nresults;  <span class="comment">/* do a 'conventional' protected call */</span></span><br><span class="line">    status = luaD_pcall(L, f_call, &amp;c, savestack(L, c.func), func);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;  <span class="comment">/* prepare continuation (call is already protected by 'resume') */</span></span><br><span class="line">    CallInfo *ci = L-&gt;ci;</span><br><span class="line">    ci-&gt;u.c.k = k;  <span class="comment">/* save continuation */</span></span><br><span class="line">    ci-&gt;u.c.ctx = ctx;  <span class="comment">/* save context */</span></span><br><span class="line">    <span class="comment">/* save information for error recovery */</span></span><br><span class="line">    ci-&gt;extra = savestack(L, c.func);</span><br><span class="line">    ci-&gt;u.c.old_errfunc = L-&gt;errfunc;</span><br><span class="line">    L-&gt;errfunc = func;</span><br><span class="line">    setoah(ci-&gt;callstatus, L-&gt;allowhook);  <span class="comment">/* save value of 'allowhook' */</span></span><br><span class="line">    ci-&gt;callstatus |= CIST_YPCALL;  <span class="comment">/* function can do error recovery */</span></span><br><span class="line">    luaD_call(L, c.func, nresults);  <span class="comment">/* do the call */</span></span><br><span class="line">    ci-&gt;callstatus &amp;= ~CIST_YPCALL;</span><br><span class="line">    L-&gt;errfunc = ci-&gt;u.c.old_errfunc;</span><br><span class="line">    status = LUA_OK;  <span class="comment">/* if it is here, there were no errors */</span></span><br><span class="line">  &#125;</span><br><span class="line">  adjustresults(L, nresults);</span><br><span class="line">  lua_unlock(L);</span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码11-lvm解析</title>
      <link href="2019/01/30/lua/lua%E6%BA%90%E7%A0%8111-lvm%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/30/lua/lua%E6%BA%90%E7%A0%8111-lvm%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="指令执行"><a href="#指令执行" class="headerlink" title="指令执行"></a>指令执行</h2><p><strong>luav_execute</strong><br>这个函数是lua指令执行的函数, 内部包括了一个死循环<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">  vmdispatch()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一个结构, <code>vmdispatch</code>本质就是一个<code>switch case</code></p><h3 id="goto的意义"><a href="#goto的意义" class="headerlink" title="goto的意义"></a>goto的意义</h3><p>在函数中定义了一个goto标签<code>newframe</code><br>一旦遇到<code>OP_CALL OP_TAILCALL OP_RETURN</code><br>这几个操作码都会回到这里刷新函数信息</p><h3 id="ra以及base"><a href="#ra以及base" class="headerlink" title="ra以及base"></a>ra以及base</h3><p>ra和base都是与堆栈相关的变量<br>在运行过程中, lua栈大小可能会变化所以ra与base指针指向的地方<br>也要对应的变化<br>为此定义了<code>Protect</code>宏, 来进行base的修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vmfetch()&#123; \</span></span><br><span class="line">  i = *(ci-&gt;u.l.savedpc++); \</span><br><span class="line">  <span class="keyword">if</span> (L-&gt;hookmask &amp; (LUA_MASKLINE | LUA_MASKCOUNT)) \</span><br><span class="line">    Protect(luaG_traceexec(L)); \</span><br><span class="line">  ra = RA(i); <span class="comment">/* WARNING: any stack reallocation invalidates 'ra' */</span> \</span><br><span class="line">  lua_assert(base == ci-&gt;u.l.base); \</span><br><span class="line">  lua_assert(base &lt;= L-&gt;top &amp;&amp; L-&gt;top &lt; L-&gt;<span class="built_in">stack</span> + L-&gt;stacksize); \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vmfetch</code>用来取到一条指令, 并且进行一些初始化</p><ol><li>对i进行了赋值和指令自增</li><li>对ra进行赋值, 指向一个栈位置 注释中明确表示了<code>WARNING: any stack reallocation invalidates &#39;ra&#39;</code></li></ol><h2 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a>指令详解</h2><h3 id="赋值类指令"><a href="#赋值类指令" class="headerlink" title="赋值类指令"></a>赋值类指令</h3><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p><strong>OP_MOVE</strong><br>这个让指令中指向的B的值赋值给A寄存器<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setobjs2s(L, ra, RB(i));</span><br></pre></td></tr></table></figure></p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p><strong>nil</strong><br>OP_LOADNIL<br>由于只有nil这一种可能, 所以B表示的是需要赋值的个数<br>这个指令可以令从A寄存器开始的B个元素的值赋值为nil</p><p><strong>bool</strong><br>OP_LOADBOOL<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (GETARG_C(i)) ci-&gt;u.l.savedpc++;  <span class="comment">/* skip next instruction (if C) */</span></span><br></pre></td></tr></table></figure></p><p>在加载bool值的时候额外可以根据c的值确定是否跳过下一条指令</p><p><strong>复杂常量</strong><br>这些值存储在常量表中<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vmcase(OP_LOADK) &#123;</span><br><span class="line">  TValue *rb = k + GETARG_Bx(i);</span><br><span class="line">  setobj2s(L, ra, rb);</span><br><span class="line">  vmbreak;</span><br><span class="line">&#125;</span><br><span class="line">vmcase(OP_LOADKX) &#123;</span><br><span class="line">  TValue *rb;</span><br><span class="line">  <span class="comment">// 当前savedpc指向的就是下一条指令, 因为在vmfetch中对指令进行了自增</span></span><br><span class="line">  lua_assert(GET_OPCODE(*ci-&gt;u.l.savedpc) == OP_EXTRAARG);</span><br><span class="line">  rb = k + GETARG_Ax(*ci-&gt;u.l.savedpc++);</span><br><span class="line">  setobj2s(L, ra, rb);</span><br><span class="line">  vmbreak;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>k就是常量表, 在k基础上向后移动<br>K和KX的区别在于<br>K是用B区存的位置<br>KX使用ABC区合并表示位置, 可以寻址更大范围</p><h4 id="既不是常量也不在寄存器"><a href="#既不是常量也不在寄存器" class="headerlink" title="既不是常量也不在寄存器"></a>既不是常量也不在寄存器</h4><p><strong>OP_GETTABUP</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gettableProtected(L, upval, rc, ra);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gettableProtected(L,t,k,v)  &#123; const TValue *slot; \</span></span><br><span class="line">  <span class="keyword">if</span> (luaV_fastget(L,t,k,slot,luaH_get)) &#123; setobj2s(L, v, slot); &#125; \</span><br><span class="line">  <span class="keyword">else</span> Protect(luaV_finishget(L,t,k,v,slot)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luaV_fastget(L,t,k,slot,f) \</span></span><br><span class="line">  (!ttistable(t)  \</span><br><span class="line">   ? (slot = <span class="literal">NULL</span>, <span class="number">0</span>)  <span class="comment">/* not a table; 'slot' is NULL and result is 0 */</span>  \</span><br><span class="line">   : (slot = f(hvalue(t), k),  <span class="comment">/* else, do raw access */</span>  \</span><br><span class="line">      !ttisnil(slot)))  <span class="comment">/* result not nil? */</span></span><br></pre></td></tr></table></figure></p><p>upval -&gt; t<br>rc -&gt; k<br>ra -&gt; v<br>注释中明确表示了功能 R(A) := UpValue[B][RK(C)]</p><p>fastget:<br>  return 0, slot=NULL 不是table类型<br>  return 0, slot=nil  没有从table中取到值, 值可能从metamethod获得<br>  return 1, slot=val  这种情况是期望状态, 正确的取到了table中的值</p><p>finishget:<br>  当fastget返回0时会进入这个函数, 此时slot可能是NULL也可能是nil<br>  功能: 从table t中取到指定key的值到val中<br>  更详细的研究等待阅读过<code>ltm.c</code>之后再分解</p><h3 id="表达式运算"><a href="#表达式运算" class="headerlink" title="表达式运算"></a>表达式运算</h3><p><strong>luaV_tonumber_</strong><br>将整数类型和字符串类型转换成浮点数<br><strong>tonumber</strong><br>宏, 将o转换成数字赋值个n, 如果不能转换返回0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OP_ADD,<span class="comment">/*A B CR(A) := RK(B) + RK(C)*/</span></span><br><span class="line">OP_SUB,<span class="comment">/*A B CR(A) := RK(B) - RK(C)*/</span></span><br><span class="line">OP_MUL,<span class="comment">/*A B CR(A) := RK(B) * RK(C)*/</span></span><br><span class="line">OP_DIV,<span class="comment">/*A B CR(A) := RK(B) / RK(C)*/</span></span><br></pre></td></tr></table></figure><p>这几个实现流程基本一致, 检测类型, 都是整数直接处理<br>如果都能转换成浮点型, 执行操作返回类型<br>如果有非数字调用<code>luaT_trybinTm</code></p><h3 id="与或异或"><a href="#与或异或" class="headerlink" title="与或异或"></a>与或异或</h3><p><strong>与</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setivalue(ra, intop(&amp;, ib, ic));</span><br></pre></td></tr></table></figure></p><p>直接调用了&amp;运算符</p><p><strong>或</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setivalue(ra, intop(|, ib, ic));</span><br></pre></td></tr></table></figure></p><p>直接调用了|运算符</p><p><strong>异或</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setivalue(ra, intop(^, ib, ic));</span><br></pre></td></tr></table></figure></p><p>直接调用了^运算符</p><h3 id="左移右移"><a href="#左移右移" class="headerlink" title="左移右移"></a>左移右移</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setivalue(ra, luaV_shiftl(ib, ic));</span><br><span class="line">setivalue(ra, luaV_shiftl(ib, -ic));</span><br></pre></td></tr></table></figure><p><code>luaV_shiftl</code>支持负数, 所以左移负数位也是可以的, 等价于右移</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p><strong>OP_CONCAT</strong><br>即字符串的连接运算符<code>..</code></p><p><code>luaV_concat(total)</code>传入total<br>将从<code>L-&gt;top - 1</code>之前的total个元素进行连接<br>为了使用这个函数, 在<code>OP_CONCAT</code>指令中首先修改了<code>top</code>的位置<br>调用结束后并进行了恢复<br><strong>tostring</strong><br>这个宏返回值1表示可以转换成字符串, 并且会将传入的o的指向的值变成字符串</p><p><strong>luaV_concat</strong></p><ol><li>元素1和元素2都不能转换成字符串, 报错</li><li>元素2是空, 直接转换元素1变成字符串</li><li>元素1是空, 将元素2拷贝到1位置</li><li>普通情况, 1和2都有值且都能转换成字符串进行连接<br>计算出需要连接的总长度tl<br>如果合并后是短字符串创建短字符串ts<br>如果是长字符串创建长字符串对象并拷贝实际字符串值到新建的ts中</li></ol><h3 id="分支和跳转"><a href="#分支和跳转" class="headerlink" title="分支和跳转"></a>分支和跳转</h3><p><strong>jump</strong><br>jump指令是有<code>dojump宏来实现的</code><br>指令的Bx部分指明了跳转的偏移量, A部分是标记位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OP_JMP,<span class="comment">/*A sBxpc+=sBx; if (A) close all upvalues &gt;= R(A - 1)*/</span></span><br><span class="line"><span class="comment">/* execute a jump instruction */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dojump(ci,i,e) \</span></span><br><span class="line">  &#123; <span class="keyword">int</span> a = GETARG_A(i); \</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="number">0</span>) luaF_close(L, ci-&gt;u.l.base + a - <span class="number">1</span>); \</span><br><span class="line">    ci-&gt;u.l.savedpc += GETARG_sBx(i) + e; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 Lua5.1以前，JMP操作并无这个职责，它仅仅修改savedpc。但Lua5.1有另一个操作码CLOSE。<br>若JMP操作会跳出一个代码块时，就生成一条CLOSE操作的指令来调用luaF_close。<br>CLOSE操作总是伴随着JMP，Lua5.2对虚拟机指令集做了优化，去掉了CLOSE，把这个操作合并到了JMP中。</p></blockquote><p><strong>分支</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OP_EQ,<span class="comment">/*A B Cif ((RK(B) == RK(C)) ~= A) then pc++*/</span></span><br><span class="line">OP_LT,<span class="comment">/*A B Cif ((RK(B) &lt;  RK(C)) ~= A) then pc++*/</span></span><br><span class="line">OP_LE,<span class="comment">/*A B Cif ((RK(B) &lt;= RK(C)) ~= A) then pc++*/</span></span><br><span class="line"></span><br><span class="line">OP_TEST,<span class="comment">/*A Cif not (R(A) &lt;=&gt; C) then pc++*/</span></span><br><span class="line">OP_TESTSET,<span class="comment">/*A B Cif (R(B) &lt;=&gt; C) then R(A) := R(B) else pc++*/</span></span><br></pre></td></tr></table></figure></p><p>这几个逻辑类似, 都有对应的API, 直接调用进行比较即可</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p><strong>OP_CALL</strong><br>B: 函数参数个数, 为0代表参数不固定, 不为0参数为B-1个<br>C: 返回值个数, 为0代表返回值不固定, 不为0返回值为C-1个<br>等函数调用原理研究透彻再来解析</p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码10-lopcodes解析</title>
      <link href="2019/01/29/lua/lua%E6%BA%90%E7%A0%8110-lopcodes%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/29/lua/lua%E6%BA%90%E7%A0%8110-lopcodes%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机指令格式"><a href="#虚拟机指令格式" class="headerlink" title="虚拟机指令格式"></a>虚拟机指令格式</h2><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fzobfkvum3j30jh05mwew.jpg" alt></p><p>虚拟机的指令总共有四种<br><code>ABC</code>, <code>ABx</code>, <code>AsBx</code>, <code>Ax</code></p><p><strong>基础宏</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_C9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_B9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_Bx(SIZE_C + SIZE_B)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_A8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_Ax(SIZE_C + SIZE_B + SIZE_A)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_OP6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POS_OP0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POS_A(POS_OP + SIZE_OP)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POS_C(POS_A + SIZE_A)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POS_B(POS_C + SIZE_C)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POS_BxPOS_C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POS_AxPOS_A</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARG_Bx        ((1&lt;&lt;SIZE_Bx)-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARG_sBx        (MAXARG_Bx&gt;&gt;1)         <span class="comment">/* 'sBx' is signed */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARG_Ax((1&lt;&lt;SIZE_Ax)-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARG_A        ((1&lt;&lt;SIZE_A)-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARG_B        ((1&lt;&lt;SIZE_B)-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARG_C        ((1&lt;&lt;SIZE_C)-1)</span></span><br></pre></td></tr></table></figure></p><p>就是<br><code>SIZE</code>类: 各个部分的比特数<br><code>POS</code>类: 各个部分的开始位置, 从0开始<br><code>MAXARG</code>类: 每个部分所能表示的最大数字</p><p><strong>get, set宏</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* creates a mask with 'n' 1 bits at position 'p' */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MASK1(n,p)((~((~(Instruction)0)&lt;&lt;(n)))&lt;&lt;(p))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* creates a mask with 'n' 0 bits at position 'p' */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MASK0(n,p)(~MASK1(n,p))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** the following macros help to manipulate instructions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_OPCODE(i)(cast(OpCode, ((i)&gt;&gt;POS_OP) &amp; MASK1(SIZE_OP,0)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_OPCODE(i,o)((i) = (((i)&amp;MASK0(SIZE_OP,POS_OP)) | \</span></span><br><span class="line">((cast(Instruction, o)&lt;&lt;POS_OP)&amp;MASK1(SIZE_OP,POS_OP))))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getarg(i,pos,size)(cast(int, ((i)&gt;&gt;pos) &amp; MASK1(size,0)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> setarg(i,v,pos,size)((i) = (((i)&amp;MASK0(size,pos)) | \</span></span><br><span class="line">                ((cast(Instruction, v)&lt;&lt;pos)&amp;MASK1(size,pos))))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GETARG_A(i)getarg(i, POS_A, SIZE_A)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETARG_A(i,v)setarg(i, v, POS_A, SIZE_A)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GETARG_B(i)getarg(i, POS_B, SIZE_B)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETARG_B(i,v)setarg(i, v, POS_B, SIZE_B)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GETARG_C(i)getarg(i, POS_C, SIZE_C)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETARG_C(i,v)setarg(i, v, POS_C, SIZE_C)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GETARG_Bx(i)getarg(i, POS_Bx, SIZE_Bx)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETARG_Bx(i,v)setarg(i, v, POS_Bx, SIZE_Bx)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GETARG_Ax(i)getarg(i, POS_Ax, SIZE_Ax)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETARG_Ax(i,v)setarg(i, v, POS_Ax, SIZE_Ax)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GETARG_sBx(i)(GETARG_Bx(i)-MAXARG_sBx)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETARG_sBx(i,b)SETARG_Bx((i),cast(unsigned int, (b)+MAXARG_sBx))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE_ABC(o,a,b,c)((cast(Instruction, o)&lt;&lt;POS_OP) \</span></span><br><span class="line">| (cast(Instruction, a)&lt;&lt;POS_A) \</span><br><span class="line">| (cast(Instruction, b)&lt;&lt;POS_B) \</span><br><span class="line">| (cast(Instruction, c)&lt;&lt;POS_C))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE_ABx(o,a,bc)((cast(Instruction, o)&lt;&lt;POS_OP) \</span></span><br><span class="line">| (cast(Instruction, a)&lt;&lt;POS_A) \</span><br><span class="line">| (cast(Instruction, bc)&lt;&lt;POS_Bx))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE_Ax(o,a)((cast(Instruction, o)&lt;&lt;POS_OP) \</span></span><br><span class="line">| (cast(Instruction, a)&lt;&lt;POS_Ax))</span><br></pre></td></tr></table></figure></p><p><code>MASK1</code>是在p位置开始生成n个1其余位置是0, <code>MASK0</code>正好相反<br>其余各个宏的功能名字上就写的很直白了</p><h2 id="luaP-opmodes"><a href="#luaP-opmodes" class="headerlink" title="luaP_opmodes"></a>luaP_opmodes</h2><p>这是一个和指令数目大小相同的数组, 使用8个比特标记了每条指令的信息<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> OpArgMask &#123;</span><br><span class="line">  OpArgN,  <span class="comment">/* argument is not used */</span></span><br><span class="line">  OpArgU,  <span class="comment">/* argument is used */</span></span><br><span class="line">  OpArgR,  <span class="comment">/* argument is a register or a jump offset */</span></span><br><span class="line">  OpArgK   <span class="comment">/* argument is a constant or register/constant */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>以上4项是B和C在一条指令中的状态<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> OpMode &#123;iABC, iABx, iAsBx, iAx&#125;;  <span class="comment">/* basic instruction format */</span></span><br></pre></td></tr></table></figure></p><p>这4个是指令的四种格式, 就是开头的图片的标记</p><ol><li>bits 0-1: op mode, 就是指令的4种格式</li><li>bits 2-3: C arg mode</li><li>bits 4-5: B arg mode</li><li>bit 6: instruction set register A</li><li>bit 7: operator is a test (next instruction must be a jump)</li></ol><p>第6位表示这个指令是否会修改寄存器A, 第7位标记当前指令用来检测, 下一条指令必定是跳转</p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码9-lfunc解析</title>
      <link href="2019/01/28/lua/lua%E6%BA%90%E7%A0%819-lfunc%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/28/lua/lua%E6%BA%90%E7%A0%819-lfunc%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="UpVal"><a href="#UpVal" class="headerlink" title="UpVal"></a>UpVal</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UpVal</span> &#123;</span></span><br><span class="line">  TValue *v;  <span class="comment">/* points to stack or to its own value */</span></span><br><span class="line">  lu_mem refcount;  <span class="comment">/* reference counter */</span></span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span>  <span class="comment">/* (when open) */</span></span><br><span class="line">      UpVal *next;  <span class="comment">/* linked list */</span></span><br><span class="line">      <span class="keyword">int</span> touched;  <span class="comment">/* mark to avoid cycles with dead threads */</span></span><br><span class="line">    &#125; open;</span><br><span class="line">    TValue value;  <span class="comment">/* the value (when closed) */</span></span><br><span class="line">  &#125; u;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> upisopen(up)((up)-&gt;v != &amp;(up)-&gt;u.value)</span></span><br></pre></td></tr></table></figure><p>upvalue有两种存在状态, 一种是open, 一种是close<br>open: 当前upvalue存在于L的数据栈上<br>close: 当前upvalue已经不在L的数据栈上了, 数据被移动到了UpVal结构体内部</p><p>当开放的时候UpVal的v指向的是数据栈的位置, 关闭后指向了union中的value<br>所以<code>upisopen</code>的实现原理就是检测v指向的位置是否是内部的value</p><p>由于next链表只需要在开放的时候使用, 为了节省空间使用了共用体</p><h2 id="Lclosure"><a href="#Lclosure" class="headerlink" title="Lclosure"></a>Lclosure</h2><p>lua的闭包</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ClosureHeader \</span></span><br><span class="line">CommonHeader; lu_byte nupvalues; GCObject *gclist</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LClosure</span> &#123;</span></span><br><span class="line">  ClosureHeader;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Proto</span> *<span class="title">p</span>;</span></span><br><span class="line">  UpVal *upvals[<span class="number">1</span>];  <span class="comment">/* list of upvalues */</span></span><br><span class="line">&#125; LClosure;</span><br></pre></td></tr></table></figure><p><code>nupvalues</code>存放的是这个闭包<code>upvalue</code>的个数<br><code>upvals</code>是一个指针数组, 指向所有<code>upvalue</code><br>这里首先申请一个指针的空间<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sizeLclosure(n)(cast(int, sizeof(LClosure)) + \</span></span><br><span class="line">                         cast(<span class="keyword">int</span>, <span class="keyword">sizeof</span>(TValue *)*((n)<span class="number">-1</span>)))</span><br></pre></td></tr></table></figure></p><p>这个宏传入了n是<code>upvalue</code>的个数, 一个<code>Lclosure</code>的大小是<br><code>sizeof(LClosure) + sizeof(TValue *) * (n-1)</code><br>之所以要减一,是因为在<code>LClosure</code>中已经申请了一个大小的指针数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LClosure *<span class="title">luaF_newLclosure</span> <span class="params">(lua_State *L, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  GCObject *o = luaC_newobj(L, LUA_TLCL, sizeLclosure(n));</span><br><span class="line">  LClosure *c = gco2lcl(o);</span><br><span class="line">  c-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">  c-&gt;nupvalues = cast_byte(n);</span><br><span class="line">  <span class="keyword">while</span> (n--) c-&gt;upvals[n] = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>申请了<code>LClosure</code>的空间, 对<code>Proto</code>和所有<code>upvalue</code>初始化并返回这个指针</p><h2 id="findupval"><a href="#findupval" class="headerlink" title="findupval"></a>findupval</h2><ol><li>首先从<code>L-&gt;openupval</code>链表中找到传入的<code>UpVal</code></li><li>如果在以上链表中找不到新建一个</li><li>将输入的<code>TValue</code>包装成<code>Upval</code>为uv</li><li>令uv串入<code>L-&gt;openupval</code>的头部</li><li>返回新创建的uv</li></ol><h2 id="initupvals"><a href="#initupvals" class="headerlink" title="initupvals"></a>initupvals</h2><p>输入<code>LClosure *cl</code><br>对这个cl的所有<code>upvalue</code>申请空间,并让<code>cl-&gt;upvals</code><br>指针数组指向新申请的空间<br>新创建的<code>upvalue</code>都是关闭状态的</p><h2 id="luaF-close"><a href="#luaF-close" class="headerlink" title="luaF_close"></a>luaF_close</h2><p>传入一个栈上位置, 将传入位置之后的所有的在openupval链表上的upval<br>关闭, 并移动值到内部的<code>value</code>字段</p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码8-lstate解析</title>
      <link href="2019/01/28/lua/lua%E6%BA%90%E7%A0%818-lstate%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/28/lua/lua%E6%BA%90%E7%A0%818-lstate%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="lua-State的详细解释"><a href="#lua-State的详细解释" class="headerlink" title="lua_State的详细解释"></a>lua_State的详细解释</h2><p><a href="https://www.jianshu.com/p/f415697fd952" target="_blank" rel="noopener">简书文章</a></p><p>lua源码中定义的结构为了字节对齐打乱了顺序<br>根据功能对<code>lua_State</code>进行分组, 如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lua_State</span> &#123;</span></span><br><span class="line">  CommonHeader;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1 </span></span><br><span class="line">  global_State *l_G;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  lu_byte status;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3 </span></span><br><span class="line">  <span class="keyword">const</span> Instruction *oldpc;  <span class="comment">/* last pc traced */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4 Data Stack: [stak,...,top,...,stack_last], length is stacksize</span></span><br><span class="line">  <span class="keyword">int</span> stacksize;</span><br><span class="line">  StkId top;                 <span class="comment">/* first free slot in the stack */</span></span><br><span class="line">  StkId <span class="built_in">stack</span>;               <span class="comment">/* stack base */</span></span><br><span class="line">  StkId stack_last;          <span class="comment">/* last free slot in the stack */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 5 Call Stack</span></span><br><span class="line">  CallInfo base_ci;          <span class="comment">/* CallInfo for first level (C calling Lua) */</span>  </span><br><span class="line">  CallInfo *ci;              <span class="comment">/* call info for current function */</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">unsigned</span> short nCcalls;    <span class="comment">/* number of nested C calls */</span></span><br><span class="line">  <span class="keyword">unsigned</span> short nny;        <span class="comment">/* number of non-yieldable calls in stack */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6 Up Value</span></span><br><span class="line">  UpVal *openupval;          <span class="comment">/* list of open upvalues in this stack */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">lua_State</span> *<span class="title">twups</span>;</span>   <span class="comment">/* list of threads with open upvalues */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7 Recover</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">lua_longjmp</span> *<span class="title">errorJmp</span>;</span>  <span class="comment">/* current error recover point */</span></span><br><span class="line">  <span class="keyword">ptrdiff_t</span> errfunc;  <span class="comment">/* current error handling function (stack index) */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 8 Hook for Debug</span></span><br><span class="line">  lua_Hook hook;</span><br><span class="line">  <span class="keyword">int</span> basehookcount;</span><br><span class="line">  <span class="keyword">int</span> hookcount;</span><br><span class="line">  lu_byte hookmask;</span><br><span class="line">  lu_byte allowhook;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 9</span></span><br><span class="line">  GCObject *gclist;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="lua栈结构"><a href="#lua栈结构" class="headerlink" title="lua栈结构"></a>lua栈结构</h2><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fzmjh19d59j30md0eugml.jpg" alt></p><p>申请了一块栈空间从<code>stack</code>到<code>stack_last</code><br><code>top</code>标记栈顶, 最初指向<code>stack</code>位置, 随着元素的进入<code>top</code>不断后移</p><p><strong>callinfo</strong><br>使用一个双向链表存储, 这个双向链表具有头结点<br><code>L-&gt;ci</code>就可以得到<code>callinfo</code>的头结点</p><h2 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h2><p>首先分析<code>static</code>修饰的文件作用域函数, 这些函数是其他公开函数的基础</p><p><strong>stack_init</strong><br>用来对<code>lua_state</code>的栈进行初始化<br>初始化之后的内存结构<br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fzmk1o27uaj30wx0ieq4i.jpg" alt></p><ol><li><code>L-&gt;top</code> 向后移动了一位</li><li><code>L-&gt;ci</code> 指向了<code>base_ci</code></li><li><code>ci-&gt;func</code> 指向栈中第一个元素</li><li><code>ci-&gt;top</code> 指向<code>lua_State</code>的top指针之后的<code>LUA_MINSTACK</code>位置</li></ol><p><strong>luaE_freeCI</strong><br><code>callinfo</code>链是一个带头节点的链表<br>释放<code>callinfo</code>的空间是保留头释放其余所有节点</p><p><strong>luaE_shrinkCI</strong><br>去掉<code>callinfo</code>链的一半节点(头节点的下一个节点去掉,隔一个去掉一个)<br>重新串联<code>callinfo</code>链表</p><p><strong>freestack</strong></p><ol><li>释放<code>callinfo</code>链表</li><li>释放<code>stack</code>空间</li></ol><p><strong>f_luaopen</strong></p><ol><li>初始化<code>stack</code></li><li>初始化<code>registry</code></li><li>初始化字符串缓存</li><li>初始化<code>tag method</code></li><li>初始化词法分析器</li></ol><p><strong>preinit_thread</strong><br>这个函数是创建L时候最先被调用的<br>传入g和L, 设置L的g<br>初始化L的所有值</p><h2 id="newstate"><a href="#newstate" class="headerlink" title="newstate"></a>newstate</h2><p>传入内存分配函数</p><ol><li>使用内存分配函数f分配LG的空间</li><li>解构LG, 为L和G赋值</li><li>设置L的类型<code>tt</code></li><li>调用<code>preinit_thread</code>初始化L的各项参数</li><li>初始化G, <code>seed</code>是随机数种子</li></ol>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码8-lua标准库解析</title>
      <link href="2019/01/28/lua/lua%E6%BA%90%E7%A0%81-lua%E6%A0%87%E5%87%86%E5%BA%93%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/28/lua/lua%E6%BA%90%E7%A0%81-lua%E6%A0%87%E5%87%86%E5%BA%93%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="标准库简介"><a href="#标准库简介" class="headerlink" title="标准库简介"></a>标准库简介</h2><p>Lua标准库提供了一组丰富的函数，这些函数直接使用C语言API实现，并使用Lua编程语言构建。<br>这些库提供Lua编程语言中的服务以及文件和数据库操作之外的服务。</p><ul><li>基本库，包括协程子库</li><li>模块库</li><li>字符串操作</li><li>表操作</li><li>数学库</li><li>文件输入和输出</li><li>操作系统设施</li><li>调试工具</li></ul><h2 id="lualib-h"><a href="#lualib-h" class="headerlink" title="lualib.h"></a>lualib.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_base)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_COLIBNAME<span class="meta-string">"coroutine"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_coroutine)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TABLIBNAME<span class="meta-string">"table"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_table)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_IOLIBNAME<span class="meta-string">"io"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_io)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_OSLIBNAME<span class="meta-string">"os"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_os)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_STRLIBNAME<span class="meta-string">"string"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_string)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_UTF8LIBNAME<span class="meta-string">"utf8"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_utf8)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_BITLIBNAME<span class="meta-string">"bit32"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_bit32)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_MATHLIBNAME<span class="meta-string">"math"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_math)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_DBLIBNAME<span class="meta-string">"debug"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_debug)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_LOADLIBNAME<span class="meta-string">"package"</span></span></span><br><span class="line"><span class="function">LUAMOD_API <span class="title">int</span> <span class="params">(luaopen_package)</span> <span class="params">(lua_State *L)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* open all previous libraries */</span></span><br><span class="line"><span class="function">LUALIB_API <span class="title">void</span> <span class="params">(luaL_openlibs)</span> <span class="params">(lua_State *L)</span></span>;</span><br></pre></td></tr></table></figure><p>定义了以上基本库的名字以及加载这些库的函数声明</p><h2 id="linit-c"><a href="#linit-c" class="headerlink" title="linit.c"></a>linit.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> luaL_Reg loadedlibs[] = &#123;</span><br><span class="line">  &#123;<span class="string">"_G"</span>, luaopen_base&#125;,</span><br><span class="line">  &#123;LUA_LOADLIBNAME, luaopen_package&#125;,</span><br><span class="line">  &#123;LUA_COLIBNAME, luaopen_coroutine&#125;,</span><br><span class="line">  &#123;LUA_TABLIBNAME, luaopen_table&#125;,</span><br><span class="line">  &#123;LUA_IOLIBNAME, luaopen_io&#125;,</span><br><span class="line">  &#123;LUA_OSLIBNAME, luaopen_os&#125;,</span><br><span class="line">  &#123;LUA_STRLIBNAME, luaopen_string&#125;,</span><br><span class="line">  &#123;LUA_MATHLIBNAME, luaopen_math&#125;,</span><br><span class="line">  &#123;LUA_UTF8LIBNAME, luaopen_utf8&#125;,</span><br><span class="line">  &#123;LUA_DBLIBNAME, luaopen_debug&#125;,</span><br><span class="line">#<span class="keyword">if</span> defined(LUA_COMPAT_BITLIB)</span><br><span class="line">  &#123;LUA_BITLIBNAME, luaopen_bit32&#125;,</span><br><span class="line">#endif</span><br><span class="line">  &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是所有库名和库加载函数映射关系</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LUALIB_API <span class="keyword">void</span> <span class="title">luaL_openlibs</span> <span class="params">(lua_State *L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> luaL_Reg *lib;</span><br><span class="line">  <span class="comment">/* "require" functions from 'loadedlibs' and set results to global table */</span></span><br><span class="line">  <span class="keyword">for</span> (lib = loadedlibs; lib-&gt;func; lib++) &#123;</span><br><span class="line">    luaL_requiref(L, lib-&gt;name, lib-&gt;func, <span class="number">1</span>);</span><br><span class="line">    lua_pop(L, <span class="number">1</span>);  <span class="comment">/* remove lib */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实现了<code>luaL_openlibs</code>函数, 根据上面的映射关系<br>调用所有的库加载函数</p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码8-lbaselib解析</title>
      <link href="2019/01/28/lua/lua%E6%BA%90%E7%A0%81-lbaselib%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/28/lua/lua%E6%BA%90%E7%A0%81-lbaselib%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>###</p><h2 id="基本库"><a href="#基本库" class="headerlink" title="基本库"></a>基本库</h2>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码7-ltable解析</title>
      <link href="2019/01/26/lua/lua%E6%BA%90%E7%A0%817-ltable%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/26/lua/lua%E6%BA%90%E7%A0%817-ltable%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="table的结构"><a href="#table的结构" class="headerlink" title="table的结构"></a>table的结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> TKey &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    TValuefields;</span><br><span class="line">    <span class="keyword">int</span> next;  <span class="comment">/* for chaining (offset for next node) */</span></span><br><span class="line">  &#125; nk;</span><br><span class="line">  TValue tvk;</span><br><span class="line">&#125; TKey;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  TValue i_val;</span><br><span class="line">  TKey i_key;</span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Table</span> &#123;</span></span><br><span class="line">  CommonHeader;</span><br><span class="line">  lu_byte flags;  <span class="comment">/* 1&lt;&lt;p means tagmethod(p) is not present */</span></span><br><span class="line">  lu_byte lsizenode;  <span class="comment">/* log2 of size of 'node' array */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> sizearray;  <span class="comment">/* size of 'array' array */</span></span><br><span class="line">  TValue *<span class="built_in">array</span>;  <span class="comment">/* array part */</span></span><br><span class="line">  Node *node;</span><br><span class="line">  Node *lastfree;  <span class="comment">/* any free position is before this position */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Table</span> *<span class="title">metatable</span>;</span></span><br><span class="line">  GCObject *gclist;</span><br><span class="line">&#125; Table;</span><br></pre></td></tr></table></figure><p><strong>结构图</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fzk0mjhvfpj30p50ijwfr.jpg" alt></p><a id="more"></a><p><strong>Table</strong><br>分为<code>array</code>和<code>hash表</code>两部分</p><ol><li>array: 使用数组存储, 表示的是<code>Table</code>的数组部分</li><li>node: 表示<code>Table</code>的哈希表部分, 这个地址指向第一个桶</li><li>lastfree: 存放最后一个桶的地址</li></ol><p><strong>TKey</strong><br><a href="https://www.cnblogs.com/dingxiaoqiang/p/8059329.html" target="_blank" rel="noopener">结构体对齐</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TKey</span> &#123;</span></span><br><span class="line">  TValue tvk;</span><br><span class="line">  <span class="keyword">int</span> next;</span><br><span class="line">&#125; TKey;</span><br></pre></td></tr></table></figure></p><p>可以这样存储, 但是为了对齐和节省空间, 使用了源码中的方式</p><p><code>TValue</code>是16个字节, 如果像上面那样定义的话<code>TKey</code>增加了4个字节又因为要按照8字节对齐所以是24字节<br>这样就浪费了因为对齐使用的4个字节<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> TKey &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    TValuefields;</span><br><span class="line">    <span class="keyword">int</span> next;  <span class="comment">/* for chaining (offset for next node) */</span></span><br><span class="line">  &#125; nk;</span><br><span class="line">  TValue tvk;</span><br><span class="line">&#125; TKey;</span><br></pre></td></tr></table></figure></p><p>如果采用这样的定义方式, 总共需要16个字节<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TValuefieldsValue value_; int tt_</span></span><br></pre></td></tr></table></figure></p><p>正好使用next占据了4个字节, 填补了浪费的对齐字节,<br>利用union的特点 <code>TValue</code>继续利用之前的12个字节,与原来是等价的<br>这样在访问<code>TValue</code>的时候依然是<code>k.tvk</code>, 只是获取next的时候需要<code>k.nk.next</code>,<br>不过这一点也被封装进了宏 <code>#define gnext(n)    ((n)-&gt;i_key.nk.next)</code></p><p><strong>Node</strong><br><code>Node</code>的定义就没什么好说的了, 定义了一个键值对</p><h2 id="hash系列宏"><a href="#hash系列宏" class="headerlink" title="hash系列宏"></a>hash系列宏</h2><p><strong>hashpow2</strong><br>hashpow2(t, n) t是table, n是hash值. 功能就是根据hash值得到table里哈希表对应的元素</p><p><strong>hashstr</strong><br>这个宏是针对短字符串的, 调用hashpow2, 传入的hash值就是<code>str-&gt;hash</code></p><p><strong>hashboolean, hashint</strong><br>hash值都是直接传入hashpow2, 没有什么多余操作</p><p><strong>hashmod</strong><br>hashmod(t,n) 与hashpow2功能类似,但是取余运算时2的指数的数减1,<br>由于指针等数据都和2的指数有关很容易冲突,所以利用这种方式来减少冲突</p><p><strong>hashpointer</strong><br>内部调用了<code>hashmod</code>传入的<code>hash</code>值是将指针强转成<code>uint</code>的值</p><h2 id="序列相关-findindex"><a href="#序列相关-findindex" class="headerlink" title="序列相关(findindex)"></a>序列相关(findindex)</h2><p><strong>主要功能</strong><br>输入<code>table</code>和<code>key</code>返回<code>value</code>的序号</p><ol><li>搜索<code>array</code>区域<br>利用<code>arrayindex</code>函数</li><li>搜索<code>hash</code>区域<br>利用<code>mainposition</code>函数, 得到桶内第一个元素<br>遍历这个链, 如果找不到直接<code>abort</code>退出<br>因为<code>luaG_runerror</code>中调用了<code>abort</code></li></ol><p>哈希部分的存储不是通常的桶结构, 是提前申请好的一个数组<br><code>next</code>代表的是下一个元素的相对位置</p><p><strong>arrayindex</strong><br>实质就是将<code>TValue</code>转化成一个<code>unsigned int</code>返回<br>不能转换就返回0</p><p><strong>mainposition</strong><br>针对不同的类型计算哈希值, 然后取得对应哈希值的桶的头<code>Node</code></p><h2 id="new-free相关函数"><a href="#new-free相关函数" class="headerlink" title="new,free相关函数"></a>new,free相关函数</h2><p><strong>luaH_new</strong><br>功能很简单就是创建一个表,<br><code>array</code>部分和<code>hash</code>部分大小都是0<br><strong>luaH_free</strong><br>释放<code>array</code>部分和<code>hash</code>部分的内存<br><strong>getfreepos</strong><br>从<code>lastfree</code>开始向前找一个key为nil的Node, 返回这个Node<br>如果找不到返回<code>NULL</code><br><strong>luaH_newkey</strong><br>流程图<br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fzm5bmyskrj30pe1070uh.jpg" alt></p><h2 id="luaH-get系列"><a href="#luaH-get系列" class="headerlink" title="luaH_get系列"></a>luaH_get系列</h2><p><strong>luaH_getint</strong><br><em>根据整数key返回t中的TValue</em><br>传入<code>lua_Integer key</code><br>如果<code>key</code>在<code>array</code>中返回<code>t-&gt;array[key-1]</code><br>如果<code>key</code>在<code>hash</code>中查询这条链, 找到返回值<br>找不到返回<code>luaO_nilobject</code> 这个全局共享的一个<code>TValue</code>地址</p><p><strong>luaH_getshortstr</strong><br>与<code>getint</code>类似, 但是不需要到<code>array</code>中进行查询<br>因为短字符串只会存在于<code>hash</code>部分</p><p><strong>getgeneric</strong><br>通用的get函数, 适用于只在<code>hash</code>部分进行查询的<code>TValue</code></p><p><strong>luaH_getstr</strong><br>综合了上面两个函数, 区分长短字符串分别进行查询</p><p><strong>luaH_get</strong></p><ol><li>shrstr: 直接调用<code>getshortstr</code>短字符串函数</li><li>numint: 直接调用<code>getint</code>函数</li><li>nil: 直接返回全局<code>nilobject</code></li><li>numflt: 如果可以转成整数使用<code>getint</code>, 否则调用<code>getgeneric</code></li><li>其余类型: 使用<code>getgeneric</code></li></ol><h3 id="luaH-getn-获取table的长度"><a href="#luaH-getn-获取table的长度" class="headerlink" title="luaH_getn 获取table的长度"></a>luaH_getn 获取table的长度</h3><p>获取table长度总共有三种情况</p><ol><li>有数组部分, 且数组最后一位是nil<br>这种情况对数组部分进行二分查找<br>例如<code>{1,nil,3,nil}</code>, j为右侧游标是数组长度4指向最后一个nil, i为0 指向隐藏位置0即1之前的位置(假设序号从1开始)<br>逐渐靠近最终i指向1,j指向1之后的nil,所以i为1返回i</li><li><p>没有数组部分或数组最后一位不是nil 并且不存在<code>hash</code>部分<br>很简单的操作直接返回数组size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> j;  <span class="comment">/* that is easy... */</span></span><br></pre></td></tr></table></figure><p><em>作者也是这么说(tu)的(cao)</em></p></li><li><p>没有数组部分或数组最后一位不是nil 且存在<code>hash</code>部分<br>这个也是二分查找, 不过初始i就是数组的size了, j是i加1之后的值<br>如果加1之后能够在hash部分查找到值的话就不断对j翻倍直到找到不能查找到值得一个j<br>现在i和j已经具备,继续按照上述的二分法查找<br>例如:<br> {1,nil,3,qs = 19891103}<br> i=3 j=4, j与i的差值小于1不需要二分直接返回i为3</p><p> {1,2,3,[4] = 4}<br> i=3 j=8  初始j=4由于获取4的值不为nil 变成8<br> i=3 j=5  (3+8)/2 为5 是nil j设置为5<br> i=4 j=5  (3+5)/2 为4 不是nil i设置为4<br> 相差为1直接返回i为4<br> 这个例子中我发现了[4]=4 实际的存储key类型就是整数,但是单独划分在了hash部分<br><a href="https://blog.csdn.net/ball32109/article/details/44904253" target="_blank" rel="noopener">详细解读</a></p></li></ol><h2 id="luaH-set系列"><a href="#luaH-set系列" class="headerlink" title="luaH_set系列"></a>luaH_set系列</h2><p><strong>luaH_set</strong><br>传入<code>TValue *key</code><br>返回这个key对应的value指针<br>如果不存在这个key就会新建key</p><p><strong>luaH_setint</strong><br>传入<code>lua_Integer key</code>和<code>TValue *value</code><br>在<code>table</code>中如果存在这个key就修改对应的值<br>否则就创建这个key,并设置value<br>创建是调用了<code>luaH_newkey</code></p><h2 id="Rehash"><a href="#Rehash" class="headerlink" title="Rehash"></a>Rehash</h2><h3 id="computesizes"><a href="#computesizes" class="headerlink" title="computesizes"></a>computesizes</h3><p><strong>参数解读</strong><br>传入两个参数<code>unsigned int nums[]</code> 和 <code>unsigned int *pna</code><br><code>nums[i]</code>中存储的是2^(i-1)到2^i之间表中元素的个数<br>例如一个表有<code>key</code> 1,2,3,20, 那么<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nums[0] = 1(1落在此区间)</span><br><span class="line">nums[1] = 1(2落在此区间)</span><br><span class="line">nums[2] = 1(3落在此区间)</span><br><span class="line">nums[3] = 0</span><br><span class="line">nums[4] = 0</span><br><span class="line">nums[5] = 1(20落在此区间)</span><br><span class="line">nums[6] = 0</span><br></pre></td></tr></table></figure></p><p><code>*pna</code>是当前数组元素的个数<br><strong>函数功能</strong><br>返回一个最优值, 所谓最优值是<code>table</code>的数组部分的最优大小<br>  最优值满足以下条件:</p><ol><li>2的指数</li><li>元素占用率大于50%</li><li>满足前两个条件下的最大值<br>修改<code>pna</code>的值为当前的数组占用元素个数</li></ol><h3 id="countint"><a href="#countint" class="headerlink" title="countint"></a>countint</h3><p>这个函数就是用来提供<code>computesizes</code>中<code>nums</code>参数的<br>传入一个<code>key</code>如果这个<code>key</code>是整数型就对它向上取2的对数<br>在<code>nums</code>的相应位置加1<br>返回值: 1代表执行了操作, 0未进行操作</p><h3 id="numusearray-numusehash"><a href="#numusearray-numusehash" class="headerlink" title="numusearray numusehash"></a>numusearray numusehash</h3><p><strong>numusearray</strong><br>返回<code>array</code>部分的使用量, 设置<code>nums</code>数组的值</p><p><strong>numusehash</strong><br>返回<code>hash</code>部分的使用(非nil)数量<br>修改<code>*pna</code>的值为<code>hash</code>部分数字键的数量<br>修改<code>*nums</code>的数量</p><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><p><strong>函数功能</strong><br>输入一个新key为<code>ek</code><br>对当前t的数组部分,哈希部分以及新加的<code>ek</code>重新统计<br><code>nums</code>数组各项值就是三个部分所有可以变成整数键的以2的指数阶梯统计的个数<br>  在<code>computesizes</code>中有介绍<br><code>na</code>就是所有可以存放到<code>array</code>部分的元素个数 <code>键可以转换成整数的元素</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* compute new size for array part */</span></span><br><span class="line">asize = computesizes(nums, &amp;na);</span><br><span class="line"><span class="comment">/* resize the table to new computed sizes */</span></span><br><span class="line">luaH_resize(L, t, asize, totaluse - na);</span><br></pre></td></tr></table></figure><p>接下来这两句,根据<code>nums</code>和<code>na</code>对数组部分进行最优计算, 得到新的<code>array</code>大小<br>更新<code>na</code>为<code>array</code>的使用量<br>最后重新分配数组和哈希部分的大小<br>数组大小: 显然是asize<br>哈希大小: 总使用量减去数组部分的使用量,<br>  可能会有疑问这样哈希部分不就没有余量了吗, 而且大小不一定满足2的指数?<br>  在<code>luaH_resize</code>中已经对哈希部分大小进行了处理, 如果不是2的指数向上取到最近的2的指数</p><h3 id="setarrayvector-setnodevector"><a href="#setarrayvector-setnodevector" class="headerlink" title="setarrayvector setnodevector"></a>setarrayvector setnodevector</h3><p><strong>setarrayvector</strong><br>这个就是对<code>t-&gt;array</code>重新分配内存, 修改<code>t-&gt;sizearray</code>的值<br>初始化分配的空间为<code>nil</code></p><p><strong>setnodevector</strong></p><ol><li>传入的size为0 将<code>t-&gt;node</code>设置为<code>dummynode</code> <code>lsizenode</code>为0, <code>lastfree</code>为<code>NULL</code></li><li>size不为0, 检测size是否越界, 是否超过2^MAXHBITS</li><li>分配内存并且将key, value都设置为nil</li><li>设置<code>lsizenode</code>为size, <code>lastfree</code>为第size个node<br>注意点:<br>如果传入size不是2的指数, 会被转换成2的指数<br>wgkey, gkey有区别,前者可以进行修改</li></ol><h3 id="luaH-resize"><a href="#luaH-resize" class="headerlink" title="luaH_resize"></a>luaH_resize</h3><p><strong>主要功能</strong><br>为table重新分配数组部分和哈希部分的大小<br><strong>流程</strong></p><ol><li>保存旧数组大小, 旧哈希大小, 旧哈希指针</li><li>如果数组部分扩大直接重新分配大小</li><li>重新分配哈希部分内存</li><li>如果数组部分缩小将缩小部分存到哈希部分, 之后重新分配数组内存</li><li>拷贝旧哈希值到新分配的空间</li><li>释放旧哈希部分空间</li></ol>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码6-lstring解析</title>
      <link href="2019/01/24/lua/lua%E6%BA%90%E7%A0%816-lstring%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/24/lua/lua%E6%BA%90%E7%A0%816-lstring%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="哈希计算"><a href="#哈希计算" class="headerlink" title="哈希计算"></a>哈希计算</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAI_HASHLIMIT5</span></span><br></pre></td></tr></table></figure><p>首先是这个宏定义, 定义了对一个字符串生成hash的长度限制<br>最多不会超过<code>(2^LUAI_HASHLIMIT)</code>个字符参与hash运算</p><h3 id="哈希计算函数"><a href="#哈希计算函数" class="headerlink" title="哈希计算函数"></a>哈希计算函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求字符串的哈希值</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">luaS_hash</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">size_t</span> l, <span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> h = seed ^ cast(<span class="keyword">unsigned</span> <span class="keyword">int</span>, l);</span><br><span class="line">  <span class="comment">// 求哈希时的步长, 长度小于32的时候步长是1, 之后每翻倍步长加一</span></span><br><span class="line">  <span class="keyword">size_t</span> step = (l &gt;&gt; LUAI_HASHLIMIT) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; l &gt;= step; l -= step)</span><br><span class="line">    h ^= ((h&lt;&lt;<span class="number">5</span>) + (h&gt;&gt;<span class="number">2</span>) + cast_byte(str[l - <span class="number">1</span>]));</span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是具体运用的函数, 可以得出长度小于32步长为1,32-64步长为2之后都是类似的情况<br>也就符合了上面的结论, 参与计算的字符数不会超过<code>(2^LUAI_HASHLIMIT)</code></p><h3 id="长字符串哈希计算"><a href="#长字符串哈希计算" class="headerlink" title="长字符串哈希计算"></a>长字符串哈希计算</h3><blockquote><p>短字符串创建的时候就计算了hash值,长字符串不会立即计算,只会在需要时计算</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">luaS_hashlongstr</span> <span class="params">(TString *ts)</span> </span>&#123;</span><br><span class="line">  lua_assert(ts-&gt;tt == LUA_TLNGSTR);</span><br><span class="line">  <span class="keyword">if</span> (ts-&gt;extra == <span class="number">0</span>) &#123;  <span class="comment">/* no hash? */</span></span><br><span class="line">    ts-&gt;hash = luaS_hash(getstr(ts), ts-&gt;u.lnglen, ts-&gt;hash);</span><br><span class="line">    ts-&gt;extra = <span class="number">1</span>;  <span class="comment">/* now it has its hash */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ts-&gt;hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TString的extra字段对于长字符串来说</p><ul><li>0代表未计算hash</li><li>1代表已计算hash</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>主要是函数<strong>luaS_init</strong><br>进行的操作</p><ol><li>申请<code>string table</code>的空间</li><li>为<code>g-&gt;memerrmsg</code>设置初始值,并且令其不会被回收</li><li>令<code>g-&gt;strcache</code>的所有元素指向<code>g-&gt;memerrmsg</code></li></ol><h2 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h2><h3 id="createstrobj"><a href="#createstrobj" class="headerlink" title="createstrobj"></a>createstrobj</h3><p>内部调用了<code>luaC_newobj</code>申请了<code>字符串长度+1+sizeof(UTString)</code>的空间<br>设置了<code>tt</code>, <code>hash</code>, <code>extra</code>, 以及最后的<code>\0</code>界定结束位置<br>对于生成的<code>ts</code>对象, 还缺少拷贝的真实字符内容, 字符串长度字段, gc链的下一个地址</p><h3 id="luaS-newlstr"><a href="#luaS-newlstr" class="headerlink" title="luaS_newlstr"></a>luaS_newlstr</h3><p>通过显式的指明字符串的长度, 来创建字符串<br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fzjuk2a9scj30br0kqt95.jpg" alt></p><h3 id="internshrstr"><a href="#internshrstr" class="headerlink" title="internshrstr"></a>internshrstr</h3><p>首先, 这个函数有static标记,表示这个函数是内部函数不被外接调用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stringtable</span> &#123;</span></span><br><span class="line">  TString **hash;</span><br><span class="line">  <span class="keyword">int</span> nuse;  <span class="comment">/* number of elements */</span></span><br><span class="line">  <span class="keyword">int</span> size;</span><br><span class="line">&#125; stringtable;</span><br></pre></td></tr></table></figure></p><p><code>size</code>是桶的个数, <code>nuse</code>是这个表里面总共存在的字符串数</p><p>短字符串是存储在哈希桶内的,这个桶就是<code>g-&gt;strt.hash</code><br><code>g-&gt;strt.size</code>是这个桶的大小</p><p><strong>执行流程</strong></p><ol><li>计算哈希值h</li><li>通过哈希值h得到桶的地址</li><li>查找这个桶是否存在相同的字符串, 存在直接返回</li><li>如果nuse大于等于size重新分配表的大小(扩大一倍) <code>luaS_resize(L, g-&gt;strt.size * 2)</code></li><li>更新桶的地址</li><li>创建<code>TString</code>T对象 <code>createstrobj(L, l, LUA_TSHRSTR, h)</code></li><li>拷贝真实字符串到创建的对象地址后</li><li>修改ts的<code>shrlen</code>, 在桶的头插入这个节点, 让<code>g-&gt;strt.nuse</code>自增</li></ol><h3 id="luaS-createlngstrobj"><a href="#luaS-createlngstrobj" class="headerlink" title="luaS_createlngstrobj"></a>luaS_createlngstrobj</h3><p>内部实现直接调用了<code>createstrobj</code><br>值得注意的是需要长字符串的哈希值并没有计算,直接就存的全局随机数种子<br>而且在这个函数里没有进行实际的拷贝字符串, 是在<code>luaS_newlstr</code>中得到<code>TSring</code>对象之后才拷贝的</p><h3 id="luaS-new"><a href="#luaS-new" class="headerlink" title="luaS_new"></a>luaS_new</h3><p>这就是最终进行创建字符串函数</p><ol><li>根据地址计算哈希, 到cache中查找是否已经存在</li><li>不存在使用<code>luaS_newlstr</code>创建新字符串</li><li>往cache中添加新创建的地址, 移除多余的地址</li></ol><h2 id="其余辅助函数"><a href="#其余辅助函数" class="headerlink" title="其余辅助函数"></a>其余辅助函数</h2><h3 id="luaS-resize"><a href="#luaS-resize" class="headerlink" title="luaS_resize"></a>luaS_resize</h3><p><strong>核心算法</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tb-&gt;size; i++) &#123;  <span class="comment">/* rehash */</span></span><br><span class="line">  TString *p = tb-&gt;hash[i];</span><br><span class="line">  tb-&gt;hash[i] = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;  <span class="comment">/* for each node in the list */</span></span><br><span class="line">    TString *hnext = p-&gt;u.hnext;  <span class="comment">/* save next */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> h = lmod(p-&gt;hash, newsize);  <span class="comment">/* new position */</span></span><br><span class="line">    p-&gt;u.hnext = tb-&gt;hash[h];  <span class="comment">/* chain it */</span></span><br><span class="line">    tb-&gt;hash[h] = p;</span><br><span class="line">    p = hnext;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现的效果, 将原来size个桶的元素重新排布到newsize个桶内</p><ol><li>首先进入第0个桶, 得到桶内的第一个元素node</li><li>计算node的新h值, 就是在newsize个桶的新位置</li><li>将node插入到h桶的头</li><li>更新<code>node</code>的值为<code>node-&gt;u.hnext</code></li><li>直到将第0个桶的所有元素重新排布, 继续进行第1个桶, 直到所有桶完毕</li></ol><p><strong>扩大空间</strong><br>使用<code>luaM_reallocvector</code> 重新分配大小<br>对增加的空间赋值<code>NULL</code><br><strong>缩小空间</strong></p><p>检测<code>newsize</code>和<code>size-1</code>位置的值为<code>NULL</code><br>潜在意思就是缩小的空间的开头结尾是<code>NULL</code>, 也就是整个缩小的空间都是<code>NULL</code><br>检测完成使用<code>luaM_reallocvector</code>重新分配空间</p><h3 id="luaS-clearcache"><a href="#luaS-clearcache" class="headerlink" title="luaS_clearcache"></a>luaS_clearcache</h3><p>检测<code>g-&gt;strcache</code>中的所有元素<br>如果这个对象即将被回收, 清除<code>strcache</code>的这个位置<br>设置为一个被固定的对象, 例如<code>g-&gt;memerrmsg</code></p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码5-lobject解析</title>
      <link href="2019/01/24/lua/lua%E6%BA%90%E7%A0%815-lobject%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/24/lua/lua%E6%BA%90%E7%A0%815-lobject%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="基本类型图解"><a href="#基本类型图解" class="headerlink" title="基本类型图解"></a>基本类型图解</h2><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fzhmaeyhzrj31du0u012t.jpg" alt></p><h2 id="类型标记"><a href="#类型标记" class="headerlink" title="类型标记"></a>类型标记</h2><h3 id="lua数据类型"><a href="#lua数据类型" class="headerlink" title="lua数据类型"></a>lua数据类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TNONE(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TNIL0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TBOOLEAN1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TLIGHTUSERDATA2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TNUMBER3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TSTRING4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TTABLE5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TFUNCTION6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TUSERDATA7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TTHREAD8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_NUMTAGS9</span></span><br></pre></td></tr></table></figure><p>lua中的数据类型就是以上9种, 最后一个用来标记数据类型的总数<br><code>LUA_TNONE</code>没有计算在内</p><h3 id="使用位置"><a href="#使用位置" class="headerlink" title="使用位置"></a>使用位置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TValuefieldsValue value_; int tt_</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lua_TValue</span> &#123;</span></span><br><span class="line">  TValuefields;</span><br><span class="line">&#125; TValue;</span><br></pre></td></tr></table></figure><p>在<code>lua_TValue</code>的定义中<code>tt_</code>就是类型标记</p><h3 id="标记原理"><a href="#标记原理" class="headerlink" title="标记原理"></a>标记原理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** tags for Tagged Values have the following use of bits:</span></span><br><span class="line"><span class="comment">** bits 0-3: actual tag (a LUA_T* value)</span></span><br><span class="line"><span class="comment">** bits 4-5: variant bits</span></span><br><span class="line"><span class="comment">** bit 6: whether value is collectable</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>根据以上源码中的注释, int总共8位<br>最后4位用来标记大类型,用两位标记变体类型<br>第7位用来标记gc,最后一位空闲</p><blockquote><p>所谓变体类型就是大类型下的子类型,例如函数类型有三个变体类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** LUA_TFUNCTION variants:</span></span><br><span class="line"><span class="comment">** 0 - Lua function</span></span><br><span class="line"><span class="comment">** 1 - light C function</span></span><br><span class="line"><span class="comment">** 2 - regular C function (closure)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="进行类型位操作的相关宏"><a href="#进行类型位操作的相关宏" class="headerlink" title="进行类型位操作的相关宏"></a>进行类型位操作的相关宏</h3><h4 id="变体操作"><a href="#变体操作" class="headerlink" title="变体操作"></a>变体操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Variant tags for functions */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TLCL(LUA_TFUNCTION | (0 &lt;&lt; 4))  <span class="comment">/* Lua closure */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TLCF(LUA_TFUNCTION | (1 &lt;&lt; 4))  <span class="comment">/* light C function */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TCCL(LUA_TFUNCTION | (2 &lt;&lt; 4))  <span class="comment">/* C closure */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Variant tags for strings */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TSHRSTR(LUA_TSTRING | (0 &lt;&lt; 4))  <span class="comment">/* short strings */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TLNGSTR(LUA_TSTRING | (1 &lt;&lt; 4))  <span class="comment">/* long strings */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Variant tags for numbers */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TNUMFLT(LUA_TNUMBER | (0 &lt;&lt; 4))  <span class="comment">/* float numbers */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TNUMINT(LUA_TNUMBER | (1 &lt;&lt; 4))  <span class="comment">/* integer numbers */</span></span></span><br></pre></td></tr></table></figure><p>使用大类型数字与变体左移4位的数字或运算, 这样组合起来就确定了一种类型的最后六位<br>现在gc位还没有进行标记是0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bit mark for collectable types */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIT_ISCOLLECTABLE(1 &lt;&lt; 6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* mark a tag as collectable */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ctb(t)((t) | BIT_ISCOLLECTABLE)</span></span><br></pre></td></tr></table></figure><p>第一个宏就是用来操作gc位置<br>ctb(t)本质将输入的t返回将他的gc位设置为1的数字,是<code>collectable</code>的简写</p><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> val_(o)((o)-&gt;value_)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* raw type tag of a TValue */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rttype(o)((o)-&gt;tt_)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* tag with no variants (bits 0-3) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> novariant(x)((x) &amp; 0x0F)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* type tag of a TValue (bits 0-3 for tags + variant bits 4-5) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttype(o)(rttype(o) &amp; 0x3F)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* type tag of a TValue with no variants (bits 0-3) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttnov(o)(novariant(rttype(o)))</span></span><br></pre></td></tr></table></figure><p>除了这些还定义了一堆关于类型检测的宏, 原理就是对<code>tt_</code>属性进行位运算</p><h3 id="值设置-set系列宏"><a href="#值设置-set系列宏" class="headerlink" title="值设置,set系列宏"></a>值设置,set系列宏</h3><p>分为set(xx)value以及chg(xx)value</p><ol><li>set系列<br>设置值,并且修改类型</li><li>chg系列<br>检测类型,通过检查修改值</li></ol><hr><p><strong>缩写含义</strong>:<br>  svalue: string<br>  hvalue: table<br>  ptvalue: 除了这个地方没找到应用的地方,至少这个版本这个定义没有意义</p><h2 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TString</span> &#123;</span></span><br><span class="line">  CommonHeader;</span><br><span class="line">  lu_byte extra;  <span class="comment">/* reserved words for short strings; "has hash" for longs */</span></span><br><span class="line">  lu_byte shrlen;  <span class="comment">/* length for short strings */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> hash;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">size_t</span> lnglen;  <span class="comment">/* length for long strings */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TString</span> *<span class="title">hnext</span>;</span>  <span class="comment">/* linked list for hash table */</span></span><br><span class="line">  &#125; u;</span><br><span class="line">&#125; TString;</span><br></pre></td></tr></table></figure><p><strong>union u的理解</strong><br>lnglen: 长字符串的长度<br>*hext: hash table的下一个元素地址<br>对于长字符串不存储在hash table中所以使用union来节省空间</p><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fzhxhqoifrj315i0u0gqh.jpg" alt></p><p><strong>ts</strong>代表<strong>TString</strong> <strong>s</strong>代表<strong>String</strong></p><ul><li>tsvalue(o) 传入<code>TValue</code>得到<code>TString</code><br>value系列,都是传入<code>TValue</code>根据命名<code>ts</code>是<code>TString</code> 就是获得<code>TString</code>类型的结果</li><li>getstr(ts) 传入<code>TString</code> 强制类型转换成<code>char</code>类型, 加上<code>sizeof(UTString)</code>就得到了str的开始地址,<br>内存中字符串和这个头是存在一起的</li><li>svalue(o) 传入<code>TValue</code>, 获取到实际的字符串, 实现是<code>(char*)((GCUnion*)(o-&gt;value_.gc)-&gt;ts)+sizeof(UTString)</code><br>也是value系列的宏,获得<code>String</code>类型</li><li>tsslen(s) 传入<code>TString</code>得到字符串的长度 <code>ts</code>传入参数,<code>slen</code>字符串长度</li><li>vslen(s) 传入<code>TValue</code>得到字符串的长度 <code>v</code>传入参数,<code>slen</code>字符串长度</li></ul><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Proto</span> &#123;</span></span><br><span class="line">  CommonHeader;</span><br><span class="line">  lu_byte numparams;  <span class="comment">/* number of fixed parameters */</span></span><br><span class="line">  lu_byte is_vararg;</span><br><span class="line">  lu_byte maxstacksize;  <span class="comment">/* number of registers needed by this function */</span></span><br><span class="line">  <span class="keyword">int</span> sizeupvalues;  <span class="comment">/* size of 'upvalues' */</span></span><br><span class="line">  <span class="keyword">int</span> sizek;  <span class="comment">/* size of 'k' */</span></span><br><span class="line">  <span class="keyword">int</span> sizecode;</span><br><span class="line">  <span class="keyword">int</span> sizelineinfo;</span><br><span class="line">  <span class="keyword">int</span> sizep;  <span class="comment">/* size of 'p' */</span></span><br><span class="line">  <span class="keyword">int</span> sizelocvars;</span><br><span class="line">  <span class="keyword">int</span> linedefined;  <span class="comment">/* debug information  */</span></span><br><span class="line">  <span class="keyword">int</span> lastlinedefined;  <span class="comment">/* debug information  */</span></span><br><span class="line">  TValue *k;  <span class="comment">/* constants used by the function */</span></span><br><span class="line">  Instruction *code;  <span class="comment">/* opcodes */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Proto</span> **<span class="title">p</span>;</span>  <span class="comment">/* functions defined inside the function */</span></span><br><span class="line">  <span class="keyword">int</span> *lineinfo;  <span class="comment">/* map from opcodes to source lines (debug information) */</span></span><br><span class="line">  LocVar *locvars;  <span class="comment">/* information about local variables (debug information) */</span></span><br><span class="line">  Upvaldesc *upvalues;  <span class="comment">/* upvalue information */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LClosure</span> *<span class="title">cache</span>;</span>  <span class="comment">/* last-created closure with this prototype */</span></span><br><span class="line">  TString  *source;  <span class="comment">/* used for debug information */</span></span><br><span class="line">  GCObject *gclist;</span><br><span class="line">&#125; Proto;</span><br></pre></td></tr></table></figure><p>Proto结构体, 在文件中定义了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_TPROTOLUA_NUMTAGS<span class="comment">/* function prototypes */</span></span></span><br></pre></td></tr></table></figure></p><p>没有在<code>lua.h</code>中定义表明这是一个私有的类型, 不提供一个公开的接口</p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码4-llimits.h解析</title>
      <link href="2019/01/23/lua/lua%E6%BA%90%E7%A0%814-llimits.h%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/23/lua/lua%E6%BA%90%E7%A0%814-llimits.h%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="lu-mem与l-mem"><a href="#lu-mem与l-mem" class="headerlink" title="lu-mem与l-mem"></a>lu-mem与l-mem</h2><p>这两个用于存储<code>total memory used by lua(in bytes)</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">size_t</span> lu_mem;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> l_mem;</span><br></pre></td></tr></table></figure></p><blockquote><p><code>size_t</code>本质就是<code>unsigned int</code> <code>ptrdiff__t</code>就是<code>int</code></p></blockquote><h2 id="几个数据的最大值"><a href="#几个数据的最大值" class="headerlink" title="几个数据的最大值"></a>几个数据的最大值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* maximum value for size_t */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZET((size_t)(~(size_t)0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* maximum size visible for Lua (must be representable in a lua_Integer */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE(sizeof(size_t) &lt; sizeof(lua_Integer) ? MAX_SIZET \</span></span><br><span class="line">                          : (<span class="keyword">size_t</span>)(LUA_MAXINTEGER))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LUMEM((lu_mem)(~(lu_mem)0))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LMEM((l_mem)(MAX_LUMEM &gt;&gt; 1))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_INTINT_MAX  <span class="comment">/* maximum value of an int */</span></span></span><br></pre></td></tr></table></figure><p>无符号数的最大值直接使用<code>~</code>按位取反就可以得到,有符号最大值利用无符号数值右移一位即可</p><h2 id="point2unit"><a href="#point2unit" class="headerlink" title="point2unit"></a>point2unit</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> point2uint(p)((unsigned int)((size_t)(p) &amp; UINT_MAX))</span></span><br></pre></td></tr></table></figure><p>很明显这样将8字节的地址转换为4字节的int会有溢出,但是根据注释我们<br>可以知道这个函数只会用于hash相关地方,也就是说基本可以保证转换后数字<br>不同即可. 这种转换可以保留尾数,所以不必担心.</p><h2 id="assert系列"><a href="#assert系列" class="headerlink" title="assert系列"></a>assert系列</h2><ol><li><strong>lua_assert</strong></li><li><strong>lua_longassert</strong></li><li><strong>check_exp(c, e)</strong></li><li><strong>luai_apicheck(l,e)</strong></li><li><strong>api_check(l,e,msg)</strong></li></ol><p>一个有意思的点是<code>UNUSED</code>宏<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNUSED(x)((void)(x))</span></span><br></pre></td></tr></table></figure></p><p>一个没有作用的宏, 可以用来标记这个参数没有被使用过</p><h2 id="cast系列"><a href="#cast系列" class="headerlink" title="cast系列"></a>cast系列</h2><blockquote><p>用于类型转换<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* type casts (a macro highlights casts in the code) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cast(t, exp)((t)(exp))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cast_void(i)cast(void, (i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cast_byte(i)cast(lu_byte, (i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cast_num(i)cast(lua_Number, (i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cast_int(i)cast(int, (i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cast_uchar(i)cast(unsigned char, (i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l_castS2U(i)((lua_Unsigned)(i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l_castU2S(i)((lua_Integer)(i))</span></span><br></pre></td></tr></table></figure></p></blockquote><p>U代表<code>lua_Unsigned</code> S代表<code>lua_Integer</code></p><h2 id="string相关"><a href="#string相关" class="headerlink" title="string相关"></a>string相关</h2><p>虚拟机的指令使用<code>unsigned int</code>来存储<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAI_MAXSHORTLEN40</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINSTRTABSIZE128</span></span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRCACHE_N53</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRCACHE_M2</span></span><br></pre></td></tr></table></figure><p>字符串的缓存是用哈希表来存的,<br><code>_N</code>的意思是缓存有多少个桶, 这个数最好是质数<code>数据结构中哈希表中有说到使用质数可以有效避免冲突</code><br><code>_M</code>是这个桶的最多元素个数</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>定义了一系列锁相关的宏<br>由于都是定义了<code>(void)L</code>, 暂时不研究</p><h2 id="数学操作"><a href="#数学操作" class="headerlink" title="数学操作"></a>数学操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整除, 除法之后取整</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numidiv(L,a,b)     ((void)L, l_floor(luai_numdiv(L,a,b)))</span></span><br><span class="line"><span class="comment">// 直接计算除法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numdiv(L,a,b)      ((a)/(b))</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numadd(L,a,b)      ((a)+(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numsub(L,a,b)      ((a)-(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_nummul(L,a,b)      ((a)*(b))</span></span><br><span class="line"><span class="comment">// unm -- unary minus -- 一元减</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numunm(L,a)        (-(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numeq(a,b)         ((a)==(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numlt(a,b)         ((a)&lt;(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numle(a,b)         ((a)&lt;=(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_numisnan(a)        (!luai_numeq((a), (a)))</span></span><br></pre></td></tr></table></figure><p>NAN的实现还有疑问, 下一步源码中继续找答案</p><h2 id="强制测试"><a href="#强制测试" class="headerlink" title="强制测试"></a>强制测试</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> condmovestack(L,pre,pos)  \</span></span><br><span class="line">&#123; <span class="keyword">int</span> sz_ = (L)-&gt;stacksize; pre; luaD_reallocstack((L), sz_); pos; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> condchangemem(L,pre,pos)  \</span></span><br><span class="line">&#123; <span class="keyword">if</span> (G(L)-&gt;gcrunning) &#123; pre; luaC_fullgc(L, <span class="number">0</span>); pos; &#125; &#125;</span><br></pre></td></tr></table></figure><p>没有看明白要做的工作, 到用的时候继续理解</p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Instruction;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码3-luaconf.h解析</title>
      <link href="2019/01/22/lua/lua%E6%BA%90%E7%A0%813-luaconf.h%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/22/lua/lua%E6%BA%90%E7%A0%813-luaconf.h%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="macos平台相关"><a href="#macos平台相关" class="headerlink" title="macos平台相关"></a>macos平台相关</h2><h3 id="基础选项"><a href="#基础选项" class="headerlink" title="基础选项"></a>基础选项</h3><blockquote><p>在第一篇分析中我们得知当执行<code>make macosx</code>命令会让编译器定义宏<code>LUA_USE_MACOSX</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(LUA_USE_MACOSX)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_USE_POSIX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_USE_DLOPEN<span class="comment">/* MacOS does not need -ldl */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_USE_READLINE<span class="comment">/* needs an extra library: -lreadline */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p> 也就是说macosx平台上定义了以上三个宏</p><ol><li>POSIX(可一直操作系统接口)是一个标准用于保证软件的可移植性</li><li>DLOPEN 如果你的程序中使用dlopen、dlsym、dlclose、dlerror 显示加载动态库，需要设置链接选项 -ldl</li><li>READLINE 用于给shell添加自动补全<h3 id="路径配置"><a href="#路径配置" class="headerlink" title="路径配置"></a>路径配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_ROOT<span class="meta-string">"/usr/local/"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_LDIRLUA_ROOT <span class="meta-string">"share/lua/"</span> LUA_VDIR <span class="meta-string">"/"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_CDIRLUA_ROOT <span class="meta-string">"lib/lua/"</span> LUA_VDIR <span class="meta-string">"/"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_PATH_DEFAULT  \</span></span><br><span class="line">LUA_LDIR<span class="string">"?.lua;"</span>  LUA_LDIR<span class="string">"?/init.lua;"</span> \</span><br><span class="line">LUA_CDIR<span class="string">"?.lua;"</span>  LUA_CDIR<span class="string">"?/init.lua;"</span> \</span><br><span class="line"><span class="string">"./?.lua;"</span> <span class="string">"./?/init.lua"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_CPATH_DEFAULT \</span></span><br><span class="line">LUA_CDIR<span class="string">"?.so;"</span> LUA_CDIR<span class="string">"loadall.so;"</span> <span class="string">"./?.so"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_DIRSEP<span class="meta-string">"/"</span></span></span><br></pre></td></tr></table></figure></li></ol><p><code>LUA_DIRSEP</code>是路径的分隔符</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@@ LUA_API is a mark for all core API functions.</span></span><br><span class="line"><span class="comment">@@ LUALIB_API is a mark for all auxiliary library functions.</span></span><br><span class="line"><span class="comment">@@ LUAMOD_API is a mark for all standard library opening functions.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_APIextern</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUALIB_APILUA_API</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAMOD_APILUALIB_API</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@@ LUAI_FUNC is a mark for all extern functions that are not to be</span></span><br><span class="line"><span class="comment">** exported to outside modules.</span></span><br><span class="line"><span class="comment">@@ LUAI_DDEF and LUAI_DDEC are marks for all extern (const) variables</span></span><br><span class="line"><span class="comment">** that are not to be exported to outside modules (LUAI_DDEF for</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAI_FUNCextern</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAI_DDECLUAI_FUNC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAI_DDEF<span class="comment">/* empty */</span></span></span><br></pre></td></tr></table></figure><h2 id="数据类型相关"><a href="#数据类型相关" class="headerlink" title="数据类型相关"></a>数据类型相关</h2><h3 id="类型的宏定义"><a href="#类型的宏定义" class="headerlink" title="类型的宏定义"></a>类型的宏定义</h3><p>去除平台相关性, 在支持c99平台上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAI_BITSINT32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_INT_TYPELUA_INT_LONGLONG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LUA_FLOAT_TYPELUA_FLOAT_DOUBLE</span></span><br></pre></td></tr></table></figure><p>就是说<code>LUA_INT_TYPE</code>为<code>long long</code><br>就是说<code>LUA_FLOAT_TYPE</code>为<code>double</code></p><p><code>LUAI_UACINT</code> is the result of a ‘default argument promotion’ over a <code>lUA_INTEGER.</code></p><h3 id="l-floor的实现"><a href="#l-floor的实现" class="headerlink" title="l-floor的实现"></a>l-floor的实现</h3><p>本质就是根据<code>LUA_NUMBER</code>的类型来定义的<br>当其是float类型调用<code>floorf</code>函数<br>当其是double类型调用<code>floor</code>函数<br>当其是long double类型调用<code>floorl</code>函数</p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码2-新建一个自己的程序入口.md</title>
      <link href="2019/01/22/lua/lua%E6%BA%90%E7%A0%812-%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3/"/>
      <url>2019/01/22/lua/lua%E6%BA%90%E7%A0%812-%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lauxlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lualib.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  lua_State *L = luaL_newstate();  <span class="comment">/* create state */</span></span><br><span class="line">  luaL_openlibs(L);</span><br><span class="line">  luaL_dofile(L, <span class="string">"my.lua"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ol><li>创建全局的状态对象</li><li>加载所有的需要的lib</li><li>加载要执行的lua代码文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua源码1-从makefile开始说起.md</title>
      <link href="2018/12/21/lua/lua%E6%BA%90%E7%A0%811-%E4%BB%8Emakefile%E5%BC%80%E5%A7%8B%E8%AF%B4%E8%B5%B7/"/>
      <url>2018/12/21/lua/lua%E6%BA%90%E7%A0%811-%E4%BB%8Emakefile%E5%BC%80%E5%A7%8B%E8%AF%B4%E8%B5%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="从makefile开始说起"><a href="#从makefile开始说起" class="headerlink" title="从makefile开始说起"></a>从makefile开始说起</h2><p>源码makefile中的如下变量就是用来自定义操作的</p><blockquote><p>MYCFLAGS=<br>MYLDFLAGS=<br>MYLIBS=<br>MYOBJS=</p></blockquote><h3 id="在mac上进行编译"><a href="#在mac上进行编译" class="headerlink" title="在mac上进行编译"></a>在mac上进行编译</h3><p>在mac上使用 <code>make macosx</code> 就可以对源码进行编译了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(MAKE) $(ALL) SYSCFLAGS=<span class="string">"-DLUA_USE_MACOSX"</span> SYSLIBS=<span class="string">"-lreadline"</span> CC=cc</span></span><br></pre></td></tr></table></figure><p>阅读makefile可以发现上面的命令其实是执行了<code>make all</code> 其后指定了SYSFLAGS, SYSLIBS, CC 三个变量</p><p>注意到当直接使用<code>make</code>命令时后输出一些提示信息,这里是通过default实现的<br>default依赖于PLAT而PLAT默认正是none,也就是说默认执行了<code>make none</code>可以发现其中就是shell上输出的信息</p><h3 id="Makefile执行的过程"><a href="#Makefile执行的过程" class="headerlink" title="Makefile执行的过程"></a>Makefile执行的过程</h3><p>使用<code>make macosx</code>命令进行编译<br>实际执行了<code>make all</code>, 令<code>SYSCFLAGS=&quot;-DLUA_USE_MACOSX&quot;</code><br>设定了<code>SYSCFLAGS</code>参数之后, 就可以在gcc编译过程中并指定了编译选项<code>-DLUA_USE_MACOSX</code></p><h3 id="PHONY-的应用"><a href="#PHONY-的应用" class="headerlink" title=".PHONY 的应用"></a>.PHONY 的应用</h3><p>单词phony (即phoney)的意思是：伪造的，假的。<br>那么，在Makefile中，.PHONY后面的target表示的也是一个伪造的target, 而不是真实存在的文件target，注意Makefile的target默认是文件。<br><a href="http://www.cnblogs.com/idorax/p/9306528.html" target="_blank" rel="noopener">详细解释</a></p>]]></content>
      
      
      <categories>
          
          <category> lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种算法手写实现</title>
      <link href="2018/11/24/c/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/"/>
      <url>2018/11/24/c/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="实现各种算法"><a href="#实现各种算法" class="headerlink" title="实现各种算法"></a>实现各种算法</h2><ul><li style="list-style: none"><input type="checkbox"> 红黑树</li><li style="list-style: none"><input type="checkbox"> 排序算法<ul><li style="list-style: none"><input type="checkbox"> 插入排序<ul><li style="list-style: none"><input type="checkbox"> 直接插入排序</li><li style="list-style: none"><input type="checkbox"> 折半插入排序</li><li style="list-style: none"><input type="checkbox"> 希尔排序</li></ul></li><li style="list-style: none"><input type="checkbox"> 快速排序</li><li style="list-style: none"><input type="checkbox"> 选择排序<ul><li style="list-style: none"><input type="checkbox"> 简单选择排序</li><li style="list-style: none"><input type="checkbox"> 堆排序</li></ul></li><li style="list-style: none"><input type="checkbox"> 归并排序</li><li style="list-style: none"><input type="checkbox"> 基数排序</li><li style="list-style: none"><input type="checkbox"> 希尔排序</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言printf颜色控制</title>
      <link href="2018/11/19/c/c%E8%AF%AD%E8%A8%80printf%E9%A2%9C%E8%89%B2%E6%8E%A7%E5%88%B6/"/>
      <url>2018/11/19/c/c%E8%AF%AD%E8%A8%80printf%E9%A2%9C%E8%89%B2%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="动态输出百分比的例子"><a href="#动态输出百分比的例子" class="headerlink" title="动态输出百分比的例子"></a>动态输出百分比的例子</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\33[3%dm"</span>,i/<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%5d%%"</span>,i);</span><br><span class="line">        usleep(<span class="number">50000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\33[6D"</span>);</span><br><span class="line">        fflush (<span class="built_in">stdout</span>) ;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\33[0m"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170427141225449?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3BhcmtzdHJpa2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[31mheword"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[1D"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[K"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[1D"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[K"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[1D"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[K"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[1D"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\33[K"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"l"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"l"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"o"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个先输出<code>heword</code> 然后一步一步修改成hello的动态效果</p><h2 id="ANSI控制码"><a href="#ANSI控制码" class="headerlink" title="ANSI控制码"></a>ANSI控制码</h2><p>字背景颜色范围:40~49<br>40:黑41:深红42:绿43:黄色44:蓝色45:紫色46:深绿47:白色<br>字颜色:30~39<br>30:黑31:红32:绿33:黄34:蓝色35:紫色36:深绿37:白色</p><p>\33[0m 关闭所有属性\33[1m 设置高亮度\33[4m 下划线<br>\33[5m 闪烁\33[7m 反显\33[8m 消隐<br>\33[30m – \33[37m 设置前景色<br>\33[40m – \33[47m 设置背景色<br>\33[nA 光标上移n行<br>\33[nB 光标下移n行<br>\33[nC 光标右移n行<br>\33[nD 光标左移n行<br>\33[y;xH设置光标位置<br>\33[2J 清屏<br>\33[K 清除从光标到行尾的内容<br>\33[s 保存光标位置<br>\33[u 恢复光标位置<br>\33[?25l 隐藏光标<br>\33[?25h 显示光标</p><p><code>特别的指定48;5或者38;5 是指定xterm256色</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\033[38;5;%dmhello world\033[0m\n"</span>,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\033[48;5;%dmhello world\033[0m\n"</span>,i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://blog.csdn.net/wilson1068/article/details/42970551?utm_source=blogxgwz3" target="_blank" rel="noopener">CSDN文章</a></p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言double内存存储剖析</title>
      <link href="2018/11/05/c/c%E8%AF%AD%E8%A8%80double%E5%86%85%E5%AD%98%E5%AD%98%E5%82%A8%E5%89%96%E6%9E%90/"/>
      <url>2018/11/05/c/c%E8%AF%AD%E8%A8%80double%E5%86%85%E5%AD%98%E5%AD%98%E5%82%A8%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="分析以下程序的输出结果"><a href="#分析以下程序的输出结果" class="headerlink" title="分析以下程序的输出结果"></a>分析以下程序的输出结果</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> *px)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *pc = (<span class="keyword">char</span>*)px;</span><br><span class="line">  short *ps = (short*)px;</span><br><span class="line">  <span class="keyword">unsigned</span> short *pus = (<span class="keyword">unsigned</span> short*)px;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,*px);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x "</span>,pc[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x "</span>,ps[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x "</span>,pus[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> a = <span class="number">4.5</span>;</span><br><span class="line">  f(&amp;a);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="http://evolution404.gitee.io/markdownimg/006tNbRwly1fwxeu38qywj30bw03u3yb.jpg" alt></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="4-5的二进制表示结果"><a href="#4-5的二进制表示结果" class="headerlink" title="4.5的二进制表示结果"></a>4.5的二进制表示结果</h3><p><img src="http://evolution404.gitee.io/markdownimg/006tNbRwly1fwxeuwehvsj30xs0ceq3n.jpg" alt><br><a href="http://www.cnblogs.com/bingdaocaihong/p/6993028.html" target="_blank" rel="noopener">细节分析</a></p><p>所以4.5占用64个bit<br><code>0100 0000 0001 0010 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000</code></p><p>由于普遍系统是小端存储所以在内存中存储方式是正好相反(字节级别的倒序,每个字节倒序,字节内部不倒序)<br><code>0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0010 0100 0000</code></p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><ol><li>char 占用一个字节8bit, 两种short都是两个字节16bit</li><li>char的前六次全部是0,第七次读取到<code>00010010</code> 正好是16进制<code>12</code></li><li>short占据两个字节第三次读取16bit <code>00010010 01000000</code> <strong>大端小端的层级不是比特是字节,字节级别的倒序</strong><blockquote><p>所以先解读后一个字节40 前一个字节12 综合就是4012</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim开发qt</title>
      <link href="2018/11/03/vim/vim%E5%BC%80%E5%8F%91qt/"/>
      <url>2018/11/03/vim/vim%E5%BC%80%E5%8F%91qt/</url>
      
        <content type="html"><![CDATA[<h2 id="step"><a href="#step" class="headerlink" title="step"></a>step</h2><ol><li>qmake -project</li><li>修改.pro文件 增加<code>QT += widgets</code></li><li>qmake</li><li>make</li><li>打开可执行程序</li></ol>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂算法</title>
      <link href="2018/10/28/c/%E5%BF%AB%E9%80%9F%E5%B9%82%E7%AE%97%E6%B3%95/"/>
      <url>2018/10/28/c/%E5%BF%AB%E9%80%9F%E5%B9%82%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">quickPower</span><span class="params">(ElemType num, ElemType power)</span> </span>&#123;</span><br><span class="line">  ElemType rs = <span class="number">1</span>;</span><br><span class="line">  ElemType base = num;</span><br><span class="line">  <span class="keyword">while</span> (power != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((power &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      rs *= base;</span><br><span class="line">    base *= base;</span><br><span class="line">    power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">commonPower</span><span class="params">(ElemType num, ElemType power)</span></span>&#123;</span><br><span class="line">  ElemType rs = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;power;i++)&#123;</span><br><span class="line">    rs *= num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">clock_t</span> start, end;</span><br><span class="line">  <span class="keyword">int</span> times = <span class="number">99999999</span>;</span><br><span class="line">  start = clock();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">    quickPower(<span class="number">2</span>, <span class="number">62</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = clock();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"time=%f\n"</span>, (<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">  start = clock();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">    commonPower(<span class="number">2</span>, <span class="number">62</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end = clock();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"time=%f\n"</span>, (<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效率对比"><a href="#效率对比" class="headerlink" title="效率对比"></a>效率对比</h2><p>效率对比图<br><img src="http://evolution404.gitee.io/markdownimg/006tNbRwly1fwnzrbe2euj30do04ga9z.jpg" alt><br>与Python的对比<br><img src="http://evolution404.gitee.io/markdownimg/006tNbRwly1fwo02h7u1wj30ym0buaag.jpg" alt></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>旧算法时间复杂度为O(n) 新算法是O(logn)</p><h3 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h3><p>例如计算<code>5^7</code><br>可以计算<code>5^1*5^2*5^3</code><br>由于下一项都是上一项的平方, 只需要循环3次,原来需要7次</p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leaderf文件搜索bug的调试</title>
      <link href="2018/10/27/vim/Leaderf%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2bug%E7%9A%84%E8%B0%83%E8%AF%95/"/>
      <url>2018/10/27/vim/Leaderf%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2bug%E7%9A%84%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h2><p>直接从application中启动vim与从终端中启动vim显示结果不一致</p><p>从application中启动vim leaderf不能正确显示文件列表</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>经过层层分析找到<code>asyncExecutor.py</code>文件中通过<code>subprocess.Popen(cmd)</code>来执行shell命令</p><p>这个命令执行结果在大多数命令是一致的, 但是如果是<code>ag</code>命令查找文件不会返回结果</p><p>最终解决方案 <code>brew uninstall ag</code>, 这里究竟为什么直接启动application执行ag命令不返回结果还没有结论</p><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ol><li>善于利用CtrlSF</li><li>通过频繁进行<code>print</code>来进行排错</li><li>有机会可以继续掌握插件的编写技巧</li><li>最终并没有得到问题的答案, 只是用插件本身的功能替换成了<code>find</code>命令</li></ol>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="2018/10/25/c/KMP%E7%AE%97%E6%B3%95/"/>
      <url>2018/10/25/c/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="noopener">阮一峰</a><br><a href="https://blog.csdn.net/u011564456/article/details/20862555?utm_source=blogxgwz0" target="_blank" rel="noopener">CSDN</a></p><h2 id="c语言源码"><a href="#c语言源码" class="headerlink" title="c语言源码"></a>c语言源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal_next</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> *next, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">  next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    j = next[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (str[j + <span class="number">1</span>] != str[i] &amp;&amp; (j &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">      j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str[i] == str[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      next[i] = j + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> slen, <span class="keyword">char</span> *ptr, <span class="keyword">int</span> plen, <span class="keyword">int</span> *next)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> s_i = <span class="number">0</span>, p_i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (s_i &lt; slen &amp;&amp; p_i &lt; plen) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[s_i] == ptr[p_i]) &#123;</span><br><span class="line">      s_i++;</span><br><span class="line">      p_i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_i == <span class="number">0</span>) &#123;</span><br><span class="line">        s_i++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p_i = next[p_i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (p_i == plen) ? (s_i - plen) : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">char</span> ptr[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> slen, plen;</span><br><span class="line">  <span class="keyword">int</span> next[N];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, str, ptr)) &#123;</span><br><span class="line">    slen = <span class="built_in">strlen</span>(str);</span><br><span class="line">    plen = <span class="built_in">strlen</span>(ptr);</span><br><span class="line">    cal_next(ptr, next, plen);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, KMP(str, slen, ptr, plen, next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表反转</title>
      <link href="2018/10/25/c/%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/"/>
      <url>2018/10/25/c/%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="带头结点的一个算法"><a href="#带头结点的一个算法" class="headerlink" title="带头结点的一个算法"></a>带头结点的一个算法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(LinkList *L)</span> </span>&#123;</span><br><span class="line">  LinkList *head = L;</span><br><span class="line">  LinkList *pNode = <span class="literal">NULL</span>;</span><br><span class="line">  LinkList *nNode = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  L = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (L-&gt;next) &#123;</span><br><span class="line">    nNode = L-&gt;next;</span><br><span class="line">    L-&gt;next = pNode;</span><br><span class="line">    pNode = L;</span><br><span class="line">    L = nNode;</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;next = pNode;</span><br><span class="line">  head-&gt;next = L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>总共四个变量交替, nNode,L-&gt;next,pNode,L成环写成四句</code><br><code>n Ln; p L</code></p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim内置插件termdebug</title>
      <link href="2018/10/23/vim/vim%E5%86%85%E7%BD%AE%E6%8F%92%E4%BB%B6termdebug/"/>
      <url>2018/10/23/vim/vim%E5%86%85%E7%BD%AE%E6%8F%92%E4%BB%B6termdebug/</url>
      
        <content type="html"><![CDATA[<h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">packadd termdebug</span><br><span class="line">Termdebug a //程序名</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol><li>n 执行一行</li><li>b 下断点</li><li>c continue执行到下一个断点</li><li>watch 监听变量</li><li>s 单步执行</li></ol><h2 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:h terminal-debug</span><br></pre></td></tr></table></figure><p><a href="https://www.colabug.com/3074431.html" target="_blank" rel="noopener">参考文章</a></p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitignore使用</title>
      <link href="2018/10/22/git/gitignore%E4%BD%BF%E7%94%A8/"/>
      <url>2018/10/22/git/gitignore%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一般规则举例"><a href="#一般规则举例" class="headerlink" title="一般规则举例"></a>一般规则举例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.py[cod]</span><br></pre></td></tr></table></figure><p>过滤所有以<code>.pyc</code> 或 <code>.pyo</code> 或 <code>.pyd</code> 结尾的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*.pyc</span><br></pre></td></tr></table></figure><p>只过滤根目录下的<code>pyc</code>文件</p><p>过滤目录最后有斜杠, 文件没有</p><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><ol><li>*:任意个任意字符,</li><li>?:匹配一个任意字符，</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>已经上传成功的文件新加规则不会生效, 但是删除旧文件之后重新提交就不会存在了</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言printf浮点型多余0</title>
      <link href="2018/10/21/c/c%E8%AF%AD%E8%A8%80printf%E6%B5%AE%E7%82%B9%E5%9E%8B%E5%A4%9A%E4%BD%990/"/>
      <url>2018/10/21/c/c%E8%AF%AD%E8%A8%80printf%E6%B5%AE%E7%82%B9%E5%9E%8B%E5%A4%9A%E4%BD%990/</url>
      
        <content type="html"><![CDATA[<h2 id="解决多余零的问题"><a href="#解决多余零的问题" class="headerlink" title="解决多余零的问题"></a>解决多余零的问题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%g\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>%g</code> 来解决, 结果如下</p></blockquote><p><img src="http://evolution404.gitee.io/markdownimg/006tNbRwly1fwg88eyv7aj30oa0bq3yp.jpg" alt></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><a href="https://blog.csdn.net/K346K346/article/details/52252626?utm_source=blogxgwz3" target="_blank" rel="noopener">CSDN上文章</a></p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言函数指针</title>
      <link href="2018/10/21/c/c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
      <url>2018/10/21/c/c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="定义函数指针"><a href="#定义函数指针" class="headerlink" title="定义函数指针"></a>定义函数指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> (*world)() = p;</span><br><span class="line">  world();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就定义了一个函数指针</p><blockquote><p>变化方式: 函数定义的函数名字加上括号, 括号里面加上星号 代表函数的指针</p></blockquote><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">callBackMath</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> (*f)(<span class="keyword">double</span>, <span class="keyword">double</span>))</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (*f)(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%g\n"</span>, callBackMath(<span class="number">10</span>, <span class="number">20</span>, Add));</span><br><span class="line">  <span class="comment">// 以下效果相同</span></span><br><span class="line">  <span class="comment">// printf("%g\n", callBackMath(10, 20, &amp;Add));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是传入回调函数并进行调用的例子<br>其中在调用的时候写<code>Add</code> 或者 <code>&amp;Add</code> 效果相同, 编译器会自动处理 <a href="https://stackoverflow.com/questions/6893285/why-do-function-pointer-definitions-work-with-any-number-of-ampersands-or-as" target="_blank" rel="noopener">具体解释</a></p><h2 id="一个示例代码"><a href="#一个示例代码" class="headerlink" title="一个示例代码"></a>一个示例代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Sub</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123; <span class="keyword">return</span> a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Mul</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123; <span class="keyword">return</span> a * b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Div</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123; <span class="keyword">return</span> a / b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p2</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"hello function\n"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callBackP</span><span class="params">(<span class="keyword">void</span> (*f)())</span> </span>&#123; (*f)(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">callBackMath</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> (*f)(<span class="keyword">double</span>, <span class="keyword">double</span>))</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (*f)(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> (*world)() = p;</span><br><span class="line">  <span class="keyword">void</span> (*function)() = p2;</span><br><span class="line">  world();</span><br><span class="line">  function();</span><br><span class="line">  callBackP(p);</span><br><span class="line">  callBackP(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%g\n"</span>, callBackMath(<span class="number">10</span>, <span class="number">20</span>, Add));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%g\n"</span>, callBackMath(<span class="number">10</span>, <span class="number">20</span>, Sub));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%g\n"</span>, callBackMath(<span class="number">10</span>, <span class="number">20</span>, Mul));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%g\n"</span>, callBackMath(<span class="number">10</span>, <span class="number">20</span>, Div));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screen命令常用方式</title>
      <link href="2018/10/08/Linux/screen%E5%91%BD%E4%BB%A4%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>2018/10/08/Linux/screen%E5%91%BD%E4%BB%A4%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="创建一个screen"><a href="#创建一个screen" class="headerlink" title="创建一个screen"></a>创建一个screen</h2><blockquote><p>screen -S name<br>其中name是创建的screen的名字</p></blockquote><h2 id="detach这个screen"><a href="#detach这个screen" class="headerlink" title="detach这个screen"></a>detach这个screen</h2><blockquote><p>使用快捷键 <code>&lt;c-a&gt; d</code></p></blockquote><h2 id="重新进入这个screen"><a href="#重新进入这个screen" class="headerlink" title="重新进入这个screen"></a>重新进入这个screen</h2><blockquote><p>screen -ls<br>查看当前离线的所有screen</p></blockquote><blockquote><p>screen -r xxxx</p></blockquote><p>其中<strong>xxxx</strong>是ls命令中显示的该screen的编号</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js监听对象改变</title>
      <link href="2018/09/03/front-end/js%E7%9B%91%E5%90%AC%E5%AF%B9%E8%B1%A1%E6%94%B9%E5%8F%98/"/>
      <url>2018/09/03/front-end/js%E7%9B%91%E5%90%AC%E5%AF%B9%E8%B1%A1%E6%94%B9%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OP = <span class="built_in">Object</span>.prototype</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  需要重写的数组方法 OAR 是 overrideArrayMethod 的缩写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> OAM = [<span class="string">'push'</span>, <span class="string">'pop'</span>, <span class="string">'shift'</span>, <span class="string">'unshift'</span>, <span class="string">'splice'</span>, <span class="string">'sort'</span>, <span class="string">'reverse'</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(obj, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (OP.toString.call(obj) !== <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">'This parameter must be an object：'</span> + obj)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.callback = callback</span><br><span class="line">        <span class="keyword">this</span>.observe(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    observe(obj, path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (OP.toString.call(obj) === <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.overrideArrayProto(obj, path)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> oldVal = obj[key]</span><br><span class="line">            <span class="keyword">let</span> pathArray = path &amp;&amp; path.slice(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (pathArray) &#123;</span><br><span class="line">                pathArray.push(key)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pathArray = [key]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">                <span class="keyword">get</span>: function() &#123;</span><br><span class="line">                    <span class="keyword">return</span> oldVal</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (newVal !== oldVal) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (OP.toString.call(newVal) === <span class="string">'[object Object]'</span> || OP.toString.call(newVal) === <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">                            self.observe(newVal, pathArray)</span><br><span class="line">                        &#125;</span><br><span class="line">                        self.callback(newVal, oldVal, pathArray)</span><br><span class="line">                        oldVal = newVal</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">if</span> (OP.toString.call(oldVal) === <span class="string">'[object Object]'</span> || OP.toString.call(oldVal) === <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.observe(oldVal, pathArray)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    overrideArrayProto(array, path) &#123;</span><br><span class="line">        <span class="comment">// 保存原始 Array 原型</span></span><br><span class="line">        <span class="keyword">let</span> originalProto = <span class="built_in">Array</span>.prototype</span><br><span class="line">        <span class="keyword">let</span> overrideProto = <span class="built_in">Object</span>.create(<span class="built_in">Array</span>.prototype)</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">let</span> result</span><br><span class="line">        <span class="built_in">Object</span>.keys(OAM).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key, index, array</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> method = OAM[index]</span><br><span class="line">            <span class="keyword">let</span> oldArray = []</span><br><span class="line">            <span class="comment">// 使用 Object.defineProperty 给 overrideProto 添加属性，属性的名称是对应的数组函数名，值是函数</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(overrideProto, method, &#123;</span><br><span class="line">                value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    oldArray = <span class="keyword">this</span>.slice(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">var</span> arg = [].slice.apply(<span class="built_in">arguments</span>)</span><br><span class="line">                    result = originalProto[method].apply(<span class="keyword">this</span>, arg)</span><br><span class="line">                    self.observe(<span class="keyword">this</span>, path)</span><br><span class="line">                    self.callback(<span class="keyword">this</span>, oldArray, path)</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">                &#125;,</span><br><span class="line">                writable: <span class="literal">true</span>,</span><br><span class="line">                enumerable: <span class="literal">false</span>,</span><br><span class="line">                configurable: <span class="literal">true</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="keyword">this</span>)</span><br><span class="line">        array.__proto__ = overrideProto</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">newVal, oldVal, path</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;newVal&#125;</span>------<span class="subst">$&#123;oldVal&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'path:'</span> + path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = &#123;</span><br><span class="line">    arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    ob: &#123;</span><br><span class="line">        a: <span class="string">'a'</span>,</span><br><span class="line">        b: <span class="string">'b'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Observe(test, callback)</span><br><span class="line"></span><br><span class="line">test.arr.push(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js简单贪吃蛇</title>
      <link href="2018/08/27/front-end/js%E7%AE%80%E5%8D%95%E8%B4%AA%E5%90%83%E8%9B%87/"/>
      <url>2018/08/27/front-end/js%E7%AE%80%E5%8D%95%E8%B4%AA%E5%90%83%E8%9B%87/</url>
      
        <content type="html"><![CDATA[<p><strong>test.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> $ = <span class="function"><span class="params">selector</span> =&gt;</span> <span class="built_in">document</span>.querySelectorAll(selector)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width = <span class="number">20</span>, height = <span class="number">20</span>, direction = <span class="string">'right'</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width</span><br><span class="line">    <span class="keyword">this</span>.height = height</span><br><span class="line">    <span class="keyword">this</span>.direction = direction</span><br><span class="line">    <span class="keyword">this</span>.heart = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.body = [&#123;</span><br><span class="line">            x: <span class="number">3</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">'red'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            x: <span class="number">2</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">'orange'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            x: <span class="number">1</span>,</span><br><span class="line">            y: <span class="number">2</span>,</span><br><span class="line">            color: <span class="string">'orange'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Snake.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.map = map</span><br><span class="line">    <span class="keyword">this</span>.drawBody()</span><br><span class="line">    <span class="keyword">this</span>.addKeyListener()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Snake.prototype.drawBody = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">this</span>.map</span><br><span class="line">    <span class="keyword">this</span>.removeBody()</span><br><span class="line">    <span class="keyword">this</span>.body.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">        div.setAttribute(<span class="string">'class'</span>, <span class="string">'snake'</span>)</span><br><span class="line">        div.style.position = <span class="string">'absolute'</span></span><br><span class="line">        div.style.backgroundColor = item.color</span><br><span class="line">        div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span></span><br><span class="line">        div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span></span><br><span class="line">        div.style.left = item.x * <span class="keyword">this</span>.width + <span class="string">'px'</span></span><br><span class="line">        div.style.top = item.y * <span class="keyword">this</span>.height + <span class="string">'px'</span></span><br><span class="line">        map.appendChild(div)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Snake.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> body = <span class="keyword">this</span>.body</span><br><span class="line">    <span class="keyword">let</span> first = &#123;</span><br><span class="line">        x: body[<span class="number">0</span>].x,</span><br><span class="line">        y: body[<span class="number">0</span>].y,</span><br><span class="line">        color: <span class="string">'red'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.direction) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'top'</span>:</span><br><span class="line">            first.y--</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'bottom'</span>:</span><br><span class="line">            first.y++</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'left'</span>:</span><br><span class="line">            first.x--</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'right'</span>:</span><br><span class="line">            first.x++</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (first.x &gt; <span class="number">40</span> || first.y &gt; <span class="number">30</span> || first.x &lt; <span class="number">0</span> || first.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">'撞墙了'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">this</span>.body[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = <span class="keyword">this</span>.body[i]</span><br><span class="line">        <span class="keyword">if</span> (i !== <span class="number">0</span> &amp;&amp; item.x === head.x &amp;&amp; item.y === head.y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.heart === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.heart++</span><br><span class="line">                alert(<span class="string">'哎呦, 你撞到我的心了 饶你一次'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.heart === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.heart++</span><br><span class="line">                alert(<span class="string">'这么喜欢我呀, 好吧再放你一次'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">'啪, 你真的死了'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    body.pop()</span><br><span class="line">    body[<span class="number">0</span>].color = <span class="string">'orange'</span></span><br><span class="line">    body.splice(<span class="number">0</span>, <span class="number">0</span>, first)</span><br><span class="line">    <span class="keyword">this</span>.drawBody()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Snake.prototype.removeBody = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">this</span>.map</span><br><span class="line">    <span class="keyword">while</span> (map.querySelector(<span class="string">'.snake'</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> block = map.querySelector(<span class="string">'.snake'</span>)</span><br><span class="line">        block.parentNode.removeChild(block)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Snake.prototype.addKeyListener = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> code = e.keyCode</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                <span class="keyword">if</span> (self.direction !== <span class="string">'bottom'</span>) &#123;</span><br><span class="line">                    self.direction = <span class="string">'top'</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                <span class="keyword">if</span> (self.direction !== <span class="string">'top'</span>) &#123;</span><br><span class="line">                    self.direction = <span class="string">'bottom'</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">                <span class="keyword">if</span> (self.direction !== <span class="string">'right'</span>) &#123;</span><br><span class="line">                    self.direction = <span class="string">'left'</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">                <span class="keyword">if</span> (self.direction !== <span class="string">'left'</span>) &#123;</span><br><span class="line">                    self.direction = <span class="string">'right'</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.move()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Snake.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> bodyLast = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> last = &#123;</span><br><span class="line">        x: bodyLast.x,</span><br><span class="line">        y: bodyLast.y,</span><br><span class="line">        color: <span class="string">'orange'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.move()</span><br><span class="line">    <span class="keyword">this</span>.body.push(last)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">width = <span class="number">20</span>, height = <span class="number">20</span>, color = <span class="string">'green'</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width</span><br><span class="line">    <span class="keyword">this</span>.height = height</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">    <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.y = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Food.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.map) &#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.map.offsetWidth / <span class="keyword">this</span>.width)</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.map.offsetHeight / <span class="keyword">this</span>.height)</span><br><span class="line">    <span class="keyword">this</span>.element.style.position = <span class="string">'absolute'</span></span><br><span class="line">    <span class="keyword">this</span>.element.style.backgroundColor = <span class="keyword">this</span>.color</span><br><span class="line">    <span class="keyword">this</span>.element.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span></span><br><span class="line">    <span class="keyword">this</span>.element.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span></span><br><span class="line">    <span class="keyword">this</span>.element.style.left = <span class="keyword">this</span>.x * <span class="keyword">this</span>.width + <span class="string">'px'</span></span><br><span class="line">    <span class="keyword">this</span>.element.style.top = <span class="keyword">this</span>.y * <span class="keyword">this</span>.height + <span class="string">'px'</span></span><br><span class="line">    <span class="keyword">this</span>.map.appendChild(<span class="keyword">this</span>.element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">snake, food</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.snake = snake</span><br><span class="line">    <span class="keyword">this</span>.food = food</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> moveInterval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        self.collision()</span><br><span class="line">        <span class="keyword">if</span> (!self.snake.move()) &#123;</span><br><span class="line">            clearInterval(moveInterval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Game.prototype.collision = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [fx, fy] = [<span class="keyword">this</span>.food.x, <span class="keyword">this</span>.food.y]</span><br><span class="line">    <span class="keyword">let</span> shead = <span class="keyword">this</span>.snake.body[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> [sx, sy] = [shead.x, shead.y]</span><br><span class="line">    <span class="built_in">console</span>.log(fx, fy, sx, sy)</span><br><span class="line">    <span class="keyword">if</span> (fx === sx &amp;&amp; fy === sy) &#123;</span><br><span class="line">        <span class="keyword">this</span>.snake.eat()</span><br><span class="line">        <span class="keyword">this</span>.food.init()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Snake()</span><br><span class="line">s.init($(<span class="string">'.map'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Food()</span><br><span class="line">f.init($(<span class="string">'.map'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="keyword">new</span> Game(s, f)</span><br><span class="line"></span><br><span class="line">g.start()</span><br></pre></td></tr></table></figure></p><p><strong>test.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span></span><br><span class="line">    .map &#123;</span><br><span class="line">        width: 800px;</span><br><span class="line">        height: 600px;</span><br><span class="line">        background: #ccc;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js字段校验例子</title>
      <link href="2018/08/24/front-end/js%E5%AD%97%E6%AE%B5%E6%A0%A1%E9%AA%8C%E4%BE%8B%E5%AD%90/"/>
      <url>2018/08/24/front-end/js%E5%AD%97%E6%AE%B5%E6%A0%A1%E9%AA%8C%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> personValidators = &#123;</span><br><span class="line">    name(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'string'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age(val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target, validator</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">        _validator: validator,</span><br><span class="line">        <span class="keyword">set</span>(target, key, value, proxy) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">                <span class="keyword">let</span> Fva = <span class="keyword">this</span>._validator[key] <span class="comment">// 校验函数</span></span><br><span class="line">                <span class="keyword">if</span> (!Fva) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                <span class="keyword">if</span> (Fva(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, proxy)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`不能设置<span class="subst">$&#123;value&#125;</span>到<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`key值:<span class="subst">$&#123;key&#125;</span> 不存在`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age, sex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">        <span class="keyword">this</span>.sex = sex</span><br><span class="line">        <span class="keyword">return</span> validator(<span class="keyword">this</span>, personValidators)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'zyx'</span>, <span class="string">'19'</span>, <span class="string">'male'</span>)</span><br><span class="line">p.name = <span class="number">19</span> <span class="comment">// 报错</span></span><br><span class="line">p.sex = <span class="string">'female'</span></span><br><span class="line"><span class="built_in">console</span>.log(p)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="2018/08/18/front-end/js%E5%9F%BA%E7%A1%80/"/>
      <url>2018/08/18/front-end/js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="console的用法"><a href="#console的用法" class="headerlink" title="console的用法"></a>console的用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = &#123;</span><br><span class="line">    name: <span class="string">'zyx'</span>,</span><br><span class="line">    sex: <span class="string">'man'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"><span class="built_in">console</span>.table(name)</span><br><span class="line"><span class="built_in">console</span>.dir(name)</span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tNbRwly1fue4620bdxj30dy07gjrb.jpg" alt></p><h3 id="null-undefined"><a href="#null-undefined" class="headerlink" title="null undefined"></a>null undefined</h3><blockquote><p>null表示空,undefined表示一种更深层次的空(未定义)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>) <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []) <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">''</span>) <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h3><p>当JavaScript解释器启动时,它将创建一个新的全局对象,并给它一组定义的初始属性</p><ul><li>全局属性: undefined, infinity, NaN</li><li>全局函数: isNan(), parseInt(), eval()</li><li>构造函数: Date(), RegExp(), String(), Object(), Array(*)</li><li>全局对象: Math, JSON</li></ul><h3 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">let</span> ss = <span class="keyword">new</span> <span class="built_in">String</span>(s)</span><br><span class="line">s.len = <span class="number">5</span></span><br><span class="line">ss.len = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(s.len) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(ss.len) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><blockquote><p>在对s.len赋值的时候创建了一个临时对象,并对临时对象进行了操作,下一步临时对象随即销毁<br>在对ss.len赋值时又有ss已经是对象,所以属性被确定下来</p></blockquote><p><strong>字符串,数字,布尔都是一样的道理</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章加密以及首页不显示</title>
      <link href="2018/08/17/life/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E4%BB%A5%E5%8F%8A%E9%A6%96%E9%A1%B5%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
      <url>2018/08/17/life/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E4%BB%A5%E5%8F%8A%E9%A6%96%E9%A1%B5%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 hexo 根目录的 package.json 中添加 “hexo-blog-encrypt”: “1.1.*” 依赖。<br>然后执行npm install 命令。<br>该插件会自动安装</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li>首先在 _config.yml 中启用该插件:</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Security</span></span><br><span class="line"><span class="section">##</span></span><br><span class="line">encrypt:</span><br><span class="line"><span class="code">    enable: true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在你的文章的头部添加上对应的字段，如 password, abstract, message</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello world</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">    - </span>fdsafsdaf</span><br><span class="line">password: Mike</span><br><span class="line">abstract: Welcome to my blog, enter password to read.</span><br><span class="line">message: Welcome to my blog, enter password to read.</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/e4203ee066e5" target="_blank" rel="noopener">原文地址</a></p><h2 id="设置首页不显示"><a href="#设置首页不显示" class="headerlink" title="设置首页不显示"></a>设置首页不显示</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在对应文章首部设置属性<code>notshow: true</code></p><h3 id="配置修改方法"><a href="#配置修改方法" class="headerlink" title="配置修改方法"></a>配置修改方法</h3><p>路径：Hexo\themes\next\layout\index.swig<br>修改<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"posts"</span> <span class="attr">class</span>=<span class="string">"posts-expand"</span>&gt;</span></span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">        &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  &#123;% include '_partials/pagination.swig' %&#125;</span><br><span class="line">&#123;% endblock %</span><br></pre></td></tr></table></figure></p><p>变成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"posts"</span> <span class="attr">class</span>=<span class="string">"posts-expand"</span>&gt;</span></span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">        &#123;% if post.notshow != true %&#125;</span><br><span class="line">            &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  &#123;% include '_partials/pagination.swig' %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.2cto.com/kf/201806/753887.html" target="_blank" rel="noopener">原文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>weightRecord</title>
      <link href="2018/08/10/life/weightRecord/"/>
      <url>2018/08/10/life/weightRecord/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>日期</th><th>极小</th><th>极大</th></tr></thead><tbody><tr><td>2018-08-10</td><td>87.65</td><td>88.55</td></tr><tr><td>2018-08-11</td><td>87.30</td><td>88.25</td></tr><tr><td>2018-08-12</td><td>87.20</td><td>88.00</td></tr><tr><td>2018-08-13</td><td>86.65</td><td>87.40</td></tr><tr><td>2018-08-14</td><td>86.25</td><td>87.60</td></tr><tr><td>2018-08-15</td><td>86.85</td><td>88.15</td></tr><tr><td>2018-08-16</td><td>86.45</td><td>87.70</td></tr><tr><td>2018-08-17</td><td>86.35</td><td>87.20</td></tr><tr><td>2018-08-18</td><td>85.95</td><td>86.75</td></tr><tr><td>2018-08-19</td><td>85.15</td><td>87.20</td></tr><tr><td>2018-08-20</td><td>85.95</td><td>87.10</td></tr><tr><td>2018-08-21</td><td>85.45</td><td>86.55</td></tr><tr><td>2018-08-22</td><td>85.30</td><td>86.30</td></tr><tr><td>2018-08-23</td><td>85.50</td><td>86.60</td></tr><tr><td>2018-08-24</td><td>85.50</td><td>86.40</td></tr><tr><td>2018-08-25</td><td>85.40</td><td>86.10</td></tr><tr><td>2018-08-26</td><td>85.00</td><td>86.45</td></tr><tr><td>2018-08-27</td><td>85.35</td><td>86.55</td></tr><tr><td>2018-08-28</td><td>85.20</td><td>86.45</td></tr><tr><td>2018-09-02</td><td>86.75</td><td>88.55</td></tr><tr><td>2018-09-09</td><td>86.15</td><td>87.15</td></tr><tr><td>2019-03-05</td><td>96.95</td><td>98.60</td></tr><tr><td>2019-03-06</td><td>97.35</td><td>98.40</td></tr><tr><td>2019-03-07</td><td>96.20</td><td>98.40</td></tr><tr><td>2019-03-08</td><td>96.60</td><td>98.60</td></tr><tr><td>2019-03-09</td><td>96.20</td><td>97.50</td></tr><tr><td>2019-03-10</td><td>96.55</td><td>98.10</td></tr><tr><td>2019-03-11</td><td>97.30</td><td>99.30</td></tr><tr><td>2019-03-12</td><td>96.75</td><td>99.30</td></tr><tr><td>2019-03-13</td><td>97.95</td><td>99.30</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim插件targets.vim</title>
      <link href="2018/08/09/vim/vim%E6%8F%92%E4%BB%B6targets-vim/"/>
      <url>2018/08/09/vim/vim%E6%8F%92%E4%BB%B6targets-vim/</url>
      
        <content type="html"><![CDATA[<h2 id="targets-vim"><a href="#targets-vim" class="headerlink" title="targets.vim"></a>targets.vim</h2><p><strong>wellle/targets.vim</strong></p><h3 id="修改下一处"><a href="#修改下一处" class="headerlink" title="修改下一处"></a>修改下一处</h3><blockquote><p>This is example text (with a pair of parentheses).</p></blockquote><p>如果光标处在行首<br>执行<code>cin(</code> 将会修改下一处括号内的内容<br>特别的<code>b</code>代表括号 即也可使用<code>cinb</code></p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim中对搜索结果操作</title>
      <link href="2018/08/09/vim/vim%E4%B8%AD%E5%AF%B9%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E6%93%8D%E4%BD%9C/"/>
      <url>2018/08/09/vim/vim%E4%B8%AD%E5%AF%B9%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="直接操作搜索结果"><a href="#直接操作搜索结果" class="headerlink" title="直接操作搜索结果"></a>直接操作搜索结果</h2><blockquote><p>操作符 <strong>gn</strong></p></blockquote><p>dgn<br>cgn<br>等等</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim中session的使用</title>
      <link href="2018/08/09/vim/vim%E4%B8%ADsession%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2018/08/09/vim/vim%E4%B8%ADsession%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Startify中自带的session功能"><a href="#使用Startify中自带的session功能" class="headerlink" title="使用Startify中自带的session功能"></a>使用Startify中自带的session功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:SLoad       load a session    |startify-:SLoad|</span><br><span class="line">:SSave[!]    save a session    |startify-:SSave|</span><br><span class="line">:SDelete[!]  delete a session  |startify-:SDelete|</span><br><span class="line">:SClose      close a session   |startify-:SClose|</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css中flex布局</title>
      <link href="2018/08/01/front-end/css%E4%B8%ADflex%E5%B8%83%E5%B1%80/"/>
      <url>2018/08/01/front-end/css%E4%B8%ADflex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>转载一篇简书的文章,整理的很详细<br><a href="https://www.jianshu.com/p/967dcacf0220" target="_blank" rel="noopener">简书链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css中的各种单位</title>
      <link href="2018/08/01/front-end/css%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E5%8D%95%E4%BD%8D/"/>
      <url>2018/08/01/front-end/css%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="px-em-rem的区别"><a href="#px-em-rem的区别" class="headerlink" title="px, em, rem的区别"></a>px, em, rem的区别</h2><p>px: 直接是像素<br>em: 相对于父元素字号的比例<br>rem: 相对于根元素的字号比例</p><blockquote><p>应该尽可能的多用<code>em,rem</code>的写法,这样能够做到缩放不失真</p></blockquote><h3 id="line-height中各表示的区别"><a href="#line-height中各表示的区别" class="headerlink" title="line-height中各表示的区别"></a>line-height中各表示的区别</h3><ol><li>px  直接计算像素值</li><li>%  转换到像素值</li><li>em 转换到像素值</li><li>数值 继承后再进行计算</li></ol><h2 id="vw-vh-vmin-vmax"><a href="#vw-vh-vmin-vmax" class="headerlink" title="vw, vh, vmin, vmax"></a>vw, vh, vmin, vmax</h2><blockquote><p>vw、vh、vmin和vmax是CSS3中的新单位，是一种视窗单位，也是相对单位。它们的大小都是由视窗大小来决定的，单位1，代表类似于1%</p></blockquote><ul><li>vw：视窗宽度的百分比 </li><li>vh：视窗高度的百分比 </li><li>vmin：当前较小的vw和vh </li><li>vmax：当前较大的vw和vh</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cssNotes-形状</title>
      <link href="2018/08/01/front-end/cssNote/cssNotes-%E5%BD%A2%E7%8A%B6/"/>
      <url>2018/08/01/front-end/cssNote/cssNotes-%E5%BD%A2%E7%8A%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="自适应的椭圆"><a href="#自适应的椭圆" class="headerlink" title="自适应的椭圆"></a>自适应的椭圆</h2><h3 id="普通的椭圆"><a href="#普通的椭圆" class="headerlink" title="普通的椭圆"></a>普通的椭圆</h3><ul><li><code>border-radius</code> 属性接受两个属性值来确定圆角的两个半径</li><li>创建一个自适应的椭圆需要<code>border-radius</code>属性的两个值为50%,可以简写成一个50%</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fb3</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="半椭圆"><a href="#半椭圆" class="headerlink" title="半椭圆"></a>半椭圆</h3><h4 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h4><p>border-radius分别制定一到四个值制定的角<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftv3nijod6j30n40bq75b.jpg" alt></p><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>指定上方两点水平方向半径为一般,竖直方向为100%<br>下方两点指定为0,因为只要有一个方向为0,另一方向数值便不再生效<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fb3</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span> / <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的另一个方向的椭圆可以这么写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span> / <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四分之一椭圆<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skewX</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个技巧的关键在于，我们利用伪元素以及定位属性产生了一个方块，<br>然后对伪元素设置样式，并将其放置在其宿主元素的下层。<br>这种思路同样可以运用在其他场景中，从而得到各种各样的效果。</p><h2 id="菱形"><a href="#菱形" class="headerlink" title="菱形"></a>菱形</h2><h3 id="针对正方形的图片"><a href="#针对正方形的图片" class="headerlink" title="针对正方形的图片"></a>针对正方形的图片</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>) <span class="built_in">scale</span>(<span class="number">1.42</span>);</span><br><span class="line">    <span class="attribute">max-width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理:<br>    外侧旋转45度内侧再旋转-45度<br>    由于max-width为100%所以设置的是div宽度,然而真正菱形必须让根2宽度<br>    所以这样会生成八角形, 解决方法使用scale扩大1.42倍</p><h3 id="裁切路径方案"><a href="#裁切路径方案" class="headerlink" title="裁切路径方案"></a>裁切路径方案</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> clip-path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>clip-path</code> 里面参数就是各个点,最终结果就是将各个点连接起来</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端使用代理的方法</title>
      <link href="2018/08/01/shell/%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2018/08/01/shell/%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="暂时使用"><a href="#暂时使用" class="headerlink" title="暂时使用"></a>暂时使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1086</span><br></pre></td></tr></table></figure><h3 id="永久使用"><a href="#永久使用" class="headerlink" title="永久使用"></a>永久使用</h3><p>写入配置文件,针对不同终端类型不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//默认终端</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080 &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">//zsh</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080 &gt;&gt; ~/.zsh_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决方案 </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录好的前端项目</title>
      <link href="2018/07/31/front-end/%E8%AE%B0%E5%BD%95%E5%A5%BD%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
      <url>2018/07/31/front-end/%E8%AE%B0%E5%BD%95%E5%A5%BD%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nieweidong/fetool" target="_blank" rel="noopener">前端的瑞士军刀</a><br><strong>前端工具集</strong><br>定位大前端程序猿的百宝箱。主要针对前端方向和Node方向</p><p><a href="http://www.layui.com/admin/pro/" target="_blank" rel="noopener">layui后台模板</a></p><p><a href="https://yusugomori.com/projects/css-sans/fonts" target="_blank" rel="noopener">css字母</a><br>用css实现的26个字母</p><p><a href="http://www.w3cplus.com/blog/tags/502.html" target="_blank" rel="noopener">css秘密花园</a><br>css基础知识大全</p><p><a href="http://momentjs.cn" target="_blank" rel="noopener">moment.js</a><br>日期处理类库</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cssNotes-背景与边框</title>
      <link href="2018/07/31/front-end/cssNote/cssNotes-%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/"/>
      <url>2018/07/31/front-end/cssNote/cssNotes-%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h3 id="半透明边框"><a href="#半透明边框" class="headerlink" title="半透明边框"></a>半透明边框</h3><h4 id="默认的背景设置"><a href="#默认的背景设置" class="headerlink" title="默认的背景设置"></a>默认的背景设置</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">div&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line">    background: black;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">hsla</span>(0, 0%, 100%, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftsvjaa83fj30hw0i0t8r.jpg" alt><br>可以看到边框颜色背景是黑色,说明<code>div</code> 背景延伸到了<code>border</code></p><h4 id="盒子模型的理解"><a href="#盒子模型的理解" class="headerlink" title="盒子模型的理解"></a>盒子模型的理解</h4><p>从外向内分为: 外边距(margin) 边框(border) 内边距(padding) 内容(content)<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftsvdrr9aoj307t04wglg.jpg" alt></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用属性<code>background-clip</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-clip</span>: <span class="selector-tag">padding-box</span>;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>border-box</td><td>背景被裁剪到边框盒</td></tr><tr><td>padding-box</td><td>背景被裁剪到内边距框</td></tr><tr><td>content-box</td><td>背景被裁剪到内容框</td></tr></tbody></table><p><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftsvmdx80tj30iw0imq30.jpg" alt><br>可以发现现在使用的是<code>body</code> 的背景颜色<code>lightblue</code></p><h3 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h3><h4 id="box-shadow使用"><a href="#box-shadow使用" class="headerlink" title="box-shadow使用"></a>box-shadow使用</h4><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td></tr><tr><td>blur</td><td>可选。模糊距离。</td></tr><tr><td>spread</td><td>可选。阴影的尺寸。</td></tr><tr><td>color</td><td>可选。阴影的颜色。请参阅 CSS 颜色值。</td></tr><tr><td>inset</td><td>可选。将外部阴影 (outset) 改为内部阴影。</td></tr></tbody></table><h4 id="使用box-shoadow模拟一个边框"><a href="#使用box-shoadow模拟一个边框" class="headerlink" title="使用box-shoadow模拟一个边框"></a>使用box-shoadow模拟一个边框</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftsw85zr72j305604mt8j.jpg" alt></p><h4 id="边框的类型"><a href="#边框的类型" class="headerlink" title="边框的类型"></a>边框的类型</h4><p><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftt4cma0e8j312q0hcta0.jpg" alt></p><h4 id="创建多层边框"><a href="#创建多层边框" class="headerlink" title="创建多层边框"></a>创建多层边框</h4><p>box-shadow方案<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>outline方案–只能解决两层边框问题<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">5px</span> solid deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="灵活的背景定位"><a href="#灵活的背景定位" class="headerlink" title="灵活的背景定位"></a>灵活的背景定位</h3><h4 id="background图片使用"><a href="#background图片使用" class="headerlink" title="background图片使用"></a>background图片使用</h4><h5 id="overflow属性"><a href="#overflow属性" class="headerlink" title="overflow属性"></a>overflow属性</h5><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td>hidden</td><td>内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td>scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr></tbody></table><p><strong>visible</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1ftt694lbdfj30f00pegm3.jpg" alt></p><p><strong>hidden</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1ftt69l14rvj30e20c674d.jpg" alt><br>隐藏多余内容,不会显示滚动条</p><p><strong>scroll</strong><br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1ftt6297knqg30em0eghdt.gif" alt></p><h5 id="background-attachment属性"><a href="#background-attachment属性" class="headerlink" title="background-attachment属性"></a>background-attachment属性</h5><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>scroll</td><td>默认值。背景图像会随着页面其余部分的滚动而移动。</td></tr><tr><td>fixed</td><td>当页面的其余部分滚动时，背景图像不会移动。</td></tr></tbody></table><p><strong>scroll</strong><br>默认属性, 滚动浏览器滚动条背景将滚动,<code>overflow: scroll</code> 中将固定<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftt58umhewg31gq12wu1d.gif" alt></p><p><strong>fixed</strong><br>将图片默认固定在浏览器左上角<br>滚动任何滚动条都不会改变图片位置, 图片只会显示设置图片背景元素的部分</p><p><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftt5kxttfeg30dw0a97wl.gif" alt></p><p><strong>local</strong><br>将背景图完全设置于局部,滚动任何地方图片都会有变动(包括<code>overflow: scroll</code>)<br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1ftt5utobaag31gq12wu1d.gif" alt></p><h5 id="background-positon属性"><a href="#background-positon属性" class="headerlink" title="background-positon属性"></a>background-positon属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-positon</span>: 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h5 id="background-origin-与-background-clip的细致解析"><a href="#background-origin-与-background-clip的细致解析" class="headerlink" title="background-origin 与 background-clip的细致解析"></a>background-origin 与 background-clip的细致解析</h5><p>两者均只有三种选项</p><ul><li>content-box</li><li>padding-box</li><li>border-box</li></ul><p><strong>针对纯色背景</strong><br>比较简单,只能通过<code>background-clip</code>进行控制<br>由于<code>background-clip</code>默认值为<code>border-box</code> 所以显示为包括边框全部充满</p><p><strong>针对图片背景</strong></p><ul><li>background-origin<br>  确定背景图片放置的起始位置<br>  默认值为<code>padding-box</code></li><li>backgroun-clip<br>  确定图片显示的起始位置</li></ul><p><strong>思考方式先放置后进行切割,思考origin放置的位置,然后根据clip进行切割就是最终显示结果</strong></p><h4 id="使用calc以及background-position"><a href="#使用calc以及background-position" class="headerlink" title="使用calc以及background-position"></a>使用calc以及background-position</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 20<span class="selector-tag">px</span>) <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>注意: <strong>calc中的运算符必须两边有空格</strong></p><h3 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h3><h4 id="使用嵌套div"><a href="#使用嵌套div" class="headerlink" title="使用嵌套div"></a>使用嵌套div</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.out</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.out</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">background</span>: tan;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"out"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        hello world hello world hello world hello world hello world hello world</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外侧设置背景,内部设置圆角,圆角减少的面积显示外部的颜色</p><h4 id="使用一个div"><a href="#使用一个div" class="headerlink" title="使用一个div"></a>使用一个div</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: tan;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">5em</span> <span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">#655</span> solid .<span class="number">6em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>box-shadow 三个0加宽度颜色可以模拟实线边框</li><li>outline 以及 box-shadow都是从border开始进行放置,两者起始位置相同</li><li>描边不跟着圆角走,将来可能会被修正<br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fttdaxpjr8j30c60f074r.jpg" alt></li></ul><p>一般可以取圆角半径的一半即可, 且描边的宽度也有限制</p><h3 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(#fb3 <span class="number">33.3%</span>,</span><br><span class="line">    #<span class="number">58</span>a <span class="number">0</span>, #<span class="number">58</span>a <span class="number">66.6%</span>, yellowgreen <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">45px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="linear-gradient中的百分比的理解"><a href="#linear-gradient中的百分比的理解" class="headerlink" title="linear-gradient中的百分比的理解"></a><code>linear-gradient</code>中的百分比的理解</h4><p>linear-gradient 中颜色是两两配对的, 百分比代表着两种颜色进行在a到b百分比之间进行渐变<br>有几条分界线,就要写*2种颜色</p><p>例如:<br>    <code>linear-gradient(red 50%, blue 50%);</code></p><pre><code>红色从50%开始渐变,到50%完全渐变从蓝色 即生成无限小的渐变区间.区间之外的部分由这两种颜色填充</code></pre><p>又如:<br>    <code>background: linear-gradient(#fb3 33.3%, #58a 0, #58a 66.6%, yellowgreen 0);</code></p><pre><code>这种说明黄色从33.3%到33.3完全变成蓝色,蓝色由66.6到66.6变成绿色前三分之一由黄色接管, 中间蓝色,最后绿色</code></pre><h4 id="四色条纹"><a href="#四色条纹" class="headerlink" title="四色条纹"></a>四色条纹</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span> 25%, <span class="selector-tag">yellowgreen</span> 25%,<span class="selector-tag">yellowgreen</span> 50%, <span class="selector-tag">lightblue</span> 50%,<span class="selector-tag">lightblue</span> 75%,<span class="selector-tag">pink</span> 75%);</span><br></pre></td></tr></table></figure><p>还可以写成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">red</span> 25%, <span class="selector-tag">yellowgreen</span> 0,<span class="selector-tag">yellowgreen</span> 50%, <span class="selector-tag">lightblue</span> 0,<span class="selector-tag">lightblue</span> 75%,<span class="selector-tag">pink</span> 0);</span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79gy1fttyh1tn0xj30gs0h0we9.jpg" alt></p><h4 id="垂直条纹-斜向条纹"><a href="#垂直条纹-斜向条纹" class="headerlink" title="垂直条纹, 斜向条纹"></a>垂直条纹, 斜向条纹</h4><h5 id="垂直条纹"><a href="#垂直条纹" class="headerlink" title="垂直条纹:"></a>垂直条纹:</h5><pre><code>最前方加上`to right`即可</code></pre><h5 id="斜向条纹"><a href="#斜向条纹" class="headerlink" title="斜向条纹"></a>斜向条纹</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(45<span class="selector-tag">deg</span>,</span><br><span class="line"><span class="selector-id">#fb3</span> 25%, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 50%,</span><br><span class="line"><span class="selector-id">#fb3</span> 0, <span class="selector-id">#fb3</span> 75%, <span class="selector-id">#58a</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(45<span class="selector-tag">deg</span>,</span><br><span class="line"><span class="selector-id">#fb3</span>, <span class="selector-id">#fb3</span> 15<span class="selector-tag">px</span>, <span class="selector-id">#58a</span> 0, <span class="selector-id">#58a</span> 30<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>这种写法就是确定每种颜色的第一次重复的起始位置,所以双色条纹需要写四次</p><h5 id="可维护的渐变色彩"><a href="#可维护的渐变色彩" class="headerlink" title="可维护的渐变色彩"></a>可维护的渐变色彩</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#58a</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(30<span class="selector-tag">deg</span>,</span><br><span class="line"><span class="selector-tag">hsla</span>(0, 0%, 100%, <span class="selector-class">.1</span>),</span><br><span class="line"><span class="selector-tag">hsla</span>(0, 0%, 100%, <span class="selector-class">.1</span>) 20<span class="selector-tag">px</span>,</span><br><span class="line"><span class="selector-tag">transparent</span> 0, <span class="selector-tag">transparent</span> 40<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79gy1fttzgmsbtmj30hi0hgmx0.jpg" alt></p><p>transparent  全透明色彩<br>代表#58a的加上0.1的白色与#58a交替</p><h4 id="网格"><a href="#网格" class="headerlink" title="网格"></a>网格</h4><p>固定线框宽度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#58a</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">white</span> 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>, <span class="selector-tag">white</span> 1<span class="selector-tag">px</span>, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79gy1fttzrkjuwuj30hg0hcjr6.jpg" alt></p><p>格子布</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">white</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>,</span><br><span class="line"><span class="selector-tag">rgba</span>(200, 0, 0, <span class="selector-class">.5</span>) 50%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">linear-gradient</span>( <span class="selector-tag">rgba</span>(200, 0, 0, <span class="selector-class">.5</span>) 50%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1fttzsi9ov9j30hk0huwea.jpg" alt></p><h4 id="径向渐变-radial-gradient"><a href="#径向渐变-radial-gradient" class="headerlink" title="径向渐变(radial-gradient)"></a>径向渐变(radial-gradient)</h4><p>基础使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">lightblue</span> 50%, <span class="selector-tag">tan</span> 0)</span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79gy1ftu0qohltmj30he0howea.jpg" alt></p><p>双重波点阵列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#655</span>;</span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">tan</span> 30%, <span class="selector-tag">transparent</span> 0),</span><br><span class="line"><span class="selector-tag">radial-gradient</span>(<span class="selector-tag">tan</span> 30%, <span class="selector-tag">transparent</span> 0);</span><br><span class="line"><span class="selector-tag">background-size</span>: 30<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: 0 0, 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79gy1ftu0v6tu5rj30i20hqglf.jpg" alt></p><h3 id="蚂蚁行军动画"><a href="#蚂蚁行军动画" class="headerlink" title="蚂蚁行军动画"></a>蚂蚁行军动画</h3><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1ftu249i0tfg30lu0kujrb.gif" alt></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> ants &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(-<span class="number">45deg</span>,</span><br><span class="line">    black <span class="number">0</span>, black <span class="number">25%</span>, white <span class="number">0</span>, white <span class="number">50%</span>) <span class="number">0</span> / .<span class="number">6em</span> .<span class="number">6em</span>;</span><br><span class="line">    <span class="attribute">animation</span>: ants <span class="number">12s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(-<span class="number">45deg</span>, black <span class="number">0</span>, black .<span class="number">2em</span>, white <span class="number">0</span>, white .<span class="number">4em</span>) border-box;</span><br><span class="line">    <span class="attribute">animation</span>: ants <span class="number">12s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> ants&#123;<span class="selector-tag">to</span> &#123;<span class="attribute">background-position</span>:<span class="number">100em</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>单位要统一<code>repeating-linear-gradient</code>中使用<code>em</code> <code>background-positon</code> 也要使用<code>em</code></li><li>实现思路 首先做出斜线黑白交错背景,然后用白色遮住<code>padding</code> 及以内</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mint-ui开发vue项目实战</title>
      <link href="2018/07/30/front-end/%E4%BD%BF%E7%94%A8mint-ui%E5%BC%80%E5%8F%91vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>2018/07/30/front-end/%E4%BD%BF%E7%94%A8mint-ui%E5%BC%80%E5%8F%91vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install mint-ui --save</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> vue </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6语法</title>
      <link href="2018/07/30/front-end/es6%E8%AF%AD%E6%B3%95/"/>
      <url>2018/07/30/front-end/es6%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c = <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c)</span><br></pre></td></tr></table></figure><h4 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c = <span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">[b, c, a] = [a, b, c]</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c)</span><br></pre></td></tr></table></figure><blockquote><p>这种写法已经非常类似于Python, <strong>注意由于第二句方括号开头,前一句必须加分号</strong></p></blockquote><h4 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; partTwo, partOne, &#125; = &#123; <span class="string">'partOne'</span>: <span class="string">'1'</span>, <span class="string">'partTwo'</span>: <span class="string">'2'</span>, &#125;</span><br><span class="line"><span class="built_in">console</span>.log(partOne, partTwo)</span><br></pre></td></tr></table></figure><blockquote><p>从上可以看出解构的结果是根据变量名对应键名来进行赋值</p></blockquote><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title1 = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">let</span> title2 = <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`title1:<span class="subst">$&#123;title1&#125;</span>,title2:<span class="subst">$&#123;title2&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>必须使用反引号包起来</p><h4 id="字符串补白"><a href="#字符串补白" class="headerlink" title="字符串补白"></a>字符串补白</h4><p>可以用来处理时间和日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>.padStart(<span class="number">2</span>, <span class="string">'0'</span>))</span><br></pre></td></tr></table></figure><p>使长度不足2的字符串前面补0</p><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><h4 id="find-与-filter"><a href="#find-与-filter" class="headerlink" title="find 与 filter"></a>find 与 filter</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)) <span class="comment">// [4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><blockquote><p>特点: 可以进行NaN的检测</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr.indludes(<span class="literal">NaN</span>))</span><br></pre></td></tr></table></figure><p>NaN不能进行相等比较但是如果数组中存在NaN将会返回true</p><h3 id="对象的写法"><a href="#对象的写法" class="headerlink" title="对象的写法"></a>对象的写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">es5: &#123;add:add,sub:sub&#125;</span><br><span class="line">es6: &#123;add,sub&#125;</span><br></pre></td></tr></table></figure><p>当对象属性名称和变量同名时可以这么写</p><h3 id="对象的方法写法"><a href="#对象的方法写法" class="headerlink" title="对象的方法写法"></a>对象的方法写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">es5: &#123;add:function()&#123;&#125;,sub:function()&#123;&#125;&#125;</span><br><span class="line">es6: &#123;add()&#123;&#125;,sub()&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="导出的形式"><a href="#导出的形式" class="headerlink" title="导出的形式"></a>导出的形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">es5:</span><br><span class="line">    modules.exports = function()&#123;&#125;</span><br><span class="line">    exports.add = function()&#123;&#125;</span><br><span class="line">es6:</span><br><span class="line">    export default&#123;</span><br><span class="line">        add()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    export function() add()&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="es6-模块导出"><a href="#es6-模块导出" class="headerlink" title="es6 模块导出"></a>es6 模块导出</h4><p>导出写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    add, substract</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>导入写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calc <span class="keyword">from</span> <span class="string">'./calc.js'</span></span><br></pre></td></tr></table></figure></p><p>使用方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">calc.add()</span><br><span class="line">calc.substract()</span><br></pre></td></tr></table></figure></p><h4 id="es6-按需导出"><a href="#es6-按需导出" class="headerlink" title="es6 按需导出"></a>es6 按需导出</h4><p>导出写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x+y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">substract</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x-y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>导入写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;add,substract&#125; <span class="keyword">from</span> <span class="string">'./calc.js'</span></span><br></pre></td></tr></table></figure></p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>常规写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>].sort(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;<span class="keyword">return</span> y-x;&#125;);</span><br></pre></td></tr></table></figure></p><p>箭头函数写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>].sort(<span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;<span class="keyword">return</span> y-x;&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3><h4 id="startsWith-以及-endsWith"><a href="#startsWith-以及-endsWith" class="headerlink" title="startsWith 以及 endsWith"></a>startsWith 以及 endsWith</h4><p>这两个函数用于检查字符串首尾是否是指定的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'h'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'o'</span>))</span><br></pre></td></tr></table></figure></p><p>输出<code>true true</code></p><h4 id="字符串模板-1"><a href="#字符串模板-1" class="headerlink" title="字符串模板"></a>字符串模板</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = <span class="string">'标题'</span></span><br><span class="line"><span class="keyword">let</span> content = <span class="string">'内容'</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;<span class="subst">$&#123;title&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;<span class="subst">$&#123;content&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure><p>使用<code>${param}</code> 插入一个变量</p><h3 id="es6面向对象"><a href="#es6面向对象" class="headerlink" title="es6面向对象"></a>es6面向对象</h3><h4 id="构造函数以及类方法的写法"><a href="#构造函数以及类方法的写法" class="headerlink" title="构造函数以及类方法的写法"></a>构造函数以及类方法的写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, pass) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.pass = pass</span><br><span class="line">    &#125;</span><br><span class="line">    showName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    showPass() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.pass)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">'zyx'</span>, <span class="string">'666'</span>)</span><br><span class="line">user.showName()</span><br><span class="line">user.showPass()</span><br></pre></td></tr></table></figure><p><code>constructor</code> 构造器,就是构造函数<br>类的方法直接写入类中即可</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, pass, level) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name, pass)</span><br><span class="line">        <span class="keyword">this</span>.level = level</span><br><span class="line">    &#125;</span><br><span class="line">    showLevel() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.level)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vu = <span class="keyword">new</span> VipUser(<span class="string">'zyx'</span>, <span class="string">'666'</span>, <span class="number">12</span>)</span><br><span class="line">vu.showName()</span><br><span class="line">vu.showPass()</span><br><span class="line">vu.showLevel()</span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="2018/07/29/front-end/webpack/"/>
      <url>2018/07/29/front-end/webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="0配置使用"><a href="#0配置使用" class="headerlink" title="0配置使用"></a>0配置使用</h3><ol><li><p>全局安装webpack</p></li><li><p>在当前文件夹下创建<code>src</code> 文件夹</p></li><li><p>在<code>src</code> 文件夹下创建<code>index.js</code>文件</p></li><li><p>创建其他依赖文件</p></li><li><p>执行<code>webpack</code> 命令,将自动<code>dist</code>文件夹 并生成<code>main.js</code></p></li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>创建<strong>webpack.config.js</strong>文件</p><p>最基础的配置文件示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>, <span class="comment">// 指定打包的入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        filename: <span class="string">'bulid.js'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="webpack-loader"><a href="#webpack-loader" class="headerlink" title="webpack loader"></a>webpack loader</h2><h3 id="打包css"><a href="#打包css" class="headerlink" title="打包css"></a>打包css</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y  初始化package.json</span><br><span class="line">npm i install css-loader style-loader --save-dev    安装这两个包,并写入package.json</span><br></pre></td></tr></table></figure><h4 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h4><p><strong>webpack.config.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>, <span class="comment">// 指定打包的入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        filename: <span class="string">'bulid.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意<strong>use中的两个loader的顺序问题</strong></p><h3 id="打包sass"><a href="#打包sass" class="headerlink" title="打包sass"></a>打包sass</h3><p>需要多安装两个包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i install node-sass sass-loader css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>配置文件中写法<br><code>use: [&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;]</code></p><h3 id="打包less"><a href="#打包less" class="headerlink" title="打包less"></a>打包less</h3><p>新增的两个包</p><blockquote><p>less less-loader</p></blockquote><p>配置文件中写法<br><code>use: [&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]</code></p><h3 id="打包图片等"><a href="#打包图片等" class="headerlink" title="打包图片等"></a>打包图片等</h3><p>新增的两个包</p><blockquote><p>file-loader url-loader </p></blockquote><p>配置文件写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(gif|png|jpg|woff|svg|ttf|eot)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            limit: <span class="number">40000</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="热更新-自动启动"><a href="#热更新-自动启动" class="headerlink" title="热更新,自动启动"></a>热更新,自动启动</h2><p><code>webpack-dev-server, html-webpack-plugin</code></p><p><strong>package.json</strong><br>添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"dev"</span>: <span class="string">"webpack-dev-server --inline --hot --open --port 5008"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>通过这个配置可以<code>npm run dev</code>自动打开浏览器并热更新</p><p><strong>webpack.config.js</strong><br>首部添加<br><code>var htmlwp = require(&quot;html-webpack-plugin&quot;);</code><br>内部添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> htmlwp(&#123;</span><br><span class="line">        title: <span class="string">'首页'</span>,</span><br><span class="line">        filename: <span class="string">'index.html'</span>,</span><br><span class="line">        template: <span class="string">'webpack.html'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="es6转es5"><a href="#es6转es5" class="headerlink" title="es6转es5"></a>es6转es5</h2><p>安装<code>babel-core babel-loader babel-preset-es2015 babel-plugin-transform-runtime</code></p><p>配置<strong>webpack.config.json</strong><br>rules中增加节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            presets: [<span class="string">"es2015"</span>],</span><br><span class="line">            plugins: [<span class="string">'transform-runtime'</span>],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="webpack-打包vue"><a href="#webpack-打包vue" class="headerlink" title="webpack 打包vue"></a>webpack 打包vue</h2><h3 id="安装所需包"><a href="#安装所需包" class="headerlink" title="安装所需包"></a>安装所需包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue --save   表示运行阶段需要依赖</span><br><span class="line">cnpm install vue-loader vue-template-compiler babel-plugin-transform-runtime --save-dev  表示开发阶段需要依赖</span><br></pre></td></tr></table></figure><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><p><strong>.babelrc</strong><br>创建文件<code>.babelrc</code><br>写入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    presets: [<span class="string">'es2015'</span>],</span><br><span class="line">    plugins: [<span class="string">'transform-runtime'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>webpack.config.js</strong></p><ol><li><p>创建新节点</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">    use: <span class="string">'vue-loader'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>创建新对象</p><p> 文件头部写入</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">'vue-loader'</span>);</span><br></pre></td></tr></table></figure><p> plugins节点添加一项</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> htmlwp(&#123;</span><br><span class="line">        title: <span class="string">'首页'</span>,</span><br><span class="line">        filename: <span class="string">'index.html'</span>,</span><br><span class="line">        template: <span class="string">'webpack.html'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><h3 id="集成vue-router步骤"><a href="#集成vue-router步骤" class="headerlink" title="集成vue-router步骤"></a>集成vue-router步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-router --save  运行阶段依赖</span><br></pre></td></tr></table></figure><p><strong>index.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> vueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">'./components/account/login.vue'</span></span><br><span class="line"><span class="keyword">import</span> register <span class="keyword">from</span> <span class="string">'./components/account/register.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(vueRouter);  <span class="comment">//注册vueRouter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> vueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">'/login'</span>, <span class="attr">component</span>:login&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">'/register'</span>, <span class="attr">component</span>:register&#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    router,</span><br><span class="line">    render: <span class="function"><span class="params">c</span> =&gt;</span> c(App), <span class="comment">//es6的函数写法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>App.vue</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>package.json</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"webpack.config.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --inline --hot --open --port 5008"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.26.3"</span>,</span><br><span class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^7.1.5"</span>,</span><br><span class="line">    <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="string">"css-loader"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"file-loader"</span>: <span class="string">"^1.1.11"</span>,</span><br><span class="line">    <span class="string">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="string">"less"</span>: <span class="string">"^3.8.0"</span>,</span><br><span class="line">    <span class="string">"less-loader"</span>: <span class="string">"^4.1.0"</span>,</span><br><span class="line">    <span class="string">"node-sass"</span>: <span class="string">"^4.9.2"</span>,</span><br><span class="line">    <span class="string">"sass-loader"</span>: <span class="string">"^7.0.3"</span>,</span><br><span class="line">    <span class="string">"style-loader"</span>: <span class="string">"^0.21.0"</span>,</span><br><span class="line">    <span class="string">"url-loader"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">    <span class="string">"vue-loader"</span>: <span class="string">"^15.2.6"</span>,</span><br><span class="line">    <span class="string">"vue-template-compiler"</span>: <span class="string">"^2.5.16"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^4.16.3"</span>,</span><br><span class="line">    <span class="string">"webpack-cli"</span>: <span class="string">"^3.1.0"</span>,</span><br><span class="line">    <span class="string">"webpack-dev-server"</span>: <span class="string">"^3.1.5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"vue"</span>: <span class="string">"^2.5.16"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>webpack.config.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlwp = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">'vue-loader'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>, <span class="comment">// 指定打包的入口文件</span></span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    watch: <span class="literal">true</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        filename: <span class="string">'bulid.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(gif|png|jpg|woff|svg|ttf|eot)$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        limit: <span class="number">40000</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: <span class="string">'babel-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                use: <span class="string">'vue-loader'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> htmlwp(&#123;</span><br><span class="line">            title: <span class="string">'首页'</span>,</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: <span class="string">'webpack.html'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>.babelrc</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    presets: [<span class="string">'es2015'</span>],</span><br><span class="line">    plugins: [<span class="string">'transform-runtime'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h2><h3 id="webpack服务器支持手机端进行访问"><a href="#webpack服务器支持手机端进行访问" class="headerlink" title="webpack服务器支持手机端进行访问"></a>webpack服务器支持手机端进行访问</h3><p>在<strong>webpack.config.js</strong>中添加节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    useLocalIp: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    openPage: <span class="string">""</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">"*"</span>: &#123;</span><br><span class="line">            target: <span class="string">'http://xxx'</span>,</span><br><span class="line">            secure: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueLearn</title>
      <link href="2018/07/26/front-end/vueLearn/"/>
      <url>2018/07/26/front-end/vueLearn/</url>
      
        <content type="html"><![CDATA[<h2 id="vue中动画"><a href="#vue中动画" class="headerlink" title="vue中动画"></a>vue中动画</h2><h3 id="使用animate-css"><a href="#使用animate-css" class="headerlink" title="使用animate.css"></a>使用animate.css</h3><ol><li><p>将需要动画的标签放入<code>&lt;transition&gt;&lt;/transition&gt;</code> 标签中</p></li><li><p>为<code>transition</code>标签添加属性 <code>enter-active-class</code> 和 <code>leave-active-class</code></p></li><li><p>在动画标签上添加class <code>animated</code> 以及 <code>show</code> 其中<code>show</code> 是用来自己控制动画时长,例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.show &#123;</span><br><span class="line">    transition: all 0.4s ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>创建的动画的一个实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span></span><br><span class="line">    .show &#123;</span><br><span class="line">        transition: all 0.4s ease;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">enter-active-class</span>=<span class="string">"fadeInRight"</span> <span class="attr">leave-active-class</span>=<span class="string">"fadeOutRight"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"animated show"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>zyx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            isShow: <span class="literal">true</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            toggle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftnica8kwsg31js05kab9.gif" alt></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="定义和注册组件"><a href="#定义和注册组件" class="headerlink" title="定义和注册组件"></a>定义和注册组件</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>定义组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义组件</span></span><br><span class="line"><span class="keyword">var</span> login = Vue.extend(&#123;</span><br><span class="line">   template:<span class="string">'&lt;h1&gt;登录页面&lt;/h1&gt;'</span> </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 注册组件</span></span><br><span class="line">Vue.component(<span class="string">'login'</span>, login);</span><br></pre></td></tr></table></figure></p><p>使用组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'register'</span>,&#123;</span><br><span class="line">    template:<span class="string">'&lt;h1&gt;注册界面&lt;/h1&gt;'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用同上,直接在接管区域内使用<code>register</code>标签</p><h4 id="方法三-推荐写法"><a href="#方法三-推荐写法" class="headerlink" title="方法三,推荐写法"></a>方法三,推荐写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"account"</span>, &#123;</span><br><span class="line">    template: <span class="string">'#account'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意:在Vue2.0中模板需要使用一个根元素包裹起来</strong></p><h3 id="组件中数据的展示"><a href="#组件中数据的展示" class="headerlink" title="组件中数据的展示"></a>组件中数据的展示</h3><p>使用数据必须放在一个function中,数据通过该function的返回值来定义<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        msg: <span class="string">'this is a msg'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>这样做可以保证多个组件之间数据的独立性</p><h3 id="定义和注册子组件"><a href="#定义和注册子组件" class="headerlink" title="定义和注册子组件"></a>定义和注册子组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'account'</span>, &#123;</span><br><span class="line">    template: <span class="string">'#account'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">"login"</span>: &#123;</span><br><span class="line">            template: <span class="string">"&lt;h2&gt;登录子组件&lt;/h2&gt;"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>账号组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义的子组件可以在父组件中使用</p><h3 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click</span>=<span class="string">"cname='login'"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click</span>=<span class="string">"cname='register'"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"cname"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>component</code>元素的<code>:is</code>属性可以切换当前使用的组件</p><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        id: <span class="string">'1000'</span>,</span><br><span class="line">        msg: <span class="string">'this is a msg'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'children'</span>: &#123;</span><br><span class="line">            template: <span class="string">'#children'</span>,</span><br><span class="line">            props: [<span class="string">'good'</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"children"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;good&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">children</span> <span class="attr">:good</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">children</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子组件中定义<code>props</code>属性(数组) 其中填写可以绑定的变量名称<br>在使用子组件的过程中通过<code>props</code>中的名称绑定父组件的某个变量,类似函数传参</p><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p>子组件中通过方法调用 <code>this.$emit(&quot;key&quot;, &quot;value&quot;)</code> 语句来发送信息参数<br>父组件中为子组件绑定<code>key</code> 事件,并且该事件的回调函数有默认参数即为发送的<code>value</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"children"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendData"</span>&gt;</span>发送数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">children</span> <span class="attr">v-on:send</span>=<span class="string">"getData"</span>&gt;</span><span class="tag">&lt;/<span class="name">children</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;sendData&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        sendData: <span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getData: <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">            alert(input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'children'</span>: &#123;</span><br><span class="line">            template: <span class="string">'#children'</span>,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                sendData: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.$emit(<span class="string">"send"</span>, <span class="string">'hello world'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取dom对象"><a href="#获取dom对象" class="headerlink" title="获取dom对象"></a>获取dom对象</h3><p>使用<code>ref</code> 指定dom的名字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getEl"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"mydiv"</span>&gt;</span>hello div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">login</span> <span class="attr">ref</span>=<span class="string">"mylogin"</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getEl: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mydiv);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mylogin.id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        login: &#123;</span><br><span class="line">            template: <span class="string">'&lt;h1&gt;login&lt;/h1&gt;'</span>,</span><br><span class="line">            data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    id: <span class="string">'222'</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由系统"><a href="#路由系统" class="headerlink" title="路由系统"></a>路由系统</h2><h3 id="路由加传参的实例"><a href="#路由加传参的实例" class="headerlink" title="路由加传参的实例"></a>路由加传参的实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> App = Vue.extend(&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> login = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;登录&lt;/h1&gt;'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> register = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;注册&#123;&#123;name&#125;&#125;&lt;/h1&gt;'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.$route.params.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>:<span class="string">'/login'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: login&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">'/register/:name'</span>, <span class="attr">component</span>: register&#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    router: router,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="嵌套路由的实例"><a href="#嵌套路由的实例" class="headerlink" title="嵌套路由的实例"></a>嵌套路由的实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> App = Vue.extend(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> account = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;&lt;h1&gt;账号组件&lt;/h1&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> login = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;登录&lt;/h1&gt;'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> register = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;注册&#123;&#123;name&#125;&#125;&lt;/h1&gt;'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.$route.params.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [&#123;</span><br><span class="line">        path: <span class="string">'/account'</span>,</span><br><span class="line">        component: account,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'login'</span>,</span><br><span class="line">                component: login</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'register/:name'</span>,</span><br><span class="line">                component: register</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    router: router,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="watch-与-计算属性computed"><a href="#watch-与-计算属性computed" class="headerlink" title="watch 与 计算属性computed"></a>watch 与 计算属性computed</h2><h3 id="watch的使用"><a href="#watch的使用" class="headerlink" title="watch的使用"></a>watch的使用</h3><h4 id="watch-监控普通变量"><a href="#watch-监控普通变量" class="headerlink" title="watch 监控普通变量"></a>watch 监控普通变量</h4><blockquote><p>watch 中对某个变量定义函数,函数会默认传入变化的变量新值和旧值.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    &#123;&#123;fullName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">""</span>,</span><br><span class="line">        lastName: <span class="string">""</span>,</span><br><span class="line">        fullName: <span class="string">""</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        <span class="string">'firstName'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'lastName'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="watch-监控路由对象"><a href="#watch-监控路由对象" class="headerlink" title="watch 监控路由对象"></a>watch 监控路由对象</h4><p><code>$route</code>是内置对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    router: router,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        <span class="string">'$route'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newRoute, oldRoute</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newRoute);</span><br><span class="line">            <span class="built_in">console</span>.log(oldRoute);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="computed的使用"><a href="#computed的使用" class="headerlink" title="computed的使用"></a>computed的使用</h3><p>computed可以创建计算变量,这些变量可以直接通过<code></code>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">'a'</span>,</span><br><span class="line">        lastName: <span class="string">'b'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5+css3</title>
      <link href="2018/07/25/front-end/html5-css3/"/>
      <url>2018/07/25/front-end/html5-css3/</url>
      
        <content type="html"><![CDATA[<h1 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h1><h2 id="新标签"><a href="#新标签" class="headerlink" title="新标签"></a>新标签</h2><h3 id="显示列表-details以及summary标签"><a href="#显示列表-details以及summary标签" class="headerlink" title="显示列表 details以及summary标签"></a>显示列表 details以及summary标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>显示列表<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ccccc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ddddd<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="progress标签"><a href="#progress标签" class="headerlink" title="progress标签"></a>progress标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><h3 id="draggable-拖动属性"><a href="#draggable-拖动属性" class="headerlink" title="draggable 拖动属性"></a>draggable 拖动属性</h3><p>在任意元素上添加<code>draggable=&quot;true&quot;</code> 将使得这个属性可以被拖动</p><h3 id="spellcheck"><a href="#spellcheck" class="headerlink" title="spellcheck"></a>spellcheck</h3><blockquote><p>主要是针对<code>input</code> <code>textarea</code> 标签</p></blockquote><h1 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim格式化代码</title>
      <link href="2018/07/21/vim/vim%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/"/>
      <url>2018/07/21/vim/vim%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="使用插件neoformat"><a href="#使用插件neoformat" class="headerlink" title="使用插件neoformat"></a>使用插件neoformat</h3><p>vim-plug安装<br><code>Plug &#39;sbdchd/neoformat&#39;</code></p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>使用<strong>autopep8</strong></p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><blockquote><p>使用js-beautify</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g js-beautify</span><br></pre></td></tr></table></figure><p>其中自带了html,css,js的格式化方案</p><h3 id="vim使用shell命令路径问题"><a href="#vim使用shell命令路径问题" class="headerlink" title="vim使用shell命令路径问题"></a>vim使用shell命令路径问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使用这个命令可以查看当前使用终端<strong>PATH</strong>变量的值<br>即可以从这个路径进行判断为何找不到命令</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端找不到命令排错</title>
      <link href="2018/07/21/shell/%E7%BB%88%E7%AB%AF%E6%89%BE%E4%B8%8D%E5%88%B0%E5%91%BD%E4%BB%A4%E6%8E%92%E9%94%99/"/>
      <url>2018/07/21/shell/%E7%BB%88%E7%AB%AF%E6%89%BE%E4%B8%8D%E5%88%B0%E5%91%BD%E4%BB%A4%E6%8E%92%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使用这个命令查看终端加载的所有命令路径与Python包找不到的查错方案一致</p>]]></content>
      
      
      <categories>
          
          <category> 终端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootstrapLearn</title>
      <link href="2018/07/21/front-end/bootstrapLearn/"/>
      <url>2018/07/21/front-end/bootstrapLearn/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="必备meta标签"><a href="#必备meta标签" class="headerlink" title="必备meta标签"></a>必备meta标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在移动设备浏览器上，通过为视口（viewport）设置 meta 属性为 user-scalable=no 可以禁用其缩放（zooming）功能。这样禁用缩放功能后，用户只能滚动屏幕，就能让你的网站看上去更像原生应用的感觉。注意，这种方式我们并不推荐所有网站使用，还是要看你自己的情况而定！</p><h3 id="html文档类型"><a href="#html文档类型" class="headerlink" title="html文档类型"></a>html文档类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置文档类型为html5</p><h2 id="全局css样式"><a href="#全局css样式" class="headerlink" title="全局css样式"></a>全局css样式</h2><h3 id="容器-container"><a href="#容器-container" class="headerlink" title="容器,container"></a>容器,container</h3><p>可以自动调整元素大小,最常用的包含组件</p><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><p>建议使用<code>col-md-*</code></p><p>共有<code>col-xs col-sm col-md col-lg</code><br>从左向右元素换行所需要的屏幕宽度越大,其中<code>col-xs</code>代表不换行</p><h4 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h4><blockquote><p>使用<code>col-md-offset-*</code>使得元素中间进行偏移</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"color"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"color"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>pull-left pull-right</p></blockquote><p>右浮动,左浮动<br>控制元素靠左还是靠右</p><h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><ol><li>标题</li><li>段落</li><li>mark标记</li><li>del删除线</li><li>s删除线</li><li>ins下划线</li><li><p>文本对齐</p><ul><li>text-left</li><li>text-right</li><li>text-center</li></ul></li><li><p>表格</p><ul><li>table</li><li>table-striped</li><li>table-bordered</li><li>table-hover</li><li>颜色 info success active warning danger</li></ul></li></ol><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h4 id="常用class"><a href="#常用class" class="headerlink" title="常用class"></a>常用class</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-link"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>七种样式的按钮<br><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1ftj0d5fk8vj30nq03q3yw.jpg" alt></p><p>使用 <code>.btn-lg</code>、<code>.btn-sm</code> 或 <code>.btn-xs</code> 就可以获得不同尺寸的按钮。</p><p><code>.btn-block</code> 使得button变成块级标签,<strong>独占一行</strong></p><p>disabled 禁用标签—注意这是添加<strong>属性</strong>不是添加class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">disabled</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="可以使用按钮属性的标签"><a href="#可以使用按钮属性的标签" class="headerlink" title="可以使用按钮属性的标签"></a>可以使用按钮属性的标签</h4><ul><li>button</li><li>a</li><li>input</li></ul><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三种图片的样式</p><h3 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h3><h4 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h4><p>字体颜色<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-success"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-info"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-warning"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>背景颜色, 注意没有<code>bg-muted</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-success"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-info"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-warning"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-danger"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="小组件"><a href="#小组件" class="headerlink" title="小组件"></a>小组件</h4><p>关闭按钮,更多</p><blockquote><p>元素居中 使用<code>center-block</code></p></blockquote><p>显示<code>show</code> 隐藏<code>hide</code></p><h3 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h3><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">accept-charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>form下方使用<code>form-group</code> 里面有一个<code>lable</code>以及一个输入框</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">'dropdown'</span>&gt;</span>更多<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>外部包有<code>.dropdown</code></li><li>内部<code>button</code> 有 <code>data-toggle</code> 属性</li><li>下方<code>ul&gt;li</code> 有<code>dropdown-meun</code> 的类</li></ol><h3 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="按钮工具箱"><a href="#按钮工具箱" class="headerlink" title="按钮工具箱"></a>按钮工具箱</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-toolbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'active'</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>good<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"li"</span>).removeClass(<span class="string">"active"</span>);</span><br><span class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">"active"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://evolution404.gitee.io/markdownimg/006tNc79ly1ftk2mgihdeg30r006yad6.gif" alt></p><p>导航条顶部的效果</p><h3 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h3><blockquote><p>三个部分: 左侧,中部,右侧 中部可以作为合并区</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各语言正则表达式使用</title>
      <link href="2018/07/19/regex/%E5%90%84%E8%AF%AD%E8%A8%80%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8/"/>
      <url>2018/07/19/regex/%E5%90%84%E8%AF%AD%E8%A8%80%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">'gooddbcd'</span></span><br><span class="line">print(re.search(<span class="string">'good(.*)d'</span>, s).group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>使用<code>re.search()</code>可以对结果进行分组</p><p>结果使用<code>.group()</code>取得,从<strong>1</strong>开始</p>]]></content>
      
      
      <categories>
          
          <category> regex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac笔记本修改网卡mac地址</title>
      <link href="2018/07/16/shell/mac%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1mac%E5%9C%B0%E5%9D%80/"/>
      <url>2018/07/16/shell/mac%E7%AC%94%E8%AE%B0%E6%9C%AC%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1mac%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">networksetup -listallhardwareports</span><br><span class="line">sudo ifconfig en0 ether 44:c3:46:69:11:73</span><br></pre></td></tr></table></figure><ol><li>查看电脑目前现有的网卡以及mac地址</li><li>修改en0网卡的mac地址为44:c3:46:69:11:73</li></ol><p>原mac地址截图<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftbuwyeyimj30fy078abn.jpg" alt="原mac地址截图"></p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium使用经验</title>
      <link href="2018/07/16/python/selenium%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/"/>
      <url>2018/07/16/python/selenium%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装selenium包"><a href="#安装selenium包" class="headerlink" title="安装selenium包"></a>安装selenium包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure><h3 id="配置Chrome驱动"><a href="#配置Chrome驱动" class="headerlink" title="配置Chrome驱动"></a>配置Chrome驱动</h3><p><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">下载链接</a><br>版本对应<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ftbrikdyklj30hq0i874o.jpg" alt="版本对应"></p><h3 id="放置路径"><a href="#放置路径" class="headerlink" title="放置路径"></a>放置路径</h3><p><strong>windows</strong><br>c:\windows\system32<br><strong>mac</strong><br>/usr/local/bin</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="引入selenium并启动浏览器打开地址"><a href="#引入selenium并启动浏览器打开地址" class="headerlink" title="引入selenium并启动浏览器打开地址"></a>引入selenium并启动浏览器打开地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'http://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure><h3 id="通过css选择器选择元素"><a href="#通过css选择器选择元素" class="headerlink" title="通过css选择器选择元素"></a>通过css选择器选择元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element_by_css_selector(<span class="string">'#id'</span>)</span><br></pre></td></tr></table></figure><h3 id="点击元素避免加载过慢"><a href="#点击元素避免加载过慢" class="headerlink" title="点击元素避免加载过慢"></a>点击元素避免加载过慢</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clickElement</span><span class="params">(selector, browser)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            browser.find_element_by_css_selector(slector).click()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="执行JavaScript代码"><a href="#执行JavaScript代码" class="headerlink" title="执行JavaScript代码"></a>执行JavaScript代码</h3><h4 id="执行语句后必须有分号"><a href="#执行语句后必须有分号" class="headerlink" title="执行语句后必须有分号"></a>执行语句后必须有分号</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.execute_script(<span class="string">'$("#id").click();'</span>)</span><br></pre></td></tr></table></figure><h4 id="获取某些得不到的值"><a href="#获取某些得不到的值" class="headerlink" title="获取某些得不到的值"></a>获取某些得不到的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.execute_script(<span class="string">'return $("#id").text();'</span>)</span><br></pre></td></tr></table></figure><h2 id="自动刷慕课的案例"><a href="#自动刷慕课的案例" class="headerlink" title="自动刷慕课的案例"></a>自动刷慕课的案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># .wrap_popboxes.wrap_popchapter .popboxes_btn a</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(browser)</span>:</span></span><br><span class="line">    browser.get(<span class="string">'http://www.zhihuishu.com/'</span>)</span><br><span class="line">    <span class="comment">#  点击登录按钮</span></span><br><span class="line">    browser.find_element_by_css_selector(<span class="string">'#login-register &gt; li:nth-child(1) &gt; a'</span>).click()</span><br><span class="line">    browser.find_element_by_css_selector(<span class="string">'#lUsername'</span>).send_keys(<span class="string">'yourUserName'</span>)</span><br><span class="line">    browser.find_element_by_css_selector(<span class="string">'#lPassword'</span>).send_keys(<span class="string">'yourPassword'</span>)</span><br><span class="line">    <span class="comment"># 点击登录按钮</span></span><br><span class="line">    browser.find_element_by_css_selector(<span class="string">'#f_sign_up &gt; div &gt; span'</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clickElement</span><span class="params">(selector, browser)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            browser.find_element_by_css_selector(selector).click()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getProgress</span><span class="params">(browser)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        text = browser.execute_script(<span class="string">'return $(".current_play .progressbar_box_tip span").text();'</span>)</span><br><span class="line">        rs = float(text.split(<span class="string">'『'</span>)[<span class="number">1</span>].split(<span class="string">'%'</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> rs</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">login(browser)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.find_element_by_css_selector(<span class="string">'#course_recruit_studying_ul &gt; li.Stu_courseFocusItem.courseListOn &gt; div.new_stuCourseImgBox.fl &gt; a &gt; img'</span>).click()</span><br><span class="line">current_window = browser.current_window_handle</span><br><span class="line">windows = browser.window_handles</span><br><span class="line"><span class="keyword">for</span> win <span class="keyword">in</span> windows:</span><br><span class="line">    <span class="keyword">if</span> current_window != win:</span><br><span class="line">        <span class="comment"># 切换窗口</span></span><br><span class="line">        browser.switch_to.window(win)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">clickElement(<span class="string">'div.box_popboxes &gt; div.popboxes_btn &gt; a.popbtn_yes'</span>, browser)</span><br><span class="line">clickElement(<span class="string">'#j-assess-criteria_popup &gt; div.textbox_div &gt; div &gt; a'</span>, browser)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    progress = getProgress(browser)</span><br><span class="line">    <span class="keyword">if</span> progress == <span class="number">100</span>:</span><br><span class="line">        browser.execute_script(<span class="string">"$('.current_play').nextAll('.lesson').eq(0).click();"</span>)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 关闭题目框</span></span><br><span class="line">    browser.execute_script(<span class="string">"$('.popboxes_close.tmui_txt_hidd').click();"</span>)</span><br><span class="line">    <span class="comment"># 切换速度</span></span><br><span class="line">    browser.execute_script(<span class="string">"$('#vjs_mediaplayer &gt; div.controlsBar &gt; div.speedBox &gt; div &gt; div.speedTab15').click();"</span>)</span><br><span class="line">    time.sleep(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim查找正则剖析</title>
      <link href="2018/07/15/vim/vim%E6%9F%A5%E6%89%BE%E6%AD%A3%E5%88%99%E5%89%96%E6%9E%90/"/>
      <url>2018/07/15/vim/vim%E6%9F%A5%E6%89%BE%E6%AD%A3%E5%88%99%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="vim查找偏移量"><a href="#vim查找偏移量" class="headerlink" title="vim查找偏移量"></a>vim查找偏移量</h3><h4 id="基本偏移量"><a href="#基本偏移量" class="headerlink" title="基本偏移量"></a>基本偏移量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[num][num] 行向下，第一列</span><br><span class="line">+[num][num] 行向下，第一列</span><br><span class="line">-[num][num] 行向上，第一列</span><br><span class="line">e[+num][num] 字符向右 (从匹配结束 (end) 处算起)</span><br><span class="line">e[-num][num] 字符向左 (从匹配结束 (end) 处算起)</span><br><span class="line">s[+num][num] 字符向右 (从匹配开始 (start) 处算起)</span><br><span class="line">s[-num][num] 字符向左 (从匹配开始 (start) 处算起)</span><br><span class="line">b[+num][num] 等价于 s[+num] (从匹配开始 (begin) 处算起)</span><br><span class="line">b[-num][num] 等价于 s[-num] (从匹配开始 (begin) 处算起)</span><br><span class="line">;&#123;pattern&#125;  开始另一项搜索，见 |//;|</span><br></pre></td></tr></table></figure><p>例如:有一行 <code>hello world, good pattern</code><br>执行<code>d/oo&lt;cr&gt;</code> 结果是 <code>ood pattern</code><br>执行<code>d/oo/e&lt;cr&gt;</code> 结果是 <code>d pattern</code></p><blockquote><p>e代表匹配的结尾<br>偏移量的s和b等价,都代表开始</p></blockquote><h4 id="的应用"><a href="#的应用" class="headerlink" title=";的应用"></a>;的应用</h4><p>一个很特别的偏移是 ‘;’ 后面接另一个查找命令。例如: &gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="built_in">test</span> 1/;/<span class="built_in">test</span></span><br><span class="line">/<span class="built_in">test</span>.*/+1;?ing?</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">其中第一例会先找到下一个出现 &quot;test 1&quot; 的地方，然后寻找在它之后 &quot;test&quot; 的第一次</span><br><span class="line">出现之处。</span><br><span class="line"></span><br><span class="line">这就好象接连执行两次查找命令，不同之处在于:</span><br><span class="line">- 它可以被当作操作符之后的单个移动命令。</span><br><span class="line">- 以后的 &quot;n&quot; 或 &quot;N&quot; 命令基于第一个查找操作。</span><br><span class="line">- 当有错误时光标原地不动。</span><br></pre></td></tr></table></figure><h3 id="分支-邻接-组件"><a href="#分支-邻接-组件" class="headerlink" title="分支,邻接,组件"></a>分支,邻接,组件</h3><p>例如:<code>abcefghijk</code><br>使用<code>/\vaaa|jk</code> 会匹配<code>jk</code><br>使用<code>/\vefgh&amp;..</code> 会匹配<code>ef</code></p><h3 id="贪婪匹配和非贪婪匹配"><a href="#贪婪匹配和非贪婪匹配" class="headerlink" title="贪婪匹配和非贪婪匹配"></a>贪婪匹配和非贪婪匹配</h3><h4 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h4><p>如下查询:<code>babbaabbaaab</code><br><code>/\c\vba{2,}b</code> 可以匹配如<code>baab</code> <code>baaab</code> <code>baaaab</code></p><h4 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h4><blockquote><p>特别的 <code>{-}</code>与<code>*</code>等价只是前者为非贪婪匹配</p></blockquote><p>如下查询:<code>abcbbbc</code><br><code>/\c\va.{}c</code> 匹配<code>abcbbbc</code><br><code>/\c\va.{-}c</code> 匹配<code>abc</code></p><h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><blockquote><p>vim中零宽断言使用@关键字</p></blockquote><h4 id="正零宽先行断言"><a href="#正零宽先行断言" class="headerlink" title="正零宽先行断言"></a>正零宽先行断言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">希望匹配后方为大写字母的ab</span><br><span class="line">abc</span><br><span class="line">abC</span><br><span class="line">abA</span><br></pre></td></tr></table></figure><p>使用命令<code>\vab([A-Z])@=</code><br>原理: 前方使用分组即<code>@=</code>对应的匹配条件</p><h5 id="匹配不符合表达式的"><a href="#匹配不符合表达式的" class="headerlink" title="匹配不符合表达式的"></a>匹配不符合表达式的</h5><p><code>/\vab[A-Z]@!</code><br>就会匹配<code>abc</code>中的<code>ab</code></p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>特殊字符帮助命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:h pattern-atoms</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\zs匹配任何位置，并将匹配起始处置于该处: 下一个字符将是整个匹配的第一个字</span><br><span class="line">符。|/zero-width|</span><br><span class="line">例如: &gt;</span><br><span class="line">&quot;^\s*\zsif&quot;</span><br><span class="line">匹配行首的 &quot;if&quot;，忽略前导的空白字符。</span><br><span class="line">可以使用多次，但实际使用最后一次在匹配的分支里遇到的。例如: &gt;</span><br><span class="line">/\(.\&#123;-&#125;\zsFab\)\&#123;3&#125;</span><br><span class="line">找到第三次出现的 &quot;Fab&quot;。</span><br></pre></td></tr></table></figure><p>同理<code>\ze</code>设置此处为匹配结尾</p><p><a href="https://www.jianshu.com/p/03770041397c" target="_blank" rel="noopener">vim正则的文章</a></p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo插入图片</title>
      <link href="2018/07/14/markdown/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <url>2018/07/14/markdown/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h3 id="kap"><a href="#kap" class="headerlink" title="kap"></a>kap</h3><blockquote><p>kap 是轻量级的gif录制工具</p></blockquote><h3 id="ipic"><a href="#ipic" class="headerlink" title="ipic"></a>ipic</h3><blockquote><p>ipic 用于录制的gif上传</p></blockquote><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li>使用kap选中区域录制图片</li><li>继续编写文档</li><li>进入文件夹使用ipic上传图片</li><li>将自动生成的链接填写入md文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UltiSnips用法</title>
      <link href="2018/07/13/vim/UltiSnips%E7%94%A8%E6%B3%95/"/>
      <url>2018/07/13/vim/UltiSnips%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="加载原理"><a href="#加载原理" class="headerlink" title="加载原理"></a>加载原理</h3><p>在<code>.vim</code>路径下新建UltiSnips目录,创建<code>*.snippets</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all.snippets</span><br><span class="line">python.snippets</span><br><span class="line">markdown.snippets</span><br></pre></td></tr></table></figure></p><p>all针对全局生效,具体文件类型开头只对具体语言生效</p><h3 id="新建简单snip"><a href="#新建简单snip" class="headerlink" title="新建简单snip"></a>新建简单snip</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snippet 关键词 “说明” 设定</span><br><span class="line">内容</span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snippet std &quot;use namespace std&quot; b</span><br><span class="line">using namespace std;</span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure><p>输入<code>std&lt;tab&gt;</code>即可生成<code>use namespace std;</code></p><ul><li>b 代表只有关键词出现在行首的时候，才可以被展开</li><li>A 代表自动展开</li><li>w 代表可以展开这个 “词”，具体 “词” 的定义可以查看 :help iskeyword。直观感觉就是，这个关键词是单独的，和其他文字分开的。比如前后都是空格。</li><li>i 代表可以忽略前后字节，直接展开关键词。（这个设定比 w 要更松）</li></ul><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">snippet class &quot;class&quot; b</span><br><span class="line">class $&#123;1:Class&#125;&#123;</span><br><span class="line">public:</span><br><span class="line">    // constructors, asssignment, destructor</span><br><span class="line">    $1();</span><br><span class="line">    $1(const $1&amp;);</span><br><span class="line">    $1&amp; operator=(const $1&amp;);</span><br><span class="line">    ~$1();</span><br><span class="line">private:</span><br><span class="line">&#125;;</span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure><p>输入<code>class</code>然后输入类名就可以同时更改多处代码值<br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ft96ykshvig30wo0oo4qp.gif" alt></p><blockquote><p>变量用法: ${1:default}, 默认<code>&lt;c-j&gt;</code>下一个变量输入 <code>&lt;c-k&gt;</code>上一个变量输入</p></blockquote><h4 id="VISUAL"><a href="#VISUAL" class="headerlink" title="${VISUAL}"></a>${VISUAL}</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">snippet <span class="keyword">with</span> <span class="string">"with"</span> b</span><br><span class="line"><span class="keyword">with</span> $&#123;<span class="number">1</span>:expr&#125;`!p snip.rv = <span class="string">" as "</span> <span class="keyword">if</span> t[<span class="number">2</span>] <span class="keyword">else</span> <span class="string">""</span>`$&#123;<span class="number">2</span>:var&#125;:</span><br><span class="line">$&#123;<span class="number">3</span>:$&#123;VISUAL:<span class="keyword">pass</span>&#125;&#125;</span><br><span class="line">$<span class="number">0</span></span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure><blockquote><p>使用流程:选中需要VISUAL填充的内容按<code>&lt;tab&gt;</code>输入snip继续按<code>&lt;snip&gt;</code>即可生成</p></blockquote><h3 id="使用Python代码"><a href="#使用Python代码" class="headerlink" title="使用Python代码"></a>使用Python代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> !p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_files</span><span class="params">()</span>:</span></span><br><span class="line">    files = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):</span><br><span class="line">        <span class="keyword">if</span> f.endswith((<span class="string">'.cpp'</span>, <span class="string">'.h'</span>, <span class="string">'.cc'</span>)) <span class="keyword">and</span> <span class="keyword">not</span> f.startswith(<span class="string">'.'</span>):</span><br><span class="line">            files.append(f)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">' '</span>.join(files)</span><br><span class="line">endglobal</span><br><span class="line"></span><br><span class="line">snippet ls <span class="string">"list source files"</span> iw</span><br><span class="line">`!p snip.rv = list_files()`</span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure><p>!p代表使用Python代码,经过测试如果Python代码返回类似$1并不能使用变量输入</p><h3 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">snippet <span class="string">"rep (\d+) (\w+)"</span> <span class="string">"def"</span> r</span><br><span class="line">def $&#123;1:name&#125;:</span><br><span class="line">    $&#123;<span class="number">2</span>:`!p snip.rv=int(match.group(<span class="number">1</span>))*match.group(<span class="number">2</span>)`&#125;</span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure><p>后方选项使用<code>r</code>,表示启用Python正则表达式模式.表达使用引号包裹起来</p><h3 id="修改键位映射"><a href="#修改键位映射" class="headerlink" title="修改键位映射"></a>修改键位映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g:UltiSnipsExpandTrigger               &lt;tab&gt;</span><br><span class="line">g:UltiSnipsListSnippets                &lt;c-tab&gt;</span><br><span class="line">g:UltiSnipsJumpForwardTrigger          &lt;c-f&gt;</span><br><span class="line">g:UltiSnipsJumpBackwardTrigger         &lt;c-b&gt;</span><br></pre></td></tr></table></figure><h3 id="一个生成a-b数字的示例"><a href="#一个生成a-b数字的示例" class="headerlink" title="一个生成a-b数字的示例"></a>一个生成a-b数字的示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">snippet <span class="string">"(\d+)-(\d+)([ ,])"</span> <span class="string">"生成数字列表"</span> r</span><br><span class="line">`!p</span><br><span class="line">beginNum = int(match.group(<span class="number">1</span>))</span><br><span class="line">endNum = int(match.group(<span class="number">2</span>))</span><br><span class="line">fillSymbol = match.group(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">rs = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(endNum-beginNum+<span class="number">1</span>):</span><br><span class="line">rs = rs+str(beginNum + i) + fillSymbol + <span class="string">' '</span></span><br><span class="line">rs = rs[:<span class="number">-2</span>]</span><br><span class="line">snip.rv = rs</span><br><span class="line">`</span><br><span class="line">endsnippet</span><br></pre></td></tr></table></figure><p>功能: 输入<code>1-9,</code> 就会自动填充成<code>1, 2, 3, 4, 5, 6, 7, 8, 9</code><br><img src="http://evolution404.gitee.io/markdownimg/006tKfTcly1ft969apz3xg30xs0kc4be.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="2018/07/11/markdown/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>2018/07/11/markdown/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|姓名|年龄|生日|</span><br><span class="line">|:-:|-|-:|</span><br><span class="line">|张玉玺|19|1998-09-23|</span><br><span class="line">|张玉玺|19|1998-09-23|</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">姓名</th><th>年龄</th><th style="text-align:right">生日</th></tr></thead><tbody><tr><td style="text-align:center">张玉玺</td><td>19</td><td style="text-align:right">1998-09-23</td></tr><tr><td style="text-align:center">张玉玺</td><td>19</td><td style="text-align:right">1998-09-23</td></tr></tbody></table><ol><li>表头</li><li>分割线</li><li>表格内容</li></ol><p><code>分割线</code><br><code>-表示左对齐,:-:居中对齐,-:右对齐</code></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><blockquote><p>语法<code>![默认名](图片链接)</code><br><code>![](http://evolution404.gitee.io/markdownimg/006tKfTcly1ft96ykshvig30wo0oo4qp.gif)</code></p></blockquote><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><code>[前端的瑞士军刀](https://github.com/nieweidong/fetool)</code></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2018/07/10/hello-world/"/>
      <url>2018/07/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="2018/07/10/Linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2018/07/10/Linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><a href="http://man.linuxde.net" target="_blank" rel="noopener">命令查询网站</a></p><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><blockquote><p>原意: list</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ald [目录]</span><br></pre></td></tr></table></figure><ul><li>-a –all 显示所有文件,包括隐藏文件</li><li><p>-l long 详细信息显示 -h human 人性化显示</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br><span class="line">ls -l 两者等价</span><br></pre></td></tr></table></figure><p>  第一个参数十个字节</p><ul><li>- 文件 d 目录 l 软连接</li><li>r读w写x执行</li><li>前三所有者u 中三所属组g 后三其他人o</li></ul></li><li><p>-d  查看目录属性 </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ld 查看当前目录的信息</span><br></pre></td></tr></table></figure></li><li><p>-i  查看目录id号 inode</p></li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><blockquote><p>原意: make directories</p></blockquote><ul><li>-p 递归创建目录</li></ul><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><blockquote><p>原意: copy</p></blockquote><ul><li>-r 复制目录</li><li>-p 保留文件属性,例如保留最后修改日期</li></ul><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>同上,但是不需要-r属性<br>同目录下移动就可以改名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv a b 将a改名为b</span><br></pre></td></tr></table></figure></p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><blockquote><p>原意: remove</p></blockquote><ul><li>-r 删除目录</li><li>-f 不进行提示</li></ul><h3 id="cat-tac"><a href="#cat-tac" class="headerlink" title="cat tac"></a>cat tac</h3><p>tac即cat反过来</p><ul><li>cat 正向显示结果</li><li>tac 反向显示结果 –&gt; mac中不存在这个命令</li></ul><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><blockquote><p>原意: link</p></blockquote><ul><li>ln 硬链接 –&gt; 同步更新,不能跨分区<br>  <code>等价于cp -p + 同步更新</code></li><li>ln -s 软链接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s a a.soft</span><br></pre></td></tr></table></figure><h2 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>chmod [{ugoa} {+-=} {rwx}] [文件或目录]<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x a 对所有用户给a文件添加x权限</span><br><span class="line">chmod o=rwx a  让其他人对a文件的权限为rwx</span><br><span class="line">chmod 777 a</span><br><span class="line">chmod -R 777 a -R递归修改</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>代表字符</th><th>权限</th><th>对文件的含义</th><th>对目录的含义</th></tr></thead><tbody><tr><td>r</td><td>读权限</td><td>可以查看文件内容</td><td>可以列出目录中的内容</td></tr><tr><td>w</td><td>写权限</td><td>可以修改文件内容</td><td>可以在目录中创建删除文件</td></tr><tr><td>x</td><td>执行权限</td><td>可以执行文件</td><td>可以进入目录</td></tr></tbody></table><h3 id="其他权限管理命令"><a href="#其他权限管理命令" class="headerlink" title="其他权限管理命令"></a>其他权限管理命令</h3><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><blockquote><p>原意: change file ownership</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown root a  将a文件的所有者更改为root</span><br></pre></td></tr></table></figure><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><blockquote><p>原意: change file group ownership</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp root a 将a文件的所属组改为root</span><br></pre></td></tr></table></figure><h4 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span> -S 查看系统的默认权限</span><br></pre></td></tr></table></figure><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><blockquote><p>格式: find [搜索范围] [匹配条件]</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /etc -name init etc目录下搜索init</span><br><span class="line">find /etc -size +163840 -a -size -204800 并且关系查找 -o或者</span><br><span class="line">find . -name requ* -<span class="built_in">exec</span> ls -l &#123;&#125; \;  查找名称为requ*的文件并且展示文件的详细信息</span><br></pre></td></tr></table></figure><ul><li>*匹配任意字符,?匹配单个字符</li><li>-name 根据文件名查找</li><li>-iname 根据文件名查找不区分大小写</li><li>-size 查找大小 +大于 -小于</li><li>-user 查找所有者</li><li>-group 查找所属组</li><li>-amin 最近访问时间</li><li>-cmin change</li><li>-mmin modify</li><li>-exec -ok 前者执行命令,后者执行命令每个都进行确认操作</li></ul><h3 id="其他搜索命令"><a href="#其他搜索命令" class="headerlink" title="其他搜索命令"></a>其他搜索命令</h3><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><blockquote><p>加速的搜索命令</p></blockquote><h4 id="which-hereis"><a href="#which-hereis" class="headerlink" title="which  hereis"></a>which  hereis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> ls</span><br><span class="line">whereis ls 显示命令路径以及帮助文档路径</span><br></pre></td></tr></table></figure><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -i hello hello.c 不区分大小写查找</span><br><span class="line">grep -v hello hello.c 反向查找,去掉存在表达式的行</span><br></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><blockquote><p>原意: manual</p></blockquote><p>可以查看命令的帮助和配置文件的帮助–&gt;配置文件的帮助直接写名字不写绝对路径<br>1命令的帮助,5配置文件的帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man passwd 查看命令的帮助</span><br><span class="line">man 5 passwd 查看配置文件的帮助</span><br></pre></td></tr></table></figure><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><blockquote><p>mac上不能使用</p></blockquote><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><h3 id="who-w"><a href="#who-w" class="headerlink" title="who, w"></a>who, w</h3><blockquote><p><code>who</code>查看所用用户登录状况</p></blockquote><blockquote><p><code>w</code>查看所用用户更详细登录状况<br><code>可以查看当前服务器已经运行了多久</code></p></blockquote><h2 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h2><h3 id="gz压缩格式"><a href="#gz压缩格式" class="headerlink" title=".gz压缩格式"></a>.gz压缩格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip fileName 压缩文件</span><br><span class="line">gunzip fileName 解压文件</span><br></pre></td></tr></table></figure><p>gzip 命令只能压缩文件,不能压缩目录.而且压缩之后会删除原文件</p><h3 id="zip压缩格式"><a href="#zip压缩格式" class="headerlink" title=".zip压缩格式"></a>.zip压缩格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip fileName 压缩文件</span><br><span class="line">unzip fileName 解压文件</span><br></pre></td></tr></table></figure><p>zip -r directory 压缩目录</p><h3 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf</span><br></pre></td></tr></table></figure><p>-c 打包<br>-v 显示详细信息<br>-f 指定文件名<br>-z 打包同时压缩<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf a.tar a 打包a文件夹生成a.tar</span><br><span class="line">gzip a.tar 将a.tar进行压缩</span><br></pre></td></tr></table></figure></p><p>同时打包和压缩<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcf a.tar.gz a  z放在前面</span><br></pre></td></tr></table></figure></p><p>解压缩</p><p><code>-c</code> 更换为 <code>-x</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf a.tar.gz</span><br></pre></td></tr></table></figure></p><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><h3 id="wirte"><a href="#wirte" class="headerlink" title="wirte"></a>wirte</h3><p>在线用户发送信息 使用<c-d>退出发送信息</c-d></p><h3 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h3><blockquote><p>原意: write all</p></blockquote><p>向所有在线用户发送信息</p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 3 www.baidu.com -c选项表示次数</span><br></pre></td></tr></table></figure><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>查看用户的登录记录<br>lastlog 查看所有用户的最后一次登录信息</p><h3 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><ul><li>-t tcp协议</li><li>-u udp协议</li><li>-l 监听</li><li>-r 路由</li><li>-n 显示ip地址和端口号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tuln 查看本机监听的端口</span><br></pre></td></tr></table></figure><h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>-c 取消上一个关机命令<br>-h 关机<br>-r 重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now  现在关机</span><br></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><ul><li>0  停机（千万不能把initdefault 设置为0）</li><li>1  单用户模式</li><li>2  多用户，没有 NFS(和级别3相似，会停止部分服务)</li><li>3  完全多用户模式</li><li>4  没有用到</li><li>5  x11(Xwindow)</li><li>6  重新启动（千万不要把initdefault 设置为6）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/inittab  设置系统默认运行级别</span><br></pre></td></tr></table></figure><p>runlevel  查看当前运行级别</p><h3 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h3><p>退出命令<br>使用结束之后退出</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
